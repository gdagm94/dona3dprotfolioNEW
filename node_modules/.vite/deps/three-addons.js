import {
  __commonJS
} from "./chunk-76J2PTFD.js";

// node_modules/three-addons/build/three-addons.min.js
var require_three_addons_min = __commonJS({
  "node_modules/three-addons/build/three-addons.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : "object" == typeof exports ? exports.THREE_ADDONS = t() : e.THREE_ADDONS = t();
    }(exports, function() {
      return function(e) {
        function t(i) {
          if (r[i])
            return r[i].exports;
          var n = r[i] = { i, l: false, exports: {} };
          return e[i].call(n.exports, n, n.exports, t), n.l = true, n.exports;
        }
        var r = {};
        return t.m = e, t.c = r, t.d = function(e2, r2, i) {
          t.o(e2, r2) || Object.defineProperty(e2, r2, { configurable: false, enumerable: true, get: i });
        }, t.n = function(e2) {
          var r2 = e2 && e2.__esModule ? function() {
            return e2.default;
          } : function() {
            return e2;
          };
          return t.d(r2, "a", r2), r2;
        }, t.o = function(e2, t2) {
          return Object.prototype.hasOwnProperty.call(e2, t2);
        }, t.p = "", t(t.s = 1);
      }([function(e, t, r) {
        "use strict";
        function i() {
        }
        function n(e2, t2) {
          this.x = e2 || 0, this.y = t2 || 0;
        }
        function o() {
          this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.");
        }
        function a(e2, t2, r2, i2) {
          this._x = e2 || 0, this._y = t2 || 0, this._z = r2 || 0, this._w = void 0 !== i2 ? i2 : 1;
        }
        function s(e2, t2, r2) {
          this.x = e2 || 0, this.y = t2 || 0, this.z = r2 || 0;
        }
        function c() {
          this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.");
        }
        function l(e2, t2, r2, i2, o2, a2, s2, u2, h2, d2) {
          Object.defineProperty(this, "id", { value: Bs++ }), this.uuid = zs.generateUUID(), this.name = "", this.image = void 0 !== e2 ? e2 : l.DEFAULT_IMAGE, this.mipmaps = [], this.mapping = void 0 !== t2 ? t2 : l.DEFAULT_MAPPING, this.wrapS = void 0 !== r2 ? r2 : La, this.wrapT = void 0 !== i2 ? i2 : La, this.magFilter = void 0 !== o2 ? o2 : Ua, this.minFilter = void 0 !== a2 ? a2 : Oa, this.anisotropy = void 0 !== h2 ? h2 : 1, this.format = void 0 !== s2 ? s2 : Ja, this.type = void 0 !== u2 ? u2 : Na, this.offset = new n(0, 0), this.repeat = new n(1, 1), this.center = new n(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new c(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.encoding = void 0 !== d2 ? d2 : Cs, this.version = 0, this.onUpdate = null;
        }
        function u(e2, t2, r2, i2) {
          this.x = e2 || 0, this.y = t2 || 0, this.z = r2 || 0, this.w = void 0 !== i2 ? i2 : 1;
        }
        function h(e2, t2, r2) {
          this.width = e2, this.height = t2, this.scissor = new u(0, 0, e2, t2), this.scissorTest = false, this.viewport = new u(0, 0, e2, t2), r2 = r2 || {}, void 0 === r2.minFilter && (r2.minFilter = Ua), this.texture = new l(void 0, void 0, r2.wrapS, r2.wrapT, r2.magFilter, r2.minFilter, r2.format, r2.type, r2.anisotropy, r2.encoding), this.depthBuffer = void 0 === r2.depthBuffer || r2.depthBuffer, this.stencilBuffer = void 0 === r2.stencilBuffer || r2.stencilBuffer, this.depthTexture = void 0 !== r2.depthTexture ? r2.depthTexture : null;
        }
        function d(e2, t2, r2) {
          h.call(this, e2, t2, r2), this.activeCubeFace = 0, this.activeMipMapLevel = 0;
        }
        function p(e2, t2, r2, i2, n2, o2, a2, s2, c2, u2, h2, d2) {
          l.call(this, null, o2, a2, s2, c2, u2, i2, n2, h2, d2), this.image = { data: e2, width: t2, height: r2 }, this.magFilter = void 0 !== c2 ? c2 : Ra, this.minFilter = void 0 !== u2 ? u2 : Ra, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
        }
        function f(e2, t2) {
          this.min = void 0 !== e2 ? e2 : new s(1 / 0, 1 / 0, 1 / 0), this.max = void 0 !== t2 ? t2 : new s(-1 / 0, -1 / 0, -1 / 0);
        }
        function m(e2, t2) {
          this.center = void 0 !== e2 ? e2 : new s(), this.radius = void 0 !== t2 ? t2 : 0;
        }
        function v(e2, t2) {
          this.normal = void 0 !== e2 ? e2 : new s(1, 0, 0), this.constant = void 0 !== t2 ? t2 : 0;
        }
        function g(e2, t2, r2, i2, n2, o2) {
          this.planes = [void 0 !== e2 ? e2 : new v(), void 0 !== t2 ? t2 : new v(), void 0 !== r2 ? r2 : new v(), void 0 !== i2 ? i2 : new v(), void 0 !== n2 ? n2 : new v(), void 0 !== o2 ? o2 : new v()];
        }
        function y(e2, t2, r2) {
          return void 0 === t2 && void 0 === r2 ? this.set(e2) : this.setRGB(e2, t2, r2);
        }
        function x(e2) {
          function t2(t3, r3) {
            var i3 = t3.array, n3 = t3.dynamic ? e2.DYNAMIC_DRAW : e2.STATIC_DRAW, o3 = e2.createBuffer();
            e2.bindBuffer(r3, o3), e2.bufferData(r3, i3, n3), t3.onUploadCallback();
            var a3 = e2.FLOAT;
            return i3 instanceof Float32Array ? a3 = e2.FLOAT : i3 instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : i3 instanceof Uint16Array ? a3 = e2.UNSIGNED_SHORT : i3 instanceof Int16Array ? a3 = e2.SHORT : i3 instanceof Uint32Array ? a3 = e2.UNSIGNED_INT : i3 instanceof Int32Array ? a3 = e2.INT : i3 instanceof Int8Array ? a3 = e2.BYTE : i3 instanceof Uint8Array && (a3 = e2.UNSIGNED_BYTE), { buffer: o3, type: a3, bytesPerElement: i3.BYTES_PER_ELEMENT, version: t3.version };
          }
          function r2(t3, r3, i3) {
            var n3 = r3.array, o3 = r3.updateRange;
            e2.bindBuffer(i3, t3), false === r3.dynamic ? e2.bufferData(i3, n3, e2.STATIC_DRAW) : -1 === o3.count ? e2.bufferSubData(i3, 0, n3) : 0 === o3.count ? console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.") : (e2.bufferSubData(i3, o3.offset * n3.BYTES_PER_ELEMENT, n3.subarray(o3.offset, o3.offset + o3.count)), o3.count = -1);
          }
          function i2(e3) {
            return e3.isInterleavedBufferAttribute && (e3 = e3.data), a2.get(e3);
          }
          function n2(t3) {
            t3.isInterleavedBufferAttribute && (t3 = t3.data);
            var r3 = a2.get(t3);
            r3 && (e2.deleteBuffer(r3.buffer), a2.delete(t3));
          }
          function o2(e3, i3) {
            e3.isInterleavedBufferAttribute && (e3 = e3.data);
            var n3 = a2.get(e3);
            void 0 === n3 ? a2.set(e3, t2(e3, i3)) : n3.version < e3.version && (r2(n3.buffer, e3, i3), n3.version = e3.version);
          }
          var a2 = /* @__PURE__ */ new WeakMap();
          return { get: i2, remove: n2, update: o2 };
        }
        function _(e2, t2, r2, i2) {
          this._x = e2 || 0, this._y = t2 || 0, this._z = r2 || 0, this._order = i2 || _.DefaultOrder;
        }
        function b() {
          this.mask = 1;
        }
        function w() {
          function e2() {
            n2.setFromEuler(i2, false);
          }
          function t2() {
            i2.setFromQuaternion(n2, void 0, false);
          }
          Object.defineProperty(this, "id", { value: Ws++ }), this.uuid = zs.generateUUID(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = w.DefaultUp.clone();
          var r2 = new s(), i2 = new _(), n2 = new a(), l2 = new s(1, 1, 1);
          i2.onChange(e2), n2.onChange(t2), Object.defineProperties(this, { position: { enumerable: true, value: r2 }, rotation: { enumerable: true, value: i2 }, quaternion: { enumerable: true, value: n2 }, scale: { enumerable: true, value: l2 }, modelViewMatrix: { value: new o() }, normalMatrix: { value: new c() } }), this.matrix = new o(), this.matrixWorld = new o(), this.matrixAutoUpdate = w.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = false, this.layers = new b(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.userData = {};
        }
        function M() {
          w.call(this), this.type = "Camera", this.matrixWorldInverse = new o(), this.projectionMatrix = new o();
        }
        function E(e2, t2, r2, i2, n2, o2) {
          M.call(this), this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e2, this.right = t2, this.top = r2, this.bottom = i2, this.near = void 0 !== n2 ? n2 : 0.1, this.far = void 0 !== o2 ? o2 : 2e3, this.updateProjectionMatrix();
        }
        function S(e2, t2, r2, i2, n2, o2) {
          this.a = e2, this.b = t2, this.c = r2, this.normal = i2 && i2.isVector3 ? i2 : new s(), this.vertexNormals = Array.isArray(i2) ? i2 : [], this.color = n2 && n2.isColor ? n2 : new y(), this.vertexColors = Array.isArray(n2) ? n2 : [], this.materialIndex = void 0 !== o2 ? o2 : 0;
        }
        function T() {
          Object.defineProperty(this, "id", { value: Xs += 2 }), this.uuid = zs.generateUUID(), this.name = "", this.type = "Geometry", this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.elementsNeedUpdate = false, this.verticesNeedUpdate = false, this.uvsNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.lineDistancesNeedUpdate = false, this.groupsNeedUpdate = false;
        }
        function A(e2, t2, r2) {
          if (Array.isArray(e2))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          this.name = "", this.array = e2, this.itemSize = t2, this.count = void 0 !== e2 ? e2.length / t2 : 0, this.normalized = true === r2, this.dynamic = false, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
        }
        function L(e2, t2, r2) {
          A.call(this, new Int8Array(e2), t2, r2);
        }
        function C(e2, t2, r2) {
          A.call(this, new Uint8Array(e2), t2, r2);
        }
        function R(e2, t2, r2) {
          A.call(this, new Uint8ClampedArray(e2), t2, r2);
        }
        function P(e2, t2, r2) {
          A.call(this, new Int16Array(e2), t2, r2);
        }
        function D(e2, t2, r2) {
          A.call(this, new Uint16Array(e2), t2, r2);
        }
        function U(e2, t2, r2) {
          A.call(this, new Int32Array(e2), t2, r2);
        }
        function I(e2, t2, r2) {
          A.call(this, new Uint32Array(e2), t2, r2);
        }
        function O(e2, t2, r2) {
          A.call(this, new Float32Array(e2), t2, r2);
        }
        function N(e2, t2, r2) {
          A.call(this, new Float64Array(e2), t2, r2);
        }
        function F() {
          this.vertices = [], this.normals = [], this.colors = [], this.uvs = [], this.uvs2 = [], this.groups = [], this.morphTargets = {}, this.skinWeights = [], this.skinIndices = [], this.boundingBox = null, this.boundingSphere = null, this.verticesNeedUpdate = false, this.normalsNeedUpdate = false, this.colorsNeedUpdate = false, this.uvsNeedUpdate = false, this.groupsNeedUpdate = false;
        }
        function z(e2) {
          if (0 === e2.length)
            return -1 / 0;
          for (var t2 = e2[0], r2 = 1, i2 = e2.length; r2 < i2; ++r2)
            e2[r2] > t2 && (t2 = e2[r2]);
          return t2;
        }
        function B() {
          Object.defineProperty(this, "id", { value: qs += 2 }), this.uuid = zs.generateUUID(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 };
        }
        function G(e2, t2, r2, i2, n2, o2) {
          T.call(this), this.type = "BoxGeometry", this.parameters = { width: e2, height: t2, depth: r2, widthSegments: i2, heightSegments: n2, depthSegments: o2 }, this.fromBufferGeometry(new H(e2, t2, r2, i2, n2, o2)), this.mergeVertices();
        }
        function H(e2, t2, r2, i2, n2, o2) {
          function a2(e3, t3, r3, i3, n3, o3, a3, m2, v2, g2, y2) {
            var x2, _2, b2 = o3 / v2, w2 = a3 / g2, M2 = o3 / 2, E2 = a3 / 2, S2 = m2 / 2, T2 = v2 + 1, A2 = g2 + 1, L2 = 0, C2 = 0, R2 = new s();
            for (_2 = 0; _2 < A2; _2++) {
              var P2 = _2 * w2 - E2;
              for (x2 = 0; x2 < T2; x2++) {
                var D2 = x2 * b2 - M2;
                R2[e3] = D2 * i3, R2[t3] = P2 * n3, R2[r3] = S2, u2.push(R2.x, R2.y, R2.z), R2[e3] = 0, R2[t3] = 0, R2[r3] = m2 > 0 ? 1 : -1, h2.push(R2.x, R2.y, R2.z), d2.push(x2 / v2), d2.push(1 - _2 / g2), L2 += 1;
              }
            }
            for (_2 = 0; _2 < g2; _2++)
              for (x2 = 0; x2 < v2; x2++) {
                var U2 = p2 + x2 + T2 * _2, I2 = p2 + x2 + T2 * (_2 + 1), O2 = p2 + (x2 + 1) + T2 * (_2 + 1), N2 = p2 + (x2 + 1) + T2 * _2;
                l2.push(U2, I2, N2), l2.push(I2, O2, N2), C2 += 6;
              }
            c2.addGroup(f2, C2, y2), f2 += C2, p2 += L2;
          }
          B.call(this), this.type = "BoxBufferGeometry", this.parameters = { width: e2, height: t2, depth: r2, widthSegments: i2, heightSegments: n2, depthSegments: o2 };
          var c2 = this;
          e2 = e2 || 1, t2 = t2 || 1, r2 = r2 || 1, i2 = Math.floor(i2) || 1, n2 = Math.floor(n2) || 1, o2 = Math.floor(o2) || 1;
          var l2 = [], u2 = [], h2 = [], d2 = [], p2 = 0, f2 = 0;
          a2("z", "y", "x", -1, -1, r2, t2, e2, o2, n2, 0), a2("z", "y", "x", 1, -1, r2, t2, -e2, o2, n2, 1), a2("x", "z", "y", 1, 1, e2, r2, t2, i2, o2, 2), a2("x", "z", "y", 1, -1, e2, r2, -t2, i2, o2, 3), a2("x", "y", "z", 1, -1, e2, t2, r2, i2, n2, 4), a2("x", "y", "z", -1, -1, e2, t2, -r2, i2, n2, 5), this.setIndex(l2), this.addAttribute("position", new O(u2, 3)), this.addAttribute("normal", new O(h2, 3)), this.addAttribute("uv", new O(d2, 2));
        }
        function j(e2, t2, r2, i2) {
          T.call(this), this.type = "PlaneGeometry", this.parameters = { width: e2, height: t2, widthSegments: r2, heightSegments: i2 }, this.fromBufferGeometry(new V(e2, t2, r2, i2)), this.mergeVertices();
        }
        function V(e2, t2, r2, i2) {
          B.call(this), this.type = "PlaneBufferGeometry", this.parameters = { width: e2, height: t2, widthSegments: r2, heightSegments: i2 }, e2 = e2 || 1, t2 = t2 || 1;
          var n2, o2, a2 = e2 / 2, s2 = t2 / 2, c2 = Math.floor(r2) || 1, l2 = Math.floor(i2) || 1, u2 = c2 + 1, h2 = l2 + 1, d2 = e2 / c2, p2 = t2 / l2, f2 = [], m2 = [], v2 = [], g2 = [];
          for (o2 = 0; o2 < h2; o2++) {
            var y2 = o2 * p2 - s2;
            for (n2 = 0; n2 < u2; n2++) {
              var x2 = n2 * d2 - a2;
              m2.push(x2, -y2, 0), v2.push(0, 0, 1), g2.push(n2 / c2), g2.push(1 - o2 / l2);
            }
          }
          for (o2 = 0; o2 < l2; o2++)
            for (n2 = 0; n2 < c2; n2++) {
              var _2 = n2 + u2 * o2, b2 = n2 + u2 * (o2 + 1), w2 = n2 + 1 + u2 * (o2 + 1), M2 = n2 + 1 + u2 * o2;
              f2.push(_2, b2, M2), f2.push(b2, w2, M2);
            }
          this.setIndex(f2), this.addAttribute("position", new O(m2, 3)), this.addAttribute("normal", new O(v2, 3)), this.addAttribute("uv", new O(g2, 2));
        }
        function k() {
          Object.defineProperty(this, "id", { value: Ys++ }), this.uuid = zs.generateUUID(), this.name = "", this.type = "Material", this.fog = true, this.lights = true, this.blending = Fo, this.side = Ro, this.flatShading = false, this.vertexColors = Uo, this.opacity = 1, this.transparent = false, this.blendSrc = Ko, this.blendDst = Qo, this.blendEquation = jo, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = sa, this.depthTest = true, this.depthWrite = true, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaTest = 0, this.premultipliedAlpha = false, this.overdraw = 0, this.visible = true, this.userData = {}, this.needsUpdate = true;
        }
        function W(e2) {
          k.call(this), this.type = "MeshBasicMaterial", this.color = new y(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = da, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.lights = false, this.setValues(e2);
        }
        function X(e2) {
          k.call(this), this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.extensions = { derivatives: false, fragDepth: false, drawBuffers: false, shaderTextureLOD: false }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, void 0 !== e2 && (void 0 !== e2.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(e2));
        }
        function q(e2, t2) {
          this.origin = void 0 !== e2 ? e2 : new s(), this.direction = void 0 !== t2 ? t2 : new s();
        }
        function Y(e2, t2) {
          this.start = void 0 !== e2 ? e2 : new s(), this.end = void 0 !== t2 ? t2 : new s();
        }
        function Z(e2, t2, r2) {
          this.a = void 0 !== e2 ? e2 : new s(), this.b = void 0 !== t2 ? t2 : new s(), this.c = void 0 !== r2 ? r2 : new s();
        }
        function J(e2, t2) {
          w.call(this), this.type = "Mesh", this.geometry = void 0 !== e2 ? e2 : new B(), this.material = void 0 !== t2 ? t2 : new W({ color: 16777215 * Math.random() }), this.drawMode = Ts, this.updateMorphTargets();
        }
        function K(e2, t2, r2, i2) {
          function n2(t3, i3, n3, h2) {
            var d2 = i3.background;
            null === d2 ? o2(l2, u2) : d2 && d2.isColor && (o2(d2, 1), h2 = true), (e2.autoClear || h2) && e2.clear(e2.autoClearColor, e2.autoClearDepth, e2.autoClearStencil), d2 && d2.isCubeTexture ? (void 0 === c2 && (c2 = new J(new H(1, 1, 1), new X({ uniforms: ks.cube.uniforms, vertexShader: ks.cube.vertexShader, fragmentShader: ks.cube.fragmentShader, side: Po, depthTest: true, depthWrite: false, fog: false })), c2.geometry.removeAttribute("normal"), c2.geometry.removeAttribute("uv"), c2.onBeforeRender = function(e3, t4, r3) {
              this.matrixWorld.copyPosition(r3.matrixWorld);
            }, r2.update(c2.geometry)), c2.material.uniforms.tCube.value = d2, t3.push(c2, c2.geometry, c2.material, 0, null)) : d2 && d2.isTexture && (void 0 === a2 && (a2 = new E(-1, 1, 1, -1, 0, 1), s2 = new J(new V(2, 2), new W({ depthTest: false, depthWrite: false, fog: false })), r2.update(s2.geometry)), s2.material.map = d2, e2.renderBufferDirect(a2, null, s2.geometry, s2.material, s2, null));
          }
          function o2(e3, r3) {
            t2.buffers.color.setClear(e3.r, e3.g, e3.b, r3, i2);
          }
          var a2, s2, c2, l2 = new y(0), u2 = 0;
          return { getClearColor: function() {
            return l2;
          }, setClearColor: function(e3, t3) {
            l2.set(e3), u2 = void 0 !== t3 ? t3 : 1, o2(l2, u2);
          }, getClearAlpha: function() {
            return u2;
          }, setClearAlpha: function(e3) {
            u2 = e3, o2(l2, u2);
          }, render: n2 };
        }
        function Q(e2, t2, r2) {
          function i2(e3) {
            a2 = e3;
          }
          function n2(t3, i3) {
            e2.drawArrays(a2, t3, i3), r2.update(i3, a2);
          }
          function o2(e3, i3, n3) {
            var o3 = t2.get("ANGLE_instanced_arrays");
            if (null === o3)
              return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            var s2 = e3.attributes.position;
            s2.isInterleavedBufferAttribute ? (n3 = s2.data.count, o3.drawArraysInstancedANGLE(a2, 0, n3, e3.maxInstancedCount)) : o3.drawArraysInstancedANGLE(a2, i3, n3, e3.maxInstancedCount), r2.update(n3, a2, e3.maxInstancedCount);
          }
          var a2;
          this.setMode = i2, this.render = n2, this.renderInstances = o2;
        }
        function $(e2, t2, r2) {
          function i2() {
            if (void 0 !== o2)
              return o2;
            var r3 = t2.get("EXT_texture_filter_anisotropic");
            return o2 = null !== r3 ? e2.getParameter(r3.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0;
          }
          function n2(t3) {
            if ("highp" === t3) {
              if (e2.getShaderPrecisionFormat(e2.VERTEX_SHADER, e2.HIGH_FLOAT).precision > 0 && e2.getShaderPrecisionFormat(e2.FRAGMENT_SHADER, e2.HIGH_FLOAT).precision > 0)
                return "highp";
              t3 = "mediump";
            }
            return "mediump" === t3 && e2.getShaderPrecisionFormat(e2.VERTEX_SHADER, e2.MEDIUM_FLOAT).precision > 0 && e2.getShaderPrecisionFormat(e2.FRAGMENT_SHADER, e2.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
          }
          var o2, a2 = void 0 !== r2.precision ? r2.precision : "highp", s2 = n2(a2);
          s2 !== a2 && (console.warn("THREE.WebGLRenderer:", a2, "not supported, using", s2, "instead."), a2 = s2);
          var c2 = true === r2.logarithmicDepthBuffer, l2 = e2.getParameter(e2.MAX_TEXTURE_IMAGE_UNITS), u2 = e2.getParameter(e2.MAX_VERTEX_TEXTURE_IMAGE_UNITS), h2 = e2.getParameter(e2.MAX_TEXTURE_SIZE), d2 = e2.getParameter(e2.MAX_CUBE_MAP_TEXTURE_SIZE), p2 = e2.getParameter(e2.MAX_VERTEX_ATTRIBS), f2 = e2.getParameter(e2.MAX_VERTEX_UNIFORM_VECTORS), m2 = e2.getParameter(e2.MAX_VARYING_VECTORS), v2 = e2.getParameter(e2.MAX_FRAGMENT_UNIFORM_VECTORS), g2 = u2 > 0, y2 = !!t2.get("OES_texture_float");
          return { getMaxAnisotropy: i2, getMaxPrecision: n2, precision: a2, logarithmicDepthBuffer: c2, maxTextures: l2, maxVertexTextures: u2, maxTextureSize: h2, maxCubemapSize: d2, maxAttributes: p2, maxVertexUniforms: f2, maxVaryings: m2, maxFragmentUniforms: v2, vertexTextures: g2, floatFragmentTextures: y2, floatVertexTextures: g2 && y2 };
        }
        function ee() {
          function e2() {
            u2.value !== i2 && (u2.value = i2, u2.needsUpdate = n2 > 0), r2.numPlanes = n2, r2.numIntersection = 0;
          }
          function t2(e3, t3, i3, n3) {
            var o3 = null !== e3 ? e3.length : 0, a3 = null;
            if (0 !== o3) {
              if (a3 = u2.value, true !== n3 || null === a3) {
                var c2 = i3 + 4 * o3, h2 = t3.matrixWorldInverse;
                l2.getNormalMatrix(h2), (null === a3 || a3.length < c2) && (a3 = new Float32Array(c2));
                for (var d2 = 0, p2 = i3; d2 !== o3; ++d2, p2 += 4)
                  s2.copy(e3[d2]).applyMatrix4(h2, l2), s2.normal.toArray(a3, p2), a3[p2 + 3] = s2.constant;
              }
              u2.value = a3, u2.needsUpdate = true;
            }
            return r2.numPlanes = o3, a3;
          }
          var r2 = this, i2 = null, n2 = 0, o2 = false, a2 = false, s2 = new v(), l2 = new c(), u2 = { value: null, needsUpdate: false };
          this.uniform = u2, this.numPlanes = 0, this.numIntersection = 0, this.init = function(e3, r3, a3) {
            var s3 = 0 !== e3.length || r3 || 0 !== n2 || o2;
            return o2 = r3, i2 = t2(e3, a3, 0), n2 = e3.length, s3;
          }, this.beginShadows = function() {
            a2 = true, t2(null);
          }, this.endShadows = function() {
            a2 = false, e2();
          }, this.setState = function(r3, s3, c2, l3, h2, d2) {
            if (!o2 || null === r3 || 0 === r3.length || a2 && !c2)
              a2 ? t2(null) : e2();
            else {
              var p2 = a2 ? 0 : n2, f2 = 4 * p2, m2 = h2.clippingState || null;
              u2.value = m2, m2 = t2(r3, l3, f2, d2);
              for (var v2 = 0; v2 !== f2; ++v2)
                m2[v2] = i2[v2];
              h2.clippingState = m2, this.numIntersection = s3 ? this.numPlanes : 0, this.numPlanes += p2;
            }
          };
        }
        function te(e2) {
          var t2 = {};
          return { get: function(r2) {
            if (void 0 !== t2[r2])
              return t2[r2];
            var i2;
            switch (r2) {
              case "WEBGL_depth_texture":
                i2 = e2.getExtension("WEBGL_depth_texture") || e2.getExtension("MOZ_WEBGL_depth_texture") || e2.getExtension("WEBKIT_WEBGL_depth_texture");
                break;
              case "EXT_texture_filter_anisotropic":
                i2 = e2.getExtension("EXT_texture_filter_anisotropic") || e2.getExtension("MOZ_EXT_texture_filter_anisotropic") || e2.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                break;
              case "WEBGL_compressed_texture_s3tc":
                i2 = e2.getExtension("WEBGL_compressed_texture_s3tc") || e2.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || e2.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                break;
              case "WEBGL_compressed_texture_pvrtc":
                i2 = e2.getExtension("WEBGL_compressed_texture_pvrtc") || e2.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                break;
              default:
                i2 = e2.getExtension(r2);
            }
            return null === i2 && console.warn("THREE.WebGLRenderer: " + r2 + " extension not supported."), t2[r2] = i2, i2;
          } };
        }
        function re(e2, t2, r2) {
          function i2(e3) {
            var n3 = e3.target, o3 = s2[n3.id];
            null !== o3.index && t2.remove(o3.index);
            for (var a3 in o3.attributes)
              t2.remove(o3.attributes[a3]);
            n3.removeEventListener("dispose", i2), delete s2[n3.id];
            var l2 = c2[n3.id];
            l2 && (t2.remove(l2), delete c2[n3.id]), l2 = c2[o3.id], l2 && (t2.remove(l2), delete c2[o3.id]), r2.memory.geometries--;
          }
          function n2(e3, t3) {
            var n3 = s2[t3.id];
            return n3 || (t3.addEventListener("dispose", i2), t3.isBufferGeometry ? n3 = t3 : t3.isGeometry && (void 0 === t3._bufferGeometry && (t3._bufferGeometry = new B().setFromObject(e3)), n3 = t3._bufferGeometry), s2[t3.id] = n3, r2.memory.geometries++, n3);
          }
          function o2(r3) {
            var i3 = r3.index, n3 = r3.attributes;
            null !== i3 && t2.update(i3, e2.ELEMENT_ARRAY_BUFFER);
            for (var o3 in n3)
              t2.update(n3[o3], e2.ARRAY_BUFFER);
            var a3 = r3.morphAttributes;
            for (var o3 in a3)
              for (var s3 = a3[o3], c3 = 0, l2 = s3.length; c3 < l2; c3++)
                t2.update(s3[c3], e2.ARRAY_BUFFER);
          }
          function a2(r3) {
            var i3 = c2[r3.id];
            if (i3)
              return i3;
            var n3 = [], o3 = r3.index, a3 = r3.attributes;
            if (null !== o3)
              for (var s3 = o3.array, l2 = 0, u2 = s3.length; l2 < u2; l2 += 3) {
                var h2 = s3[l2 + 0], d2 = s3[l2 + 1], p2 = s3[l2 + 2];
                n3.push(h2, d2, d2, p2, p2, h2);
              }
            else
              for (var s3 = a3.position.array, l2 = 0, u2 = s3.length / 3 - 1; l2 < u2; l2 += 3) {
                var h2 = l2 + 0, d2 = l2 + 1, p2 = l2 + 2;
                n3.push(h2, d2, d2, p2, p2, h2);
              }
            return i3 = new (z(n3) > 65535 ? I : D)(n3, 1), t2.update(i3, e2.ELEMENT_ARRAY_BUFFER), c2[r3.id] = i3, i3;
          }
          var s2 = {}, c2 = {};
          return { get: n2, update: o2, getWireframeAttribute: a2 };
        }
        function ie(e2, t2, r2) {
          function i2(e3) {
            s2 = e3;
          }
          function n2(e3) {
            c2 = e3.type, l2 = e3.bytesPerElement;
          }
          function o2(t3, i3) {
            e2.drawElements(s2, i3, c2, t3 * l2), r2.update(i3, s2);
          }
          function a2(e3, i3, n3) {
            var o3 = t2.get("ANGLE_instanced_arrays");
            if (null === o3)
              return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            o3.drawElementsInstancedANGLE(s2, n3, c2, i3 * l2, e3.maxInstancedCount), r2.update(n3, s2, e3.maxInstancedCount);
          }
          var s2, c2, l2;
          this.setMode = i2, this.setIndex = n2, this.render = o2, this.renderInstances = a2;
        }
        function ne(e2) {
          function t2(t3, r3, i3) {
            switch (i3 = i3 || 1, n2.calls++, r3) {
              case e2.TRIANGLES:
                n2.triangles += i3 * (t3 / 3);
                break;
              case e2.TRIANGLE_STRIP:
              case e2.TRIANGLE_FAN:
                n2.triangles += i3 * (t3 - 2);
                break;
              case e2.LINES:
                n2.lines += i3 * (t3 / 2);
                break;
              case e2.LINE_STRIP:
                n2.lines += i3 * (t3 - 1);
                break;
              case e2.LINE_LOOP:
                n2.lines += i3 * t3;
                break;
              case e2.POINTS:
                n2.points += i3 * t3;
                break;
              default:
                console.error("THREE.WebGLInfo: Unknown draw mode:", r3);
            }
          }
          function r2() {
            n2.frame++, n2.calls = 0, n2.triangles = 0, n2.points = 0, n2.lines = 0;
          }
          var i2 = { geometries: 0, textures: 0 }, n2 = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
          return { memory: i2, render: n2, programs: null, autoReset: true, reset: r2, update: t2 };
        }
        function oe(e2, t2) {
          return Math.abs(t2[1]) - Math.abs(e2[1]);
        }
        function ae(e2) {
          function t2(t3, n2, o2, a2) {
            var s2 = t3.morphTargetInfluences, c2 = s2.length, l2 = r2[n2.id];
            if (void 0 === l2) {
              l2 = [];
              for (var u2 = 0; u2 < c2; u2++)
                l2[u2] = [u2, 0];
              r2[n2.id] = l2;
            }
            for (var h2 = o2.morphTargets && n2.morphAttributes.position, d2 = o2.morphNormals && n2.morphAttributes.normal, u2 = 0; u2 < c2; u2++) {
              var p2 = l2[u2];
              0 !== p2[1] && (h2 && n2.removeAttribute("morphTarget" + u2), d2 && n2.removeAttribute("morphNormal" + u2));
            }
            for (var u2 = 0; u2 < c2; u2++) {
              var p2 = l2[u2];
              p2[0] = u2, p2[1] = s2[u2];
            }
            l2.sort(oe);
            for (var u2 = 0; u2 < 8; u2++) {
              var p2 = l2[u2];
              if (p2) {
                var f2 = p2[0], m2 = p2[1];
                if (m2) {
                  h2 && n2.addAttribute("morphTarget" + u2, h2[f2]), d2 && n2.addAttribute("morphNormal" + u2, d2[f2]), i2[u2] = m2;
                  continue;
                }
              }
              i2[u2] = 0;
            }
            a2.getUniforms().setValue(e2, "morphTargetInfluences", i2);
          }
          var r2 = {}, i2 = new Float32Array(8);
          return { update: t2 };
        }
        function se(e2, t2) {
          function r2(r3) {
            var i3 = t2.render.frame, o2 = r3.geometry, a2 = e2.get(r3, o2);
            return n2[a2.id] !== i3 && (o2.isGeometry && a2.updateFromObject(r3), e2.update(a2), n2[a2.id] = i3), a2;
          }
          function i2() {
            n2 = {};
          }
          var n2 = {};
          return { update: r2, dispose: i2 };
        }
        function ce(e2, t2, r2, i2, n2, o2, a2, s2, c2, u2) {
          e2 = void 0 !== e2 ? e2 : [], t2 = void 0 !== t2 ? t2 : _a, l.call(this, e2, t2, r2, i2, n2, o2, a2, s2, c2, u2), this.flipY = false;
        }
        function le() {
          this.seq = [], this.map = {};
        }
        function ue(e2, t2, r2) {
          var i2 = e2[0];
          if (i2 <= 0 || i2 > 0)
            return e2;
          var n2 = t2 * r2, o2 = Ks[n2];
          if (void 0 === o2 && (o2 = new Float32Array(n2), Ks[n2] = o2), 0 !== t2) {
            i2.toArray(o2, 0);
            for (var a2 = 1, s2 = 0; a2 !== t2; ++a2)
              s2 += r2, e2[a2].toArray(o2, s2);
          }
          return o2;
        }
        function he(e2, t2) {
          var r2 = Qs[t2];
          void 0 === r2 && (r2 = new Int32Array(t2), Qs[t2] = r2);
          for (var i2 = 0; i2 !== t2; ++i2)
            r2[i2] = e2.allocTextureUnit();
          return r2;
        }
        function de(e2, t2) {
          e2.uniform1f(this.addr, t2);
        }
        function pe(e2, t2) {
          e2.uniform1i(this.addr, t2);
        }
        function fe(e2, t2) {
          void 0 === t2.x ? e2.uniform2fv(this.addr, t2) : e2.uniform2f(this.addr, t2.x, t2.y);
        }
        function me(e2, t2) {
          void 0 !== t2.x ? e2.uniform3f(this.addr, t2.x, t2.y, t2.z) : void 0 !== t2.r ? e2.uniform3f(this.addr, t2.r, t2.g, t2.b) : e2.uniform3fv(this.addr, t2);
        }
        function ve(e2, t2) {
          void 0 === t2.x ? e2.uniform4fv(this.addr, t2) : e2.uniform4f(this.addr, t2.x, t2.y, t2.z, t2.w);
        }
        function ge(e2, t2) {
          e2.uniformMatrix2fv(this.addr, false, t2.elements || t2);
        }
        function ye(e2, t2) {
          void 0 === t2.elements ? e2.uniformMatrix3fv(this.addr, false, t2) : (ec.set(t2.elements), e2.uniformMatrix3fv(this.addr, false, ec));
        }
        function xe(e2, t2) {
          void 0 === t2.elements ? e2.uniformMatrix4fv(this.addr, false, t2) : ($s.set(t2.elements), e2.uniformMatrix4fv(this.addr, false, $s));
        }
        function _e(e2, t2, r2) {
          var i2 = r2.allocTextureUnit();
          e2.uniform1i(this.addr, i2), r2.setTexture2D(t2 || Zs, i2);
        }
        function be(e2, t2, r2) {
          var i2 = r2.allocTextureUnit();
          e2.uniform1i(this.addr, i2), r2.setTextureCube(t2 || Js, i2);
        }
        function we(e2, t2) {
          e2.uniform2iv(this.addr, t2);
        }
        function Me(e2, t2) {
          e2.uniform3iv(this.addr, t2);
        }
        function Ee(e2, t2) {
          e2.uniform4iv(this.addr, t2);
        }
        function Se(e2) {
          switch (e2) {
            case 5126:
              return de;
            case 35664:
              return fe;
            case 35665:
              return me;
            case 35666:
              return ve;
            case 35674:
              return ge;
            case 35675:
              return ye;
            case 35676:
              return xe;
            case 35678:
            case 36198:
              return _e;
            case 35680:
              return be;
            case 5124:
            case 35670:
              return pe;
            case 35667:
            case 35671:
              return we;
            case 35668:
            case 35672:
              return Me;
            case 35669:
            case 35673:
              return Ee;
          }
        }
        function Te(e2, t2) {
          e2.uniform1fv(this.addr, t2);
        }
        function Ae(e2, t2) {
          e2.uniform1iv(this.addr, t2);
        }
        function Le(e2, t2) {
          e2.uniform2fv(this.addr, ue(t2, this.size, 2));
        }
        function Ce(e2, t2) {
          e2.uniform3fv(this.addr, ue(t2, this.size, 3));
        }
        function Re(e2, t2) {
          e2.uniform4fv(this.addr, ue(t2, this.size, 4));
        }
        function Pe(e2, t2) {
          e2.uniformMatrix2fv(this.addr, false, ue(t2, this.size, 4));
        }
        function De(e2, t2) {
          e2.uniformMatrix3fv(this.addr, false, ue(t2, this.size, 9));
        }
        function Ue(e2, t2) {
          e2.uniformMatrix4fv(this.addr, false, ue(t2, this.size, 16));
        }
        function Ie(e2, t2, r2) {
          var i2 = t2.length, n2 = he(r2, i2);
          e2.uniform1iv(this.addr, n2);
          for (var o2 = 0; o2 !== i2; ++o2)
            r2.setTexture2D(t2[o2] || Zs, n2[o2]);
        }
        function Oe(e2, t2, r2) {
          var i2 = t2.length, n2 = he(r2, i2);
          e2.uniform1iv(this.addr, n2);
          for (var o2 = 0; o2 !== i2; ++o2)
            r2.setTextureCube(t2[o2] || Js, n2[o2]);
        }
        function Ne(e2) {
          switch (e2) {
            case 5126:
              return Te;
            case 35664:
              return Le;
            case 35665:
              return Ce;
            case 35666:
              return Re;
            case 35674:
              return Pe;
            case 35675:
              return De;
            case 35676:
              return Ue;
            case 35678:
              return Ie;
            case 35680:
              return Oe;
            case 5124:
            case 35670:
              return Ae;
            case 35667:
            case 35671:
              return we;
            case 35668:
            case 35672:
              return Me;
            case 35669:
            case 35673:
              return Ee;
          }
        }
        function Fe(e2, t2, r2) {
          this.id = e2, this.addr = r2, this.setValue = Se(t2.type);
        }
        function ze(e2, t2, r2) {
          this.id = e2, this.addr = r2, this.size = t2.size, this.setValue = Ne(t2.type);
        }
        function Be(e2) {
          this.id = e2, le.call(this);
        }
        function Ge(e2, t2) {
          e2.seq.push(t2), e2.map[t2.id] = t2;
        }
        function He(e2, t2, r2) {
          var i2 = e2.name, n2 = i2.length;
          for (tc.lastIndex = 0; ; ) {
            var o2 = tc.exec(i2), a2 = tc.lastIndex, s2 = o2[1], c2 = "]" === o2[2], l2 = o2[3];
            if (c2 && (s2 |= 0), void 0 === l2 || "[" === l2 && a2 + 2 === n2) {
              Ge(r2, void 0 === l2 ? new Fe(s2, e2, t2) : new ze(s2, e2, t2));
              break;
            }
            var u2 = r2.map, h2 = u2[s2];
            void 0 === h2 && (h2 = new Be(s2), Ge(r2, h2)), r2 = h2;
          }
        }
        function je(e2, t2, r2) {
          le.call(this), this.renderer = r2;
          for (var i2 = e2.getProgramParameter(t2, e2.ACTIVE_UNIFORMS), n2 = 0; n2 < i2; ++n2) {
            var o2 = e2.getActiveUniform(t2, n2);
            He(o2, e2.getUniformLocation(t2, o2.name), this);
          }
        }
        function Ve(e2) {
          for (var t2 = e2.split("\n"), r2 = 0; r2 < t2.length; r2++)
            t2[r2] = r2 + 1 + ": " + t2[r2];
          return t2.join("\n");
        }
        function ke(e2, t2, r2) {
          var i2 = e2.createShader(t2);
          return e2.shaderSource(i2, r2), e2.compileShader(i2), false === e2.getShaderParameter(i2, e2.COMPILE_STATUS) && console.error("THREE.WebGLShader: Shader couldn't compile."), "" !== e2.getShaderInfoLog(i2) && console.warn("THREE.WebGLShader: gl.getShaderInfoLog()", t2 === e2.VERTEX_SHADER ? "vertex" : "fragment", e2.getShaderInfoLog(i2), Ve(r2)), i2;
        }
        function We(e2) {
          switch (e2) {
            case Cs:
              return ["Linear", "( value )"];
            case Rs:
              return ["sRGB", "( value )"];
            case Ds:
              return ["RGBE", "( value )"];
            case Us:
              return ["RGBM", "( value, 7.0 )"];
            case Is:
              return ["RGBM", "( value, 16.0 )"];
            case Os:
              return ["RGBD", "( value, 256.0 )"];
            case Ps:
              return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            default:
              throw new Error("unsupported encoding: " + e2);
          }
        }
        function Xe(e2, t2) {
          var r2 = We(t2);
          return "vec4 " + e2 + "( vec4 value ) { return " + r2[0] + "ToLinear" + r2[1] + "; }";
        }
        function qe(e2, t2) {
          var r2 = We(t2);
          return "vec4 " + e2 + "( vec4 value ) { return LinearTo" + r2[0] + r2[1] + "; }";
        }
        function Ye(e2, t2) {
          var r2;
          switch (t2) {
            case va:
              r2 = "Linear";
              break;
            case ga:
              r2 = "Reinhard";
              break;
            case ya:
              r2 = "Uncharted2";
              break;
            case xa:
              r2 = "OptimizedCineon";
              break;
            default:
              throw new Error("unsupported toneMapping: " + t2);
          }
          return "vec3 " + e2 + "( vec3 color ) { return " + r2 + "ToneMapping( color ); }";
        }
        function Ze(e2, t2, r2) {
          return e2 = e2 || {}, [e2.derivatives || t2.envMapCubeUV || t2.bumpMap || t2.normalMap || t2.flatShading ? "#extension GL_OES_standard_derivatives : enable" : "", (e2.fragDepth || t2.logarithmicDepthBuffer) && r2.get("EXT_frag_depth") ? "#extension GL_EXT_frag_depth : enable" : "", e2.drawBuffers && r2.get("WEBGL_draw_buffers") ? "#extension GL_EXT_draw_buffers : require" : "", (e2.shaderTextureLOD || t2.envMap) && r2.get("EXT_shader_texture_lod") ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(Qe).join("\n");
        }
        function Je(e2) {
          var t2 = [];
          for (var r2 in e2) {
            var i2 = e2[r2];
            false !== i2 && t2.push("#define " + r2 + " " + i2);
          }
          return t2.join("\n");
        }
        function Ke(e2, t2) {
          for (var r2 = {}, i2 = e2.getProgramParameter(t2, e2.ACTIVE_ATTRIBUTES), n2 = 0; n2 < i2; n2++) {
            var o2 = e2.getActiveAttrib(t2, n2), a2 = o2.name;
            r2[a2] = e2.getAttribLocation(t2, a2);
          }
          return r2;
        }
        function Qe(e2) {
          return "" !== e2;
        }
        function $e(e2, t2) {
          return e2.replace(/NUM_DIR_LIGHTS/g, t2.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t2.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, t2.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t2.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t2.numHemiLights);
        }
        function et(e2, t2) {
          return e2.replace(/NUM_CLIPPING_PLANES/g, t2.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t2.numClippingPlanes - t2.numClipIntersection);
        }
        function tt(e2) {
          function t2(e3, t3) {
            var r3 = Gs[t3];
            if (void 0 === r3)
              throw new Error("Can not resolve #include <" + t3 + ">");
            return tt(r3);
          }
          var r2 = /^[ \t]*#include +<([\w\d.]+)>/gm;
          return e2.replace(r2, t2);
        }
        function rt(e2) {
          function t2(e3, t3, r3, i2) {
            for (var n2 = "", o2 = parseInt(t3); o2 < parseInt(r3); o2++)
              n2 += i2.replace(/\[ i \]/g, "[ " + o2 + " ]");
            return n2;
          }
          var r2 = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
          return e2.replace(r2, t2);
        }
        function it(e2, t2, r2, i2, n2, o2) {
          var a2 = e2.context, s2 = i2.defines, c2 = n2.vertexShader, l2 = n2.fragmentShader, u2 = "SHADOWMAP_TYPE_BASIC";
          o2.shadowMapType === Lo ? u2 = "SHADOWMAP_TYPE_PCF" : o2.shadowMapType === Co && (u2 = "SHADOWMAP_TYPE_PCF_SOFT");
          var h2 = "ENVMAP_TYPE_CUBE", d2 = "ENVMAP_MODE_REFLECTION", p2 = "ENVMAP_BLENDING_MULTIPLY";
          if (o2.envMap) {
            switch (i2.envMap.mapping) {
              case _a:
              case ba:
                h2 = "ENVMAP_TYPE_CUBE";
                break;
              case Sa:
              case Ta:
                h2 = "ENVMAP_TYPE_CUBE_UV";
                break;
              case wa:
              case Ma:
                h2 = "ENVMAP_TYPE_EQUIREC";
                break;
              case Ea:
                h2 = "ENVMAP_TYPE_SPHERE";
            }
            switch (i2.envMap.mapping) {
              case ba:
              case Ma:
                d2 = "ENVMAP_MODE_REFRACTION";
            }
            switch (i2.combine) {
              case da:
                p2 = "ENVMAP_BLENDING_MULTIPLY";
                break;
              case pa:
                p2 = "ENVMAP_BLENDING_MIX";
                break;
              case fa:
                p2 = "ENVMAP_BLENDING_ADD";
            }
          }
          var f2, m2, v2 = e2.gammaFactor > 0 ? e2.gammaFactor : 1, g2 = Ze(i2.extensions, o2, t2), y2 = Je(s2), x2 = a2.createProgram();
          i2.isRawShaderMaterial ? (f2 = [y2].filter(Qe).join("\n"), f2.length > 0 && (f2 += "\n"), m2 = [g2, y2].filter(Qe).join("\n"), m2.length > 0 && (m2 += "\n")) : (f2 = ["precision " + o2.precision + " float;", "precision " + o2.precision + " int;", "#define SHADER_NAME " + n2.name, y2, o2.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + v2, "#define MAX_BONES " + o2.maxBones, o2.useFog && o2.fog ? "#define USE_FOG" : "", o2.useFog && o2.fogExp ? "#define FOG_EXP2" : "", o2.map ? "#define USE_MAP" : "", o2.envMap ? "#define USE_ENVMAP" : "", o2.envMap ? "#define " + d2 : "", o2.lightMap ? "#define USE_LIGHTMAP" : "", o2.aoMap ? "#define USE_AOMAP" : "", o2.emissiveMap ? "#define USE_EMISSIVEMAP" : "", o2.bumpMap ? "#define USE_BUMPMAP" : "", o2.normalMap ? "#define USE_NORMALMAP" : "", o2.displacementMap && o2.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", o2.specularMap ? "#define USE_SPECULARMAP" : "", o2.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", o2.metalnessMap ? "#define USE_METALNESSMAP" : "", o2.alphaMap ? "#define USE_ALPHAMAP" : "", o2.vertexColors ? "#define USE_COLOR" : "", o2.flatShading ? "#define FLAT_SHADED" : "", o2.skinning ? "#define USE_SKINNING" : "", o2.useVertexTexture ? "#define BONE_TEXTURE" : "", o2.morphTargets ? "#define USE_MORPHTARGETS" : "", o2.morphNormals && false === o2.flatShading ? "#define USE_MORPHNORMALS" : "", o2.doubleSided ? "#define DOUBLE_SIDED" : "", o2.flipSided ? "#define FLIP_SIDED" : "", o2.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", o2.shadowMapEnabled ? "#define " + u2 : "", o2.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", o2.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", o2.logarithmicDepthBuffer && t2.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_COLOR", "	attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "	attribute vec3 morphTarget0;", "	attribute vec3 morphTarget1;", "	attribute vec3 morphTarget2;", "	attribute vec3 morphTarget3;", "	#ifdef USE_MORPHNORMALS", "		attribute vec3 morphNormal0;", "		attribute vec3 morphNormal1;", "		attribute vec3 morphNormal2;", "		attribute vec3 morphNormal3;", "	#else", "		attribute vec3 morphTarget4;", "		attribute vec3 morphTarget5;", "		attribute vec3 morphTarget6;", "		attribute vec3 morphTarget7;", "	#endif", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", "\n"].filter(Qe).join("\n"), m2 = [g2, "precision " + o2.precision + " float;", "precision " + o2.precision + " int;", "#define SHADER_NAME " + n2.name, y2, o2.alphaTest ? "#define ALPHATEST " + o2.alphaTest : "", "#define GAMMA_FACTOR " + v2, o2.useFog && o2.fog ? "#define USE_FOG" : "", o2.useFog && o2.fogExp ? "#define FOG_EXP2" : "", o2.map ? "#define USE_MAP" : "", o2.envMap ? "#define USE_ENVMAP" : "", o2.envMap ? "#define " + h2 : "", o2.envMap ? "#define " + d2 : "", o2.envMap ? "#define " + p2 : "", o2.lightMap ? "#define USE_LIGHTMAP" : "", o2.aoMap ? "#define USE_AOMAP" : "", o2.emissiveMap ? "#define USE_EMISSIVEMAP" : "", o2.bumpMap ? "#define USE_BUMPMAP" : "", o2.normalMap ? "#define USE_NORMALMAP" : "", o2.specularMap ? "#define USE_SPECULARMAP" : "", o2.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", o2.metalnessMap ? "#define USE_METALNESSMAP" : "", o2.alphaMap ? "#define USE_ALPHAMAP" : "", o2.vertexColors ? "#define USE_COLOR" : "", o2.gradientMap ? "#define USE_GRADIENTMAP" : "", o2.flatShading ? "#define FLAT_SHADED" : "", o2.doubleSided ? "#define DOUBLE_SIDED" : "", o2.flipSided ? "#define FLIP_SIDED" : "", o2.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", o2.shadowMapEnabled ? "#define " + u2 : "", o2.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", o2.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", o2.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", o2.logarithmicDepthBuffer && t2.get("EXT_frag_depth") ? "#define USE_LOGDEPTHBUF_EXT" : "", o2.envMap && t2.get("EXT_shader_texture_lod") ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", o2.toneMapping !== ma ? "#define TONE_MAPPING" : "", o2.toneMapping !== ma ? Gs.tonemapping_pars_fragment : "", o2.toneMapping !== ma ? Ye("toneMapping", o2.toneMapping) : "", o2.dithering ? "#define DITHERING" : "", o2.outputEncoding || o2.mapEncoding || o2.envMapEncoding || o2.emissiveMapEncoding ? Gs.encodings_pars_fragment : "", o2.mapEncoding ? Xe("mapTexelToLinear", o2.mapEncoding) : "", o2.envMapEncoding ? Xe("envMapTexelToLinear", o2.envMapEncoding) : "", o2.emissiveMapEncoding ? Xe("emissiveMapTexelToLinear", o2.emissiveMapEncoding) : "", o2.outputEncoding ? qe("linearToOutputTexel", o2.outputEncoding) : "", o2.depthPacking ? "#define DEPTH_PACKING " + i2.depthPacking : "", "\n"].filter(Qe).join("\n")), c2 = tt(c2), c2 = $e(c2, o2), c2 = et(c2, o2), l2 = tt(l2), l2 = $e(l2, o2), l2 = et(l2, o2), c2 = rt(c2), l2 = rt(l2);
          var _2 = f2 + c2, b2 = m2 + l2, w2 = ke(a2, a2.VERTEX_SHADER, _2), M2 = ke(a2, a2.FRAGMENT_SHADER, b2);
          a2.attachShader(x2, w2), a2.attachShader(x2, M2), void 0 !== i2.index0AttributeName ? a2.bindAttribLocation(x2, 0, i2.index0AttributeName) : true === o2.morphTargets && a2.bindAttribLocation(x2, 0, "position"), a2.linkProgram(x2);
          var E2 = a2.getProgramInfoLog(x2).trim(), S2 = a2.getShaderInfoLog(w2).trim(), T2 = a2.getShaderInfoLog(M2).trim(), A2 = true, L2 = true;
          false === a2.getProgramParameter(x2, a2.LINK_STATUS) ? (A2 = false, console.error("THREE.WebGLProgram: shader error: ", a2.getError(), "gl.VALIDATE_STATUS", a2.getProgramParameter(x2, a2.VALIDATE_STATUS), "gl.getProgramInfoLog", E2, S2, T2)) : "" !== E2 ? console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()", E2) : "" !== S2 && "" !== T2 || (L2 = false), L2 && (this.diagnostics = { runnable: A2, material: i2, programLog: E2, vertexShader: { log: S2, prefix: f2 }, fragmentShader: { log: T2, prefix: m2 } }), a2.deleteShader(w2), a2.deleteShader(M2);
          var C2;
          this.getUniforms = function() {
            return void 0 === C2 && (C2 = new je(a2, x2, e2)), C2;
          };
          var R2;
          return this.getAttributes = function() {
            return void 0 === R2 && (R2 = Ke(a2, x2)), R2;
          }, this.destroy = function() {
            a2.deleteProgram(x2), this.program = void 0;
          }, Object.defineProperties(this, { uniforms: { get: function() {
            return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."), this.getUniforms();
          } }, attributes: { get: function() {
            return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."), this.getAttributes();
          } } }), this.name = n2.name, this.id = rc++, this.code = r2, this.usedTimes = 1, this.program = x2, this.vertexShader = w2, this.fragmentShader = M2, this;
        }
        function nt(e2, t2, r2) {
          function i2(e3) {
            var t3 = e3.skeleton, i3 = t3.bones;
            if (r2.floatVertexTextures)
              return 1024;
            var n3 = r2.maxVertexUniforms, o3 = Math.floor((n3 - 20) / 4), a3 = Math.min(o3, i3.length);
            return a3 < i3.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + i3.length + " bones. This GPU supports " + a3 + "."), 0) : a3;
          }
          function n2(e3, t3) {
            var r3;
            return e3 ? e3.isTexture ? r3 = e3.encoding : e3.isWebGLRenderTarget && (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), r3 = e3.texture.encoding) : r3 = Cs, r3 === Cs && t3 && (r3 = Ps), r3;
          }
          var o2 = [], a2 = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "phong", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow" }, s2 = ["precision", "supportsVertexTextures", "map", "mapEncoding", "envMap", "envMapMode", "envMapEncoding", "lightMap", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "displacementMap", "specularMap", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "maxMorphTargets", "maxMorphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering"];
          this.getParameters = function(t3, o3, s3, c2, l2, u2, h2) {
            var d2 = a2[t3.type], p2 = h2.isSkinnedMesh ? i2(h2) : 0, f2 = r2.precision;
            null !== t3.precision && (f2 = r2.getMaxPrecision(t3.precision)) !== t3.precision && console.warn("THREE.WebGLProgram.getParameters:", t3.precision, "not supported, using", f2, "instead.");
            var m2 = e2.getRenderTarget();
            return { shaderID: d2, precision: f2, supportsVertexTextures: r2.vertexTextures, outputEncoding: n2(m2 ? m2.texture : null, e2.gammaOutput), map: !!t3.map, mapEncoding: n2(t3.map, e2.gammaInput), envMap: !!t3.envMap, envMapMode: t3.envMap && t3.envMap.mapping, envMapEncoding: n2(t3.envMap, e2.gammaInput), envMapCubeUV: !!t3.envMap && (t3.envMap.mapping === Sa || t3.envMap.mapping === Ta), lightMap: !!t3.lightMap, aoMap: !!t3.aoMap, emissiveMap: !!t3.emissiveMap, emissiveMapEncoding: n2(t3.emissiveMap, e2.gammaInput), bumpMap: !!t3.bumpMap, normalMap: !!t3.normalMap, displacementMap: !!t3.displacementMap, roughnessMap: !!t3.roughnessMap, metalnessMap: !!t3.metalnessMap, specularMap: !!t3.specularMap, alphaMap: !!t3.alphaMap, gradientMap: !!t3.gradientMap, combine: t3.combine, vertexColors: t3.vertexColors, fog: !!c2, useFog: t3.fog, fogExp: c2 && c2.isFogExp2, flatShading: t3.flatShading, sizeAttenuation: t3.sizeAttenuation, logarithmicDepthBuffer: r2.logarithmicDepthBuffer, skinning: t3.skinning && p2 > 0, maxBones: p2, useVertexTexture: r2.floatVertexTextures, morphTargets: t3.morphTargets, morphNormals: t3.morphNormals, maxMorphTargets: e2.maxMorphTargets, maxMorphNormals: e2.maxMorphNormals, numDirLights: o3.directional.length, numPointLights: o3.point.length, numSpotLights: o3.spot.length, numRectAreaLights: o3.rectArea.length, numHemiLights: o3.hemi.length, numClippingPlanes: l2, numClipIntersection: u2, dithering: t3.dithering, shadowMapEnabled: e2.shadowMap.enabled && h2.receiveShadow && s3.length > 0, shadowMapType: e2.shadowMap.type, toneMapping: e2.toneMapping, physicallyCorrectLights: e2.physicallyCorrectLights, premultipliedAlpha: t3.premultipliedAlpha, alphaTest: t3.alphaTest, doubleSided: t3.side === Do, flipSided: t3.side === Po, depthPacking: void 0 !== t3.depthPacking && t3.depthPacking };
          }, this.getProgramCode = function(t3, r3) {
            var i3 = [];
            if (r3.shaderID ? i3.push(r3.shaderID) : (i3.push(t3.fragmentShader), i3.push(t3.vertexShader)), void 0 !== t3.defines)
              for (var n3 in t3.defines)
                i3.push(n3), i3.push(t3.defines[n3]);
            for (var o3 = 0; o3 < s2.length; o3++)
              i3.push(r3[s2[o3]]);
            return i3.push(t3.onBeforeCompile.toString()), i3.push(e2.gammaOutput), i3.join();
          }, this.acquireProgram = function(r3, i3, n3, a3) {
            for (var s3, c2 = 0, l2 = o2.length; c2 < l2; c2++) {
              var u2 = o2[c2];
              if (u2.code === a3) {
                s3 = u2, ++s3.usedTimes;
                break;
              }
            }
            return void 0 === s3 && (s3 = new it(e2, t2, a3, r3, i3, n3), o2.push(s3)), s3;
          }, this.releaseProgram = function(e3) {
            if (0 == --e3.usedTimes) {
              var t3 = o2.indexOf(e3);
              o2[t3] = o2[o2.length - 1], o2.pop(), e3.destroy();
            }
          }, this.programs = o2;
        }
        function ot() {
          function e2(e3) {
            var t3 = n2.get(e3);
            return void 0 === t3 && (t3 = {}, n2.set(e3, t3)), t3;
          }
          function t2(e3) {
            n2.delete(e3);
          }
          function r2(e3, t3, r3) {
            n2.get(e3)[t3] = r3;
          }
          function i2() {
            n2 = /* @__PURE__ */ new WeakMap();
          }
          var n2 = /* @__PURE__ */ new WeakMap();
          return { get: e2, remove: t2, update: r2, dispose: i2 };
        }
        function at(e2, t2) {
          return e2.renderOrder !== t2.renderOrder ? e2.renderOrder - t2.renderOrder : e2.program && t2.program && e2.program !== t2.program ? e2.program.id - t2.program.id : e2.material.id !== t2.material.id ? e2.material.id - t2.material.id : e2.z !== t2.z ? e2.z - t2.z : e2.id - t2.id;
        }
        function st(e2, t2) {
          return e2.renderOrder !== t2.renderOrder ? e2.renderOrder - t2.renderOrder : e2.z !== t2.z ? t2.z - e2.z : e2.id - t2.id;
        }
        function ct() {
          function e2() {
            n2 = 0, o2.length = 0, a2.length = 0;
          }
          function t2(e3, t3, r3, s2, c2) {
            var l2 = i2[n2];
            void 0 === l2 ? (l2 = { id: e3.id, object: e3, geometry: t3, material: r3, program: r3.program, renderOrder: e3.renderOrder, z: s2, group: c2 }, i2[n2] = l2) : (l2.id = e3.id, l2.object = e3, l2.geometry = t3, l2.material = r3, l2.program = r3.program, l2.renderOrder = e3.renderOrder, l2.z = s2, l2.group = c2), (true === r3.transparent ? a2 : o2).push(l2), n2++;
          }
          function r2() {
            o2.length > 1 && o2.sort(at), a2.length > 1 && a2.sort(st);
          }
          var i2 = [], n2 = 0, o2 = [], a2 = [];
          return { opaque: o2, transparent: a2, init: e2, push: t2, sort: r2 };
        }
        function lt() {
          function e2(e3, t3) {
            var i2 = e3.id + "," + t3.id, n2 = r2[i2];
            return void 0 === n2 && (n2 = new ct(), r2[i2] = n2), n2;
          }
          function t2() {
            r2 = {};
          }
          var r2 = {};
          return { get: e2, dispose: t2 };
        }
        function ut() {
          var e2 = {};
          return { get: function(t2) {
            if (void 0 !== e2[t2.id])
              return e2[t2.id];
            var r2;
            switch (t2.type) {
              case "DirectionalLight":
                r2 = { direction: new s(), color: new y(), shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new n() };
                break;
              case "SpotLight":
                r2 = { position: new s(), direction: new s(), color: new y(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new n() };
                break;
              case "PointLight":
                r2 = { position: new s(), color: new y(), distance: 0, decay: 0, shadow: false, shadowBias: 0, shadowRadius: 1, shadowMapSize: new n(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
                break;
              case "HemisphereLight":
                r2 = { direction: new s(), skyColor: new y(), groundColor: new y() };
                break;
              case "RectAreaLight":
                r2 = { color: new y(), position: new s(), halfWidth: new s(), halfHeight: new s() };
            }
            return e2[t2.id] = r2, r2;
          } };
        }
        function ht() {
          function e2(e3, o2, s2) {
            for (var c2 = 0, l2 = 0, u2 = 0, h2 = 0, d2 = 0, p2 = 0, f2 = 0, m2 = 0, v2 = s2.matrixWorldInverse, g2 = 0, y2 = e3.length; g2 < y2; g2++) {
              var x2 = e3[g2], _2 = x2.color, b2 = x2.intensity, w2 = x2.distance, M2 = x2.shadow && x2.shadow.map ? x2.shadow.map.texture : null;
              if (x2.isAmbientLight)
                c2 += _2.r * b2, l2 += _2.g * b2, u2 += _2.b * b2;
              else if (x2.isDirectionalLight) {
                var E2 = t2.get(x2);
                if (E2.color.copy(x2.color).multiplyScalar(x2.intensity), E2.direction.setFromMatrixPosition(x2.matrixWorld), i2.setFromMatrixPosition(x2.target.matrixWorld), E2.direction.sub(i2), E2.direction.transformDirection(v2), E2.shadow = x2.castShadow, x2.castShadow) {
                  var S2 = x2.shadow;
                  E2.shadowBias = S2.bias, E2.shadowRadius = S2.radius, E2.shadowMapSize = S2.mapSize;
                }
                r2.directionalShadowMap[h2] = M2, r2.directionalShadowMatrix[h2] = x2.shadow.matrix, r2.directional[h2] = E2, h2++;
              } else if (x2.isSpotLight) {
                var E2 = t2.get(x2);
                if (E2.position.setFromMatrixPosition(x2.matrixWorld), E2.position.applyMatrix4(v2), E2.color.copy(_2).multiplyScalar(b2), E2.distance = w2, E2.direction.setFromMatrixPosition(x2.matrixWorld), i2.setFromMatrixPosition(x2.target.matrixWorld), E2.direction.sub(i2), E2.direction.transformDirection(v2), E2.coneCos = Math.cos(x2.angle), E2.penumbraCos = Math.cos(x2.angle * (1 - x2.penumbra)), E2.decay = 0 === x2.distance ? 0 : x2.decay, E2.shadow = x2.castShadow, x2.castShadow) {
                  var S2 = x2.shadow;
                  E2.shadowBias = S2.bias, E2.shadowRadius = S2.radius, E2.shadowMapSize = S2.mapSize;
                }
                r2.spotShadowMap[p2] = M2, r2.spotShadowMatrix[p2] = x2.shadow.matrix, r2.spot[p2] = E2, p2++;
              } else if (x2.isRectAreaLight) {
                var E2 = t2.get(x2);
                E2.color.copy(_2).multiplyScalar(b2), E2.position.setFromMatrixPosition(x2.matrixWorld), E2.position.applyMatrix4(v2), a2.identity(), n2.copy(x2.matrixWorld), n2.premultiply(v2), a2.extractRotation(n2), E2.halfWidth.set(0.5 * x2.width, 0, 0), E2.halfHeight.set(0, 0.5 * x2.height, 0), E2.halfWidth.applyMatrix4(a2), E2.halfHeight.applyMatrix4(a2), r2.rectArea[f2] = E2, f2++;
              } else if (x2.isPointLight) {
                var E2 = t2.get(x2);
                if (E2.position.setFromMatrixPosition(x2.matrixWorld), E2.position.applyMatrix4(v2), E2.color.copy(x2.color).multiplyScalar(x2.intensity), E2.distance = x2.distance, E2.decay = 0 === x2.distance ? 0 : x2.decay, E2.shadow = x2.castShadow, x2.castShadow) {
                  var S2 = x2.shadow;
                  E2.shadowBias = S2.bias, E2.shadowRadius = S2.radius, E2.shadowMapSize = S2.mapSize, E2.shadowCameraNear = S2.camera.near, E2.shadowCameraFar = S2.camera.far;
                }
                r2.pointShadowMap[d2] = M2, r2.pointShadowMatrix[d2] = x2.shadow.matrix, r2.point[d2] = E2, d2++;
              } else if (x2.isHemisphereLight) {
                var E2 = t2.get(x2);
                E2.direction.setFromMatrixPosition(x2.matrixWorld), E2.direction.transformDirection(v2), E2.direction.normalize(), E2.skyColor.copy(x2.color).multiplyScalar(b2), E2.groundColor.copy(x2.groundColor).multiplyScalar(b2), r2.hemi[m2] = E2, m2++;
              }
            }
            r2.ambient[0] = c2, r2.ambient[1] = l2, r2.ambient[2] = u2, r2.directional.length = h2, r2.spot.length = p2, r2.rectArea.length = f2, r2.point.length = d2, r2.hemi.length = m2, r2.hash = r2.id + "," + h2 + "," + d2 + "," + p2 + "," + f2 + "," + m2 + "," + o2.length;
          }
          var t2 = new ut(), r2 = { id: ic++, hash: "", ambient: [0, 0, 0], directional: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadowMap: [], spotShadowMatrix: [], rectArea: [], point: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [] }, i2 = new s(), n2 = new o(), a2 = new o();
          return { setup: e2, state: r2 };
        }
        function dt() {
          function e2() {
            a2.length = 0, s2.length = 0, c2.length = 0;
          }
          function t2(e3) {
            a2.push(e3);
          }
          function r2(e3) {
            s2.push(e3);
          }
          function i2(e3) {
            c2.push(e3);
          }
          function n2(e3) {
            o2.setup(a2, s2, e3);
          }
          var o2 = new ht(), a2 = [], s2 = [], c2 = [];
          return { init: e2, state: { lightsArray: a2, shadowsArray: s2, spritesArray: c2, lights: o2 }, setupLights: n2, pushLight: t2, pushShadow: r2, pushSprite: i2 };
        }
        function pt() {
          function e2(e3, t3) {
            var i2 = e3.id + "," + t3.id, n2 = r2[i2];
            return void 0 === n2 && (n2 = new dt(), r2[i2] = n2), n2;
          }
          function t2() {
            r2 = {};
          }
          var r2 = {};
          return { get: e2, dispose: t2 };
        }
        function ft(e2) {
          k.call(this), this.type = "MeshDepthMaterial", this.depthPacking = Ns, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.setValues(e2);
        }
        function mt(e2) {
          k.call(this), this.type = "MeshDistanceMaterial", this.referencePosition = new s(), this.nearDistance = 1, this.farDistance = 1e3, this.skinning = false, this.morphTargets = false, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = false, this.lights = false, this.setValues(e2);
        }
        function vt(e2, t2, r2) {
          function i2(t3, r3, i3, n2, o2, a3) {
            var s2 = t3.geometry, c3 = null, l3 = _2, u2 = t3.customDepthMaterial;
            if (i3 && (l3 = b2, u2 = t3.customDistanceMaterial), u2)
              c3 = u2;
            else {
              var h2 = false;
              r3.morphTargets && (s2 && s2.isBufferGeometry ? h2 = s2.morphAttributes && s2.morphAttributes.position && s2.morphAttributes.position.length > 0 : s2 && s2.isGeometry && (h2 = s2.morphTargets && s2.morphTargets.length > 0)), t3.isSkinnedMesh && false === r3.skinning && console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:", t3);
              var d3 = t3.isSkinnedMesh && r3.skinning, p3 = 0;
              h2 && (p3 |= v2), d3 && (p3 |= y2), c3 = l3[p3];
            }
            if (e2.localClippingEnabled && true === r3.clipShadows && 0 !== r3.clippingPlanes.length) {
              var f3 = c3.uuid, m3 = r3.uuid, g2 = w2[f3];
              void 0 === g2 && (g2 = {}, w2[f3] = g2);
              var x3 = g2[m3];
              void 0 === x3 && (x3 = c3.clone(), g2[m3] = x3), c3 = x3;
            }
            return c3.visible = r3.visible, c3.wireframe = r3.wireframe, c3.side = null != r3.shadowSide ? r3.shadowSide : M2[r3.side], c3.clipShadows = r3.clipShadows, c3.clippingPlanes = r3.clippingPlanes, c3.clipIntersection = r3.clipIntersection, c3.wireframeLinewidth = r3.wireframeLinewidth, c3.linewidth = r3.linewidth, i3 && c3.isMeshDistanceMaterial && (c3.referencePosition.copy(n2), c3.nearDistance = o2, c3.farDistance = a3), c3;
          }
          function a2(r3, n2, o2, s2) {
            if (false !== r3.visible) {
              if (r3.layers.test(n2.layers) && (r3.isMesh || r3.isLine || r3.isPoints) && r3.castShadow && (!r3.frustumCulled || c2.intersectsObject(r3))) {
                r3.modelViewMatrix.multiplyMatrices(o2.matrixWorldInverse, r3.matrixWorld);
                var l3 = t2.update(r3), u2 = r3.material;
                if (Array.isArray(u2))
                  for (var h2 = l3.groups, d3 = 0, p3 = h2.length; d3 < p3; d3++) {
                    var f3 = h2[d3], v3 = u2[f3.materialIndex];
                    if (v3 && v3.visible) {
                      var g2 = i2(r3, v3, s2, m2, o2.near, o2.far);
                      e2.renderBufferDirect(o2, null, l3, g2, r3, f3);
                    }
                  }
                else if (u2.visible) {
                  var g2 = i2(r3, u2, s2, m2, o2.near, o2.far);
                  e2.renderBufferDirect(o2, null, l3, g2, r3, null);
                }
              }
              for (var y3 = r3.children, x3 = 0, _3 = y3.length; x3 < _3; x3++)
                a2(y3[x3], n2, o2, s2);
            }
          }
          for (var c2 = new g(), l2 = new o(), d2 = new n(), p2 = new n(r2, r2), f2 = new s(), m2 = new s(), v2 = 1, y2 = 2, x2 = 1 + (v2 | y2), _2 = new Array(x2), b2 = new Array(x2), w2 = {}, M2 = { 0: Po, 1: Ro, 2: Do }, E2 = [new s(1, 0, 0), new s(-1, 0, 0), new s(0, 0, 1), new s(0, 0, -1), new s(0, 1, 0), new s(0, -1, 0)], S2 = [new s(0, 1, 0), new s(0, 1, 0), new s(0, 1, 0), new s(0, 1, 0), new s(0, 0, 1), new s(0, 0, -1)], T2 = [new u(), new u(), new u(), new u(), new u(), new u()], A2 = 0; A2 !== x2; ++A2) {
            var L2 = 0 != (A2 & v2), C2 = 0 != (A2 & y2), R2 = new ft({ depthPacking: Fs, morphTargets: L2, skinning: C2 });
            _2[A2] = R2;
            var P2 = new mt({ morphTargets: L2, skinning: C2 });
            b2[A2] = P2;
          }
          var D2 = this;
          this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = Lo, this.render = function(t3, r3, i3) {
            if (false !== D2.enabled && (false !== D2.autoUpdate || false !== D2.needsUpdate) && 0 !== t3.length) {
              var n2 = e2.context, o2 = e2.state;
              o2.disable(n2.BLEND), o2.buffers.color.setClear(1, 1, 1, 1), o2.buffers.depth.setTest(true), o2.setScissorTest(false);
              for (var s2, u2 = 0, v3 = t3.length; u2 < v3; u2++) {
                var g2 = t3[u2], y3 = g2.shadow, x3 = g2 && g2.isPointLight;
                if (void 0 !== y3) {
                  var _3 = y3.camera;
                  if (d2.copy(y3.mapSize), d2.min(p2), x3) {
                    var b3 = d2.x, w3 = d2.y;
                    T2[0].set(2 * b3, w3, b3, w3), T2[1].set(0, w3, b3, w3), T2[2].set(3 * b3, w3, b3, w3), T2[3].set(b3, w3, b3, w3), T2[4].set(3 * b3, 0, b3, w3), T2[5].set(b3, 0, b3, w3), d2.x *= 4, d2.y *= 2;
                  }
                  if (null === y3.map) {
                    var M3 = { minFilter: Ra, magFilter: Ra, format: Ja };
                    y3.map = new h(d2.x, d2.y, M3), y3.map.texture.name = g2.name + ".shadowMap", _3.updateProjectionMatrix();
                  }
                  y3.isSpotLightShadow && y3.update(g2);
                  var A3 = y3.map, L3 = y3.matrix;
                  m2.setFromMatrixPosition(g2.matrixWorld), _3.position.copy(m2), x3 ? (s2 = 6, L3.makeTranslation(-m2.x, -m2.y, -m2.z)) : (s2 = 1, f2.setFromMatrixPosition(g2.target.matrixWorld), _3.lookAt(f2), _3.updateMatrixWorld(), L3.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), L3.multiply(_3.projectionMatrix), L3.multiply(_3.matrixWorldInverse)), e2.setRenderTarget(A3), e2.clear();
                  for (var C3 = 0; C3 < s2; C3++) {
                    if (x3) {
                      f2.copy(_3.position), f2.add(E2[C3]), _3.up.copy(S2[C3]), _3.lookAt(f2), _3.updateMatrixWorld();
                      var R3 = T2[C3];
                      o2.viewport(R3);
                    }
                    l2.multiplyMatrices(_3.projectionMatrix, _3.matrixWorldInverse), c2.setFromMatrix(l2), a2(r3, i3, _3, x3);
                  }
                } else
                  console.warn("THREE.WebGLShadowMap:", g2, "has no shadow.");
              }
              D2.needsUpdate = false;
            }
          };
        }
        function gt(e2, t2, r2, i2, n2, o2, a2, s2, c2) {
          l.call(this, e2, t2, r2, i2, n2, o2, a2, s2, c2), this.needsUpdate = true;
        }
        function yt(e2, t2, r2, i2, n2) {
          function o2() {
            var e3 = new Float32Array([-0.5, -0.5, 0, 0, 0.5, -0.5, 1, 0, 0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1]), r3 = new Uint16Array([0, 1, 2, 0, 2, 3]);
            u2 = t2.createBuffer(), h2 = t2.createBuffer(), t2.bindBuffer(t2.ARRAY_BUFFER, u2), t2.bufferData(t2.ARRAY_BUFFER, e3, t2.STATIC_DRAW), t2.bindBuffer(t2.ELEMENT_ARRAY_BUFFER, h2), t2.bufferData(t2.ELEMENT_ARRAY_BUFFER, r3, t2.STATIC_DRAW), d2 = c2(), p2 = { position: t2.getAttribLocation(d2, "position"), uv: t2.getAttribLocation(d2, "uv") }, f2 = { uvOffset: t2.getUniformLocation(d2, "uvOffset"), uvScale: t2.getUniformLocation(d2, "uvScale"), rotation: t2.getUniformLocation(d2, "rotation"), center: t2.getUniformLocation(d2, "center"), scale: t2.getUniformLocation(d2, "scale"), color: t2.getUniformLocation(d2, "color"), map: t2.getUniformLocation(d2, "map"), opacity: t2.getUniformLocation(d2, "opacity"), modelViewMatrix: t2.getUniformLocation(d2, "modelViewMatrix"), projectionMatrix: t2.getUniformLocation(d2, "projectionMatrix"), fogType: t2.getUniformLocation(d2, "fogType"), fogDensity: t2.getUniformLocation(d2, "fogDensity"), fogNear: t2.getUniformLocation(d2, "fogNear"), fogFar: t2.getUniformLocation(d2, "fogFar"), fogColor: t2.getUniformLocation(d2, "fogColor"), fogDepth: t2.getUniformLocation(d2, "fogDepth"), alphaTest: t2.getUniformLocation(d2, "alphaTest") };
            var i3 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
            i3.width = 8, i3.height = 8;
            var n3 = i3.getContext("2d");
            n3.fillStyle = "white", n3.fillRect(0, 0, 8, 8), m2 = new gt(i3);
          }
          function c2() {
            var e3 = t2.createProgram(), r3 = t2.createShader(t2.VERTEX_SHADER), i3 = t2.createShader(t2.FRAGMENT_SHADER);
            return t2.shaderSource(r3, ["precision " + n2.precision + " float;", "#define SHADER_NAME SpriteMaterial", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform float rotation;", "uniform vec2 center;", "uniform vec2 scale;", "uniform vec2 uvOffset;", "uniform vec2 uvScale;", "attribute vec2 position;", "attribute vec2 uv;", "varying vec2 vUV;", "varying float fogDepth;", "void main() {", "	vUV = uvOffset + uv * uvScale;", "	vec2 alignedPosition = ( position - center ) * scale;", "	vec2 rotatedPosition;", "	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;", "	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;", "	vec4 mvPosition;", "	mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );", "	mvPosition.xy += rotatedPosition;", "	gl_Position = projectionMatrix * mvPosition;", "	fogDepth = - mvPosition.z;", "}"].join("\n")), t2.shaderSource(i3, ["precision " + n2.precision + " float;", "#define SHADER_NAME SpriteMaterial", "uniform vec3 color;", "uniform sampler2D map;", "uniform float opacity;", "uniform int fogType;", "uniform vec3 fogColor;", "uniform float fogDensity;", "uniform float fogNear;", "uniform float fogFar;", "uniform float alphaTest;", "varying vec2 vUV;", "varying float fogDepth;", "void main() {", "	vec4 texture = texture2D( map, vUV );", "	gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );", "	if ( gl_FragColor.a < alphaTest ) discard;", "	if ( fogType > 0 ) {", "		float fogFactor = 0.0;", "		if ( fogType == 1 ) {", "			fogFactor = smoothstep( fogNear, fogFar, fogDepth );", "		} else {", "			const float LOG2 = 1.442695;", "			fogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );", "			fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );", "		}", "		gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );", "	}", "}"].join("\n")), t2.compileShader(r3), t2.compileShader(i3), t2.attachShader(e3, r3), t2.attachShader(e3, i3), t2.linkProgram(e3), e3;
          }
          function l2(e3, t3) {
            return e3.renderOrder !== t3.renderOrder ? e3.renderOrder - t3.renderOrder : e3.z !== t3.z ? t3.z - e3.z : t3.id - e3.id;
          }
          var u2, h2, d2, p2, f2, m2, v2 = new s(), g2 = new a(), y2 = new s();
          this.render = function(n3, a2, s2) {
            if (0 !== n3.length) {
              void 0 === d2 && o2(), r2.useProgram(d2), r2.initAttributes(), r2.enableAttribute(p2.position), r2.enableAttribute(p2.uv), r2.disableUnusedAttributes(), r2.disable(t2.CULL_FACE), r2.enable(t2.BLEND), t2.bindBuffer(t2.ARRAY_BUFFER, u2), t2.vertexAttribPointer(p2.position, 2, t2.FLOAT, false, 16, 0), t2.vertexAttribPointer(p2.uv, 2, t2.FLOAT, false, 16, 8), t2.bindBuffer(t2.ELEMENT_ARRAY_BUFFER, h2), t2.uniformMatrix4fv(f2.projectionMatrix, false, s2.projectionMatrix.elements), r2.activeTexture(t2.TEXTURE0), t2.uniform1i(f2.map, 0);
              var c3 = 0, x2 = 0, _2 = a2.fog;
              _2 ? (t2.uniform3f(f2.fogColor, _2.color.r, _2.color.g, _2.color.b), _2.isFog ? (t2.uniform1f(f2.fogNear, _2.near), t2.uniform1f(f2.fogFar, _2.far), t2.uniform1i(f2.fogType, 1), c3 = 1, x2 = 1) : _2.isFogExp2 && (t2.uniform1f(f2.fogDensity, _2.density), t2.uniform1i(f2.fogType, 2), c3 = 2, x2 = 2)) : (t2.uniform1i(f2.fogType, 0), c3 = 0, x2 = 0);
              for (var b2 = 0, w2 = n3.length; b2 < w2; b2++) {
                var M2 = n3[b2];
                M2.modelViewMatrix.multiplyMatrices(s2.matrixWorldInverse, M2.matrixWorld), M2.z = -M2.modelViewMatrix.elements[14];
              }
              n3.sort(l2);
              for (var E2 = [], S2 = [], b2 = 0, w2 = n3.length; b2 < w2; b2++) {
                var M2 = n3[b2], T2 = M2.material;
                if (false !== T2.visible) {
                  M2.onBeforeRender(e2, a2, s2, void 0, T2, void 0), t2.uniform1f(f2.alphaTest, T2.alphaTest), t2.uniformMatrix4fv(f2.modelViewMatrix, false, M2.modelViewMatrix.elements), M2.matrixWorld.decompose(v2, g2, y2), E2[0] = y2.x, E2[1] = y2.y, S2[0] = M2.center.x - 0.5, S2[1] = M2.center.y - 0.5;
                  var A2 = 0;
                  a2.fog && T2.fog && (A2 = x2), c3 !== A2 && (t2.uniform1i(f2.fogType, A2), c3 = A2), null !== T2.map ? (t2.uniform2f(f2.uvOffset, T2.map.offset.x, T2.map.offset.y), t2.uniform2f(f2.uvScale, T2.map.repeat.x, T2.map.repeat.y)) : (t2.uniform2f(f2.uvOffset, 0, 0), t2.uniform2f(f2.uvScale, 1, 1)), t2.uniform1f(f2.opacity, T2.opacity), t2.uniform3f(f2.color, T2.color.r, T2.color.g, T2.color.b), t2.uniform1f(f2.rotation, T2.rotation), t2.uniform2fv(f2.center, S2), t2.uniform2fv(f2.scale, E2), r2.setBlending(T2.blending, T2.blendEquation, T2.blendSrc, T2.blendDst, T2.blendEquationAlpha, T2.blendSrcAlpha, T2.blendDstAlpha, T2.premultipliedAlpha), r2.buffers.depth.setTest(T2.depthTest), r2.buffers.depth.setMask(T2.depthWrite), r2.buffers.color.setMask(T2.colorWrite), i2.setTexture2D(T2.map || m2, 0), t2.drawElements(t2.TRIANGLES, 6, t2.UNSIGNED_SHORT, 0), M2.onAfterRender(e2, a2, s2, void 0, T2, void 0);
                }
              }
              r2.enable(t2.CULL_FACE), r2.reset();
            }
          };
        }
        function xt(e2, t2, r2) {
          function i2() {
            var t3 = false, r3 = new u(), i3 = null, n3 = new u(0, 0, 0, 0);
            return { setMask: function(r4) {
              i3 === r4 || t3 || (e2.colorMask(r4, r4, r4, r4), i3 = r4);
            }, setLocked: function(e3) {
              t3 = e3;
            }, setClear: function(t4, i4, o3, a3, s3) {
              true === s3 && (t4 *= a3, i4 *= a3, o3 *= a3), r3.set(t4, i4, o3, a3), false === n3.equals(r3) && (e2.clearColor(t4, i4, o3, a3), n3.copy(r3));
            }, reset: function() {
              t3 = false, i3 = null, n3.set(-1, 0, 0, 0);
            } };
          }
          function n2() {
            var t3 = false, r3 = null, i3 = null, n3 = null;
            return { setTest: function(t4) {
              t4 ? d2(e2.DEPTH_TEST) : p2(e2.DEPTH_TEST);
            }, setMask: function(i4) {
              r3 === i4 || t3 || (e2.depthMask(i4), r3 = i4);
            }, setFunc: function(t4) {
              if (i3 !== t4) {
                if (t4)
                  switch (t4) {
                    case na:
                      e2.depthFunc(e2.NEVER);
                      break;
                    case oa:
                      e2.depthFunc(e2.ALWAYS);
                      break;
                    case aa:
                      e2.depthFunc(e2.LESS);
                      break;
                    case sa:
                      e2.depthFunc(e2.LEQUAL);
                      break;
                    case ca:
                      e2.depthFunc(e2.EQUAL);
                      break;
                    case la:
                      e2.depthFunc(e2.GEQUAL);
                      break;
                    case ua:
                      e2.depthFunc(e2.GREATER);
                      break;
                    case ha:
                      e2.depthFunc(e2.NOTEQUAL);
                      break;
                    default:
                      e2.depthFunc(e2.LEQUAL);
                  }
                else
                  e2.depthFunc(e2.LEQUAL);
                i3 = t4;
              }
            }, setLocked: function(e3) {
              t3 = e3;
            }, setClear: function(t4) {
              n3 !== t4 && (e2.clearDepth(t4), n3 = t4);
            }, reset: function() {
              t3 = false, r3 = null, i3 = null, n3 = null;
            } };
          }
          function o2() {
            var t3 = false, r3 = null, i3 = null, n3 = null, o3 = null, a3 = null, s3 = null, c3 = null, l3 = null;
            return { setTest: function(t4) {
              t4 ? d2(e2.STENCIL_TEST) : p2(e2.STENCIL_TEST);
            }, setMask: function(i4) {
              r3 === i4 || t3 || (e2.stencilMask(i4), r3 = i4);
            }, setFunc: function(t4, r4, a4) {
              i3 === t4 && n3 === r4 && o3 === a4 || (e2.stencilFunc(t4, r4, a4), i3 = t4, n3 = r4, o3 = a4);
            }, setOp: function(t4, r4, i4) {
              a3 === t4 && s3 === r4 && c3 === i4 || (e2.stencilOp(t4, r4, i4), a3 = t4, s3 = r4, c3 = i4);
            }, setLocked: function(e3) {
              t3 = e3;
            }, setClear: function(t4) {
              l3 !== t4 && (e2.clearStencil(t4), l3 = t4);
            }, reset: function() {
              t3 = false, r3 = null, i3 = null, n3 = null, o3 = null, a3 = null, s3 = null, c3 = null, l3 = null;
            } };
          }
          function a2(t3, r3, i3) {
            var n3 = new Uint8Array(4), o3 = e2.createTexture();
            e2.bindTexture(t3, o3), e2.texParameteri(t3, e2.TEXTURE_MIN_FILTER, e2.NEAREST), e2.texParameteri(t3, e2.TEXTURE_MAG_FILTER, e2.NEAREST);
            for (var a3 = 0; a3 < i3; a3++)
              e2.texImage2D(r3 + a3, 0, e2.RGBA, 1, 1, 0, e2.RGBA, e2.UNSIGNED_BYTE, n3);
            return o3;
          }
          function s2() {
            for (var e3 = 0, t3 = I2.length; e3 < t3; e3++)
              I2[e3] = 0;
          }
          function c2(r3) {
            if (I2[r3] = 1, 0 === O2[r3] && (e2.enableVertexAttribArray(r3), O2[r3] = 1), 0 !== N2[r3]) {
              t2.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(r3, 0), N2[r3] = 0;
            }
          }
          function l2(r3, i3) {
            if (I2[r3] = 1, 0 === O2[r3] && (e2.enableVertexAttribArray(r3), O2[r3] = 1), N2[r3] !== i3) {
              t2.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(r3, i3), N2[r3] = i3;
            }
          }
          function h2() {
            for (var t3 = 0, r3 = O2.length; t3 !== r3; ++t3)
              O2[t3] !== I2[t3] && (e2.disableVertexAttribArray(t3), O2[t3] = 0);
          }
          function d2(t3) {
            true !== F2[t3] && (e2.enable(t3), F2[t3] = true);
          }
          function p2(t3) {
            false !== F2[t3] && (e2.disable(t3), F2[t3] = false);
          }
          function f2() {
            if (null === z2 && (z2 = [], t2.get("WEBGL_compressed_texture_pvrtc") || t2.get("WEBGL_compressed_texture_s3tc") || t2.get("WEBGL_compressed_texture_etc1") || t2.get("WEBGL_compressed_texture_astc")))
              for (var r3 = e2.getParameter(e2.COMPRESSED_TEXTURE_FORMATS), i3 = 0; i3 < r3.length; i3++)
                z2.push(r3[i3]);
            return z2;
          }
          function m2(t3) {
            return B2 !== t3 && (e2.useProgram(t3), B2 = t3, true);
          }
          function v2(t3, i3, n3, o3, a3, s3, c3, l3) {
            if (t3 !== No ? d2(e2.BLEND) : p2(e2.BLEND), t3 !== Ho) {
              if (t3 !== G2 || l3 !== q2)
                switch (t3) {
                  case zo:
                    l3 ? (e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE, e2.ONE, e2.ONE, e2.ONE)) : (e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.SRC_ALPHA, e2.ONE));
                    break;
                  case Bo:
                    l3 ? (e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ZERO, e2.ZERO, e2.ONE_MINUS_SRC_COLOR, e2.ONE_MINUS_SRC_ALPHA)) : (e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.ZERO, e2.ONE_MINUS_SRC_COLOR));
                    break;
                  case Go:
                    l3 ? (e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ZERO, e2.SRC_COLOR, e2.ZERO, e2.SRC_ALPHA)) : (e2.blendEquation(e2.FUNC_ADD), e2.blendFunc(e2.ZERO, e2.SRC_COLOR));
                    break;
                  default:
                    l3 ? (e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.ONE, e2.ONE_MINUS_SRC_ALPHA, e2.ONE, e2.ONE_MINUS_SRC_ALPHA)) : (e2.blendEquationSeparate(e2.FUNC_ADD, e2.FUNC_ADD), e2.blendFuncSeparate(e2.SRC_ALPHA, e2.ONE_MINUS_SRC_ALPHA, e2.ONE, e2.ONE_MINUS_SRC_ALPHA));
                }
              H2 = null, j2 = null, V2 = null, k2 = null, W2 = null, X2 = null;
            } else
              a3 = a3 || i3, s3 = s3 || n3, c3 = c3 || o3, i3 === H2 && a3 === k2 || (e2.blendEquationSeparate(r2.convert(i3), r2.convert(a3)), H2 = i3, k2 = a3), n3 === j2 && o3 === V2 && s3 === W2 && c3 === X2 || (e2.blendFuncSeparate(r2.convert(n3), r2.convert(o3), r2.convert(s3), r2.convert(c3)), j2 = n3, V2 = o3, W2 = s3, X2 = c3);
            G2 = t3, q2 = l3;
          }
          function g2(t3, r3) {
            t3.side === Do ? p2(e2.CULL_FACE) : d2(e2.CULL_FACE);
            var i3 = t3.side === Po;
            r3 && (i3 = !i3), y2(i3), true === t3.transparent ? v2(t3.blending, t3.blendEquation, t3.blendSrc, t3.blendDst, t3.blendEquationAlpha, t3.blendSrcAlpha, t3.blendDstAlpha, t3.premultipliedAlpha) : v2(No), P2.setFunc(t3.depthFunc), P2.setTest(t3.depthTest), P2.setMask(t3.depthWrite), R2.setMask(t3.colorWrite), b2(t3.polygonOffset, t3.polygonOffsetFactor, t3.polygonOffsetUnits);
          }
          function y2(t3) {
            Y2 !== t3 && (t3 ? e2.frontFace(e2.CW) : e2.frontFace(e2.CCW), Y2 = t3);
          }
          function x2(t3) {
            t3 !== So ? (d2(e2.CULL_FACE), t3 !== Z2 && (t3 === To ? e2.cullFace(e2.BACK) : t3 === Ao ? e2.cullFace(e2.FRONT) : e2.cullFace(e2.FRONT_AND_BACK))) : p2(e2.CULL_FACE), Z2 = t3;
          }
          function _2(t3) {
            t3 !== J2 && (ee2 && e2.lineWidth(t3), J2 = t3);
          }
          function b2(t3, r3, i3) {
            t3 ? (d2(e2.POLYGON_OFFSET_FILL), K2 === r3 && Q2 === i3 || (e2.polygonOffset(r3, i3), K2 = r3, Q2 = i3)) : p2(e2.POLYGON_OFFSET_FILL);
          }
          function w2(t3) {
            t3 ? d2(e2.SCISSOR_TEST) : p2(e2.SCISSOR_TEST);
          }
          function M2(t3) {
            void 0 === t3 && (t3 = e2.TEXTURE0 + $2 - 1), ie2 !== t3 && (e2.activeTexture(t3), ie2 = t3);
          }
          function E2(t3, r3) {
            null === ie2 && M2();
            var i3 = ne2[ie2];
            void 0 === i3 && (i3 = { type: void 0, texture: void 0 }, ne2[ie2] = i3), i3.type === t3 && i3.texture === r3 || (e2.bindTexture(t3, r3 || se2[t3]), i3.type = t3, i3.texture = r3);
          }
          function S2() {
            try {
              e2.compressedTexImage2D.apply(e2, arguments);
            } catch (e3) {
              console.error("THREE.WebGLState:", e3);
            }
          }
          function T2() {
            try {
              e2.texImage2D.apply(e2, arguments);
            } catch (e3) {
              console.error("THREE.WebGLState:", e3);
            }
          }
          function A2(t3) {
            false === oe2.equals(t3) && (e2.scissor(t3.x, t3.y, t3.z, t3.w), oe2.copy(t3));
          }
          function L2(t3) {
            false === ae2.equals(t3) && (e2.viewport(t3.x, t3.y, t3.z, t3.w), ae2.copy(t3));
          }
          function C2() {
            for (var t3 = 0; t3 < O2.length; t3++)
              1 === O2[t3] && (e2.disableVertexAttribArray(t3), O2[t3] = 0);
            F2 = {}, z2 = null, ie2 = null, ne2 = {}, B2 = null, G2 = null, Y2 = null, Z2 = null, R2.reset(), P2.reset(), D2.reset();
          }
          var R2 = new i2(), P2 = new n2(), D2 = new o2(), U2 = e2.getParameter(e2.MAX_VERTEX_ATTRIBS), I2 = new Uint8Array(U2), O2 = new Uint8Array(U2), N2 = new Uint8Array(U2), F2 = {}, z2 = null, B2 = null, G2 = null, H2 = null, j2 = null, V2 = null, k2 = null, W2 = null, X2 = null, q2 = false, Y2 = null, Z2 = null, J2 = null, K2 = null, Q2 = null, $2 = e2.getParameter(e2.MAX_COMBINED_TEXTURE_IMAGE_UNITS), ee2 = false, te2 = 0, re2 = e2.getParameter(e2.VERSION);
          -1 !== re2.indexOf("WebGL") ? (te2 = parseFloat(/^WebGL\ ([0-9])/.exec(re2)[1]), ee2 = te2 >= 1) : -1 !== re2.indexOf("OpenGL ES") && (te2 = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(re2)[1]), ee2 = te2 >= 2);
          var ie2 = null, ne2 = {}, oe2 = new u(), ae2 = new u(), se2 = {};
          return se2[e2.TEXTURE_2D] = a2(e2.TEXTURE_2D, e2.TEXTURE_2D, 1), se2[e2.TEXTURE_CUBE_MAP] = a2(e2.TEXTURE_CUBE_MAP, e2.TEXTURE_CUBE_MAP_POSITIVE_X, 6), R2.setClear(0, 0, 0, 1), P2.setClear(1), D2.setClear(0), d2(e2.DEPTH_TEST), P2.setFunc(sa), y2(false), x2(To), d2(e2.CULL_FACE), d2(e2.BLEND), v2(Fo), { buffers: { color: R2, depth: P2, stencil: D2 }, initAttributes: s2, enableAttribute: c2, enableAttributeAndDivisor: l2, disableUnusedAttributes: h2, enable: d2, disable: p2, getCompressedTextureFormats: f2, useProgram: m2, setBlending: v2, setMaterial: g2, setFlipSided: y2, setCullFace: x2, setLineWidth: _2, setPolygonOffset: b2, setScissorTest: w2, activeTexture: M2, bindTexture: E2, compressedTexImage2D: S2, texImage2D: T2, scissor: A2, viewport: L2, reset: C2 };
        }
        function _t(e2, t2, r2, i2, n2, o2, a2) {
          function s2(e3, t3) {
            if (e3.width > t3 || e3.height > t3) {
              if ("data" in e3)
                return void console.warn("THREE.WebGLRenderer: image in DataTexture is too big (" + e3.width + "x" + e3.height + ").");
              var r3 = t3 / Math.max(e3.width, e3.height), i3 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas");
              i3.width = Math.floor(e3.width * r3), i3.height = Math.floor(e3.height * r3);
              return i3.getContext("2d").drawImage(e3, 0, 0, e3.width, e3.height, 0, 0, i3.width, i3.height), console.warn("THREE.WebGLRenderer: image is too big (" + e3.width + "x" + e3.height + "). Resized to " + i3.width + "x" + i3.height, e3), i3;
            }
            return e3;
          }
          function c2(e3) {
            return zs.isPowerOfTwo(e3.width) && zs.isPowerOfTwo(e3.height);
          }
          function l2(e3) {
            if (e3 instanceof HTMLImageElement || e3 instanceof HTMLCanvasElement || e3 instanceof ImageBitmap) {
              void 0 === R2 && (R2 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), R2.width = zs.floorPowerOfTwo(e3.width), R2.height = zs.floorPowerOfTwo(e3.height);
              return R2.getContext("2d").drawImage(e3, 0, 0, R2.width, R2.height), console.warn("THREE.WebGLRenderer: image is not power of two (" + e3.width + "x" + e3.height + "). Resized to " + R2.width + "x" + R2.height, e3), R2;
            }
            return e3;
          }
          function u2(e3) {
            return e3.wrapS !== La || e3.wrapT !== La || e3.minFilter !== Ra && e3.minFilter !== Ua;
          }
          function h2(e3, t3) {
            return e3.generateMipmaps && t3 && e3.minFilter !== Ra && e3.minFilter !== Ua;
          }
          function d2(t3, r3, n3, o3) {
            e2.generateMipmap(t3), i2.get(r3).__maxMipLevel = Math.log(Math.max(n3, o3)) * Math.LOG2E;
          }
          function p2(t3) {
            return t3 === Ra || t3 === Pa || t3 === Da ? e2.NEAREST : e2.LINEAR;
          }
          function f2(e3) {
            var t3 = e3.target;
            t3.removeEventListener("dispose", f2), v2(t3), t3.isVideoTexture && delete D2[t3.id], a2.memory.textures--;
          }
          function m2(e3) {
            var t3 = e3.target;
            t3.removeEventListener("dispose", m2), g2(t3), a2.memory.textures--;
          }
          function v2(t3) {
            var r3 = i2.get(t3);
            if (t3.image && r3.__image__webglTextureCube)
              e2.deleteTexture(r3.__image__webglTextureCube);
            else {
              if (void 0 === r3.__webglInit)
                return;
              e2.deleteTexture(r3.__webglTexture);
            }
            i2.remove(t3);
          }
          function g2(t3) {
            var r3 = i2.get(t3), n3 = i2.get(t3.texture);
            if (t3) {
              if (void 0 !== n3.__webglTexture && e2.deleteTexture(n3.__webglTexture), t3.depthTexture && t3.depthTexture.dispose(), t3.isWebGLRenderTargetCube)
                for (var o3 = 0; o3 < 6; o3++)
                  e2.deleteFramebuffer(r3.__webglFramebuffer[o3]), r3.__webglDepthbuffer && e2.deleteRenderbuffer(r3.__webglDepthbuffer[o3]);
              else
                e2.deleteFramebuffer(r3.__webglFramebuffer), r3.__webglDepthbuffer && e2.deleteRenderbuffer(r3.__webglDepthbuffer);
              i2.remove(t3.texture), i2.remove(t3);
            }
          }
          function y2(t3, n3) {
            var o3 = i2.get(t3);
            if (t3.isVideoTexture && C2(t3), t3.version > 0 && o3.__version !== t3.version) {
              var a3 = t3.image;
              if (void 0 === a3)
                console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined", t3);
              else {
                if (false !== a3.complete)
                  return void w2(o3, t3, n3);
                console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete", t3);
              }
            }
            r2.activeTexture(e2.TEXTURE0 + n3), r2.bindTexture(e2.TEXTURE_2D, o3.__webglTexture);
          }
          function x2(t3, l3) {
            var u3 = i2.get(t3);
            if (6 === t3.image.length)
              if (t3.version > 0 && u3.__version !== t3.version) {
                u3.__image__webglTextureCube || (t3.addEventListener("dispose", f2), u3.__image__webglTextureCube = e2.createTexture(), a2.memory.textures++), r2.activeTexture(e2.TEXTURE0 + l3), r2.bindTexture(e2.TEXTURE_CUBE_MAP, u3.__image__webglTextureCube), e2.pixelStorei(e2.UNPACK_FLIP_Y_WEBGL, t3.flipY);
                for (var p3 = t3 && t3.isCompressedTexture, m3 = t3.image[0] && t3.image[0].isDataTexture, v3 = [], g3 = 0; g3 < 6; g3++)
                  v3[g3] = p3 || m3 ? m3 ? t3.image[g3].image : t3.image[g3] : s2(t3.image[g3], n2.maxCubemapSize);
                var y3 = v3[0], x3 = c2(y3), _3 = o2.convert(t3.format), w3 = o2.convert(t3.type);
                b2(e2.TEXTURE_CUBE_MAP, t3, x3);
                for (var g3 = 0; g3 < 6; g3++)
                  if (p3)
                    for (var M3, E3 = v3[g3].mipmaps, S3 = 0, T3 = E3.length; S3 < T3; S3++)
                      M3 = E3[S3], t3.format !== Ja && t3.format !== Za ? r2.getCompressedTextureFormats().indexOf(_3) > -1 ? r2.compressedTexImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + g3, S3, _3, M3.width, M3.height, 0, M3.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : r2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + g3, S3, _3, M3.width, M3.height, 0, _3, w3, M3.data);
                  else
                    m3 ? r2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + g3, 0, _3, v3[g3].width, v3[g3].height, 0, _3, w3, v3[g3].data) : r2.texImage2D(e2.TEXTURE_CUBE_MAP_POSITIVE_X + g3, 0, _3, _3, w3, v3[g3]);
                u3.__maxMipLevel = p3 ? E3.length - 1 : 0, h2(t3, x3) && d2(e2.TEXTURE_CUBE_MAP, t3, y3.width, y3.height), u3.__version = t3.version, t3.onUpdate && t3.onUpdate(t3);
              } else
                r2.activeTexture(e2.TEXTURE0 + l3), r2.bindTexture(e2.TEXTURE_CUBE_MAP, u3.__image__webglTextureCube);
          }
          function _2(t3, n3) {
            r2.activeTexture(e2.TEXTURE0 + n3), r2.bindTexture(e2.TEXTURE_CUBE_MAP, i2.get(t3).__webglTexture);
          }
          function b2(r3, a3, s3) {
            var c3;
            if (s3 ? (e2.texParameteri(r3, e2.TEXTURE_WRAP_S, o2.convert(a3.wrapS)), e2.texParameteri(r3, e2.TEXTURE_WRAP_T, o2.convert(a3.wrapT)), e2.texParameteri(r3, e2.TEXTURE_MAG_FILTER, o2.convert(a3.magFilter)), e2.texParameteri(r3, e2.TEXTURE_MIN_FILTER, o2.convert(a3.minFilter))) : (e2.texParameteri(r3, e2.TEXTURE_WRAP_S, e2.CLAMP_TO_EDGE), e2.texParameteri(r3, e2.TEXTURE_WRAP_T, e2.CLAMP_TO_EDGE), a3.wrapS === La && a3.wrapT === La || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.", a3), e2.texParameteri(r3, e2.TEXTURE_MAG_FILTER, p2(a3.magFilter)), e2.texParameteri(r3, e2.TEXTURE_MIN_FILTER, p2(a3.minFilter)), a3.minFilter !== Ra && a3.minFilter !== Ua && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.", a3)), c3 = t2.get("EXT_texture_filter_anisotropic")) {
              if (a3.type === ja && null === t2.get("OES_texture_float_linear"))
                return;
              if (a3.type === Va && null === t2.get("OES_texture_half_float_linear"))
                return;
              (a3.anisotropy > 1 || i2.get(a3).__currentAnisotropy) && (e2.texParameterf(r3, c3.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a3.anisotropy, n2.getMaxAnisotropy())), i2.get(a3).__currentAnisotropy = a3.anisotropy);
            }
          }
          function w2(t3, i3, p3) {
            void 0 === t3.__webglInit && (t3.__webglInit = true, i3.addEventListener("dispose", f2), t3.__webglTexture = e2.createTexture(), a2.memory.textures++), r2.activeTexture(e2.TEXTURE0 + p3), r2.bindTexture(e2.TEXTURE_2D, t3.__webglTexture), e2.pixelStorei(e2.UNPACK_FLIP_Y_WEBGL, i3.flipY), e2.pixelStorei(e2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, i3.premultiplyAlpha), e2.pixelStorei(e2.UNPACK_ALIGNMENT, i3.unpackAlignment);
            var m3 = s2(i3.image, n2.maxTextureSize);
            u2(i3) && false === c2(m3) && (m3 = l2(m3));
            var v3 = c2(m3), g3 = o2.convert(i3.format), y3 = o2.convert(i3.type);
            b2(e2.TEXTURE_2D, i3, v3);
            var x3, _3 = i3.mipmaps;
            if (i3.isDepthTexture) {
              var w3 = e2.DEPTH_COMPONENT;
              if (i3.type === ja) {
                if (!P2)
                  throw new Error("Float Depth Texture only supported in WebGL2.0");
                w3 = e2.DEPTH_COMPONENT32F;
              } else
                P2 && (w3 = e2.DEPTH_COMPONENT16);
              i3.format === $a && w3 === e2.DEPTH_COMPONENT && i3.type !== Ba && i3.type !== Ha && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), i3.type = Ba, y3 = o2.convert(i3.type)), i3.format === es && (w3 = e2.DEPTH_STENCIL, i3.type !== qa && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), i3.type = qa, y3 = o2.convert(i3.type))), r2.texImage2D(e2.TEXTURE_2D, 0, w3, m3.width, m3.height, 0, g3, y3, null);
            } else if (i3.isDataTexture)
              if (_3.length > 0 && v3) {
                for (var M3 = 0, E3 = _3.length; M3 < E3; M3++)
                  x3 = _3[M3], r2.texImage2D(e2.TEXTURE_2D, M3, g3, x3.width, x3.height, 0, g3, y3, x3.data);
                i3.generateMipmaps = false, t3.__maxMipLevel = _3.length - 1;
              } else
                r2.texImage2D(e2.TEXTURE_2D, 0, g3, m3.width, m3.height, 0, g3, y3, m3.data), t3.__maxMipLevel = 0;
            else if (i3.isCompressedTexture) {
              for (var M3 = 0, E3 = _3.length; M3 < E3; M3++)
                x3 = _3[M3], i3.format !== Ja && i3.format !== Za ? r2.getCompressedTextureFormats().indexOf(g3) > -1 ? r2.compressedTexImage2D(e2.TEXTURE_2D, M3, g3, x3.width, x3.height, 0, x3.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : r2.texImage2D(e2.TEXTURE_2D, M3, g3, x3.width, x3.height, 0, g3, y3, x3.data);
              t3.__maxMipLevel = _3.length - 1;
            } else if (_3.length > 0 && v3) {
              for (var M3 = 0, E3 = _3.length; M3 < E3; M3++)
                x3 = _3[M3], r2.texImage2D(e2.TEXTURE_2D, M3, g3, g3, y3, x3);
              i3.generateMipmaps = false, t3.__maxMipLevel = _3.length - 1;
            } else
              r2.texImage2D(e2.TEXTURE_2D, 0, g3, g3, y3, m3), t3.__maxMipLevel = 0;
            h2(i3, v3) && d2(e2.TEXTURE_2D, i3, m3.width, m3.height), t3.__version = i3.version, i3.onUpdate && i3.onUpdate(i3);
          }
          function M2(t3, n3, a3, s3) {
            var c3 = o2.convert(n3.texture.format), l3 = o2.convert(n3.texture.type);
            r2.texImage2D(s3, 0, c3, n3.width, n3.height, 0, c3, l3, null), e2.bindFramebuffer(e2.FRAMEBUFFER, t3), e2.framebufferTexture2D(e2.FRAMEBUFFER, a3, s3, i2.get(n3.texture).__webglTexture, 0), e2.bindFramebuffer(e2.FRAMEBUFFER, null);
          }
          function E2(t3, r3) {
            e2.bindRenderbuffer(e2.RENDERBUFFER, t3), r3.depthBuffer && !r3.stencilBuffer ? (e2.renderbufferStorage(e2.RENDERBUFFER, e2.DEPTH_COMPONENT16, r3.width, r3.height), e2.framebufferRenderbuffer(e2.FRAMEBUFFER, e2.DEPTH_ATTACHMENT, e2.RENDERBUFFER, t3)) : r3.depthBuffer && r3.stencilBuffer ? (e2.renderbufferStorage(e2.RENDERBUFFER, e2.DEPTH_STENCIL, r3.width, r3.height), e2.framebufferRenderbuffer(e2.FRAMEBUFFER, e2.DEPTH_STENCIL_ATTACHMENT, e2.RENDERBUFFER, t3)) : e2.renderbufferStorage(e2.RENDERBUFFER, e2.RGBA4, r3.width, r3.height), e2.bindRenderbuffer(e2.RENDERBUFFER, null);
          }
          function S2(t3, r3) {
            if (r3 && r3.isWebGLRenderTargetCube)
              throw new Error("Depth Texture with cube render targets is not supported");
            if (e2.bindFramebuffer(e2.FRAMEBUFFER, t3), !r3.depthTexture || !r3.depthTexture.isDepthTexture)
              throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
            i2.get(r3.depthTexture).__webglTexture && r3.depthTexture.image.width === r3.width && r3.depthTexture.image.height === r3.height || (r3.depthTexture.image.width = r3.width, r3.depthTexture.image.height = r3.height, r3.depthTexture.needsUpdate = true), y2(r3.depthTexture, 0);
            var n3 = i2.get(r3.depthTexture).__webglTexture;
            if (r3.depthTexture.format === $a)
              e2.framebufferTexture2D(e2.FRAMEBUFFER, e2.DEPTH_ATTACHMENT, e2.TEXTURE_2D, n3, 0);
            else {
              if (r3.depthTexture.format !== es)
                throw new Error("Unknown depthTexture format");
              e2.framebufferTexture2D(e2.FRAMEBUFFER, e2.DEPTH_STENCIL_ATTACHMENT, e2.TEXTURE_2D, n3, 0);
            }
          }
          function T2(t3) {
            var r3 = i2.get(t3), n3 = true === t3.isWebGLRenderTargetCube;
            if (t3.depthTexture) {
              if (n3)
                throw new Error("target.depthTexture not supported in Cube render targets");
              S2(r3.__webglFramebuffer, t3);
            } else if (n3) {
              r3.__webglDepthbuffer = [];
              for (var o3 = 0; o3 < 6; o3++)
                e2.bindFramebuffer(e2.FRAMEBUFFER, r3.__webglFramebuffer[o3]), r3.__webglDepthbuffer[o3] = e2.createRenderbuffer(), E2(r3.__webglDepthbuffer[o3], t3);
            } else
              e2.bindFramebuffer(e2.FRAMEBUFFER, r3.__webglFramebuffer), r3.__webglDepthbuffer = e2.createRenderbuffer(), E2(r3.__webglDepthbuffer, t3);
            e2.bindFramebuffer(e2.FRAMEBUFFER, null);
          }
          function A2(t3) {
            var n3 = i2.get(t3), o3 = i2.get(t3.texture);
            t3.addEventListener("dispose", m2), o3.__webglTexture = e2.createTexture(), a2.memory.textures++;
            var s3 = true === t3.isWebGLRenderTargetCube, l3 = c2(t3);
            if (s3) {
              n3.__webglFramebuffer = [];
              for (var u3 = 0; u3 < 6; u3++)
                n3.__webglFramebuffer[u3] = e2.createFramebuffer();
            } else
              n3.__webglFramebuffer = e2.createFramebuffer();
            if (s3) {
              r2.bindTexture(e2.TEXTURE_CUBE_MAP, o3.__webglTexture), b2(e2.TEXTURE_CUBE_MAP, t3.texture, l3);
              for (var u3 = 0; u3 < 6; u3++)
                M2(n3.__webglFramebuffer[u3], t3, e2.COLOR_ATTACHMENT0, e2.TEXTURE_CUBE_MAP_POSITIVE_X + u3);
              h2(t3.texture, l3) && d2(e2.TEXTURE_CUBE_MAP, t3.texture, t3.width, t3.height), r2.bindTexture(e2.TEXTURE_CUBE_MAP, null);
            } else
              r2.bindTexture(e2.TEXTURE_2D, o3.__webglTexture), b2(e2.TEXTURE_2D, t3.texture, l3), M2(n3.__webglFramebuffer, t3, e2.COLOR_ATTACHMENT0, e2.TEXTURE_2D), h2(t3.texture, l3) && d2(e2.TEXTURE_2D, t3.texture, t3.width, t3.height), r2.bindTexture(e2.TEXTURE_2D, null);
            t3.depthBuffer && T2(t3);
          }
          function L2(t3) {
            var n3 = t3.texture;
            if (h2(n3, c2(t3))) {
              var o3 = t3.isWebGLRenderTargetCube ? e2.TEXTURE_CUBE_MAP : e2.TEXTURE_2D, a3 = i2.get(n3).__webglTexture;
              r2.bindTexture(o3, a3), d2(o3, n3, t3.width, t3.height), r2.bindTexture(o3, null);
            }
          }
          function C2(e3) {
            var t3 = e3.id, r3 = a2.render.frame;
            D2[t3] !== r3 && (D2[t3] = r3, e3.update());
          }
          var R2, P2 = "undefined" != typeof WebGL2RenderingContext && e2 instanceof WebGL2RenderingContext, D2 = {};
          this.setTexture2D = y2, this.setTextureCube = x2, this.setTextureCubeDynamic = _2, this.setupRenderTarget = A2, this.updateRenderTargetMipmap = L2;
        }
        function bt(e2, t2) {
          function r2(r3) {
            var i2;
            if (r3 === Aa)
              return e2.REPEAT;
            if (r3 === La)
              return e2.CLAMP_TO_EDGE;
            if (r3 === Ca)
              return e2.MIRRORED_REPEAT;
            if (r3 === Ra)
              return e2.NEAREST;
            if (r3 === Pa)
              return e2.NEAREST_MIPMAP_NEAREST;
            if (r3 === Da)
              return e2.NEAREST_MIPMAP_LINEAR;
            if (r3 === Ua)
              return e2.LINEAR;
            if (r3 === Ia)
              return e2.LINEAR_MIPMAP_NEAREST;
            if (r3 === Oa)
              return e2.LINEAR_MIPMAP_LINEAR;
            if (r3 === Na)
              return e2.UNSIGNED_BYTE;
            if (r3 === ka)
              return e2.UNSIGNED_SHORT_4_4_4_4;
            if (r3 === Wa)
              return e2.UNSIGNED_SHORT_5_5_5_1;
            if (r3 === Xa)
              return e2.UNSIGNED_SHORT_5_6_5;
            if (r3 === Fa)
              return e2.BYTE;
            if (r3 === za)
              return e2.SHORT;
            if (r3 === Ba)
              return e2.UNSIGNED_SHORT;
            if (r3 === Ga)
              return e2.INT;
            if (r3 === Ha)
              return e2.UNSIGNED_INT;
            if (r3 === ja)
              return e2.FLOAT;
            if (r3 === Va && null !== (i2 = t2.get("OES_texture_half_float")))
              return i2.HALF_FLOAT_OES;
            if (r3 === Ya)
              return e2.ALPHA;
            if (r3 === Za)
              return e2.RGB;
            if (r3 === Ja)
              return e2.RGBA;
            if (r3 === Ka)
              return e2.LUMINANCE;
            if (r3 === Qa)
              return e2.LUMINANCE_ALPHA;
            if (r3 === $a)
              return e2.DEPTH_COMPONENT;
            if (r3 === es)
              return e2.DEPTH_STENCIL;
            if (r3 === jo)
              return e2.FUNC_ADD;
            if (r3 === Vo)
              return e2.FUNC_SUBTRACT;
            if (r3 === ko)
              return e2.FUNC_REVERSE_SUBTRACT;
            if (r3 === qo)
              return e2.ZERO;
            if (r3 === Yo)
              return e2.ONE;
            if (r3 === Zo)
              return e2.SRC_COLOR;
            if (r3 === Jo)
              return e2.ONE_MINUS_SRC_COLOR;
            if (r3 === Ko)
              return e2.SRC_ALPHA;
            if (r3 === Qo)
              return e2.ONE_MINUS_SRC_ALPHA;
            if (r3 === $o)
              return e2.DST_ALPHA;
            if (r3 === ea)
              return e2.ONE_MINUS_DST_ALPHA;
            if (r3 === ta)
              return e2.DST_COLOR;
            if (r3 === ra)
              return e2.ONE_MINUS_DST_COLOR;
            if (r3 === ia)
              return e2.SRC_ALPHA_SATURATE;
            if ((r3 === ts || r3 === rs || r3 === is || r3 === ns) && null !== (i2 = t2.get("WEBGL_compressed_texture_s3tc"))) {
              if (r3 === ts)
                return i2.COMPRESSED_RGB_S3TC_DXT1_EXT;
              if (r3 === rs)
                return i2.COMPRESSED_RGBA_S3TC_DXT1_EXT;
              if (r3 === is)
                return i2.COMPRESSED_RGBA_S3TC_DXT3_EXT;
              if (r3 === ns)
                return i2.COMPRESSED_RGBA_S3TC_DXT5_EXT;
            }
            if ((r3 === os || r3 === as || r3 === ss || r3 === cs) && null !== (i2 = t2.get("WEBGL_compressed_texture_pvrtc"))) {
              if (r3 === os)
                return i2.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
              if (r3 === as)
                return i2.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
              if (r3 === ss)
                return i2.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
              if (r3 === cs)
                return i2.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
            }
            if (r3 === ls && null !== (i2 = t2.get("WEBGL_compressed_texture_etc1")))
              return i2.COMPRESSED_RGB_ETC1_WEBGL;
            if ((r3 === us || r3 === hs || r3 === ds || r3 === ps || r3 === fs || r3 === ms || r3 === vs || r3 === gs || r3 === ys || r3 === xs || r3 === _s || r3 === bs || r3 === ws || r3 === Ms) && null !== (i2 = t2.get("WEBGL_compressed_texture_astc")))
              return r3;
            if ((r3 === Wo || r3 === Xo) && null !== (i2 = t2.get("EXT_blend_minmax"))) {
              if (r3 === Wo)
                return i2.MIN_EXT;
              if (r3 === Xo)
                return i2.MAX_EXT;
            }
            return r3 === qa && null !== (i2 = t2.get("WEBGL_depth_texture")) ? i2.UNSIGNED_INT_24_8_WEBGL : 0;
          }
          return { convert: r2 };
        }
        function wt(e2, t2, r2, i2) {
          M.call(this), this.type = "PerspectiveCamera", this.fov = void 0 !== e2 ? e2 : 50, this.zoom = 1, this.near = void 0 !== r2 ? r2 : 0.1, this.far = void 0 !== i2 ? i2 : 2e3, this.focus = 10, this.aspect = void 0 !== t2 ? t2 : 1, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
        }
        function Mt(e2) {
          wt.call(this), this.cameras = e2 || [];
        }
        function Et(e2) {
          function t2() {
            return null !== n2 && true === n2.isPresenting;
          }
          function r2() {
            if (t2()) {
              var r3 = n2.getEyeParameters("left"), o2 = r3.renderWidth, a2 = r3.renderHeight;
              _2 = e2.getPixelRatio(), x2 = e2.getSize(), e2.setDrawingBufferSize(2 * o2, a2, 1);
            } else
              i2.enabled && e2.setDrawingBufferSize(x2.width, x2.height, _2);
          }
          var i2 = this, n2 = null, c2 = null, l2 = null, h2 = new o(), d2 = new o();
          "undefined" != typeof window && "VRFrameData" in window && (c2 = new window.VRFrameData(), window.addEventListener("vrdisplaypresentchange", r2, false));
          var p2 = new o(), f2 = new a(), m2 = new s(), v2 = new wt();
          v2.bounds = new u(0, 0, 0.5, 1), v2.layers.enable(1);
          var g2 = new wt();
          g2.bounds = new u(0.5, 0, 0.5, 1), g2.layers.enable(2);
          var y2 = new Mt([v2, g2]);
          y2.layers.enable(1), y2.layers.enable(2);
          var x2, _2;
          this.enabled = false, this.userHeight = 1.6, this.getDevice = function() {
            return n2;
          }, this.setDevice = function(e3) {
            void 0 !== e3 && (n2 = e3);
          }, this.setPoseTarget = function(e3) {
            void 0 !== e3 && (l2 = e3);
          }, this.getCamera = function(e3) {
            if (null === n2)
              return e3;
            n2.depthNear = e3.near, n2.depthFar = e3.far, n2.getFrameData(c2);
            var t3 = n2.stageParameters;
            t3 ? h2.fromArray(t3.sittingToStandingTransform) : h2.makeTranslation(0, i2.userHeight, 0);
            var r3 = c2.pose, o2 = null !== l2 ? l2 : e3;
            if (o2.matrix.copy(h2), o2.matrix.decompose(o2.position, o2.quaternion, o2.scale), null !== r3.orientation && (f2.fromArray(r3.orientation), o2.quaternion.multiply(f2)), null !== r3.position && (f2.setFromRotationMatrix(h2), m2.fromArray(r3.position), m2.applyQuaternion(f2), o2.position.add(m2)), o2.updateMatrixWorld(), false === n2.isPresenting)
              return e3;
            v2.near = e3.near, g2.near = e3.near, v2.far = e3.far, g2.far = e3.far, y2.matrixWorld.copy(e3.matrixWorld), y2.matrixWorldInverse.copy(e3.matrixWorldInverse), v2.matrixWorldInverse.fromArray(c2.leftViewMatrix), g2.matrixWorldInverse.fromArray(c2.rightViewMatrix), d2.getInverse(h2), v2.matrixWorldInverse.multiply(d2), g2.matrixWorldInverse.multiply(d2);
            var a2 = o2.parent;
            null !== a2 && (p2.getInverse(a2.matrixWorld), v2.matrixWorldInverse.multiply(p2), g2.matrixWorldInverse.multiply(p2)), v2.matrixWorld.getInverse(v2.matrixWorldInverse), g2.matrixWorld.getInverse(g2.matrixWorldInverse), v2.projectionMatrix.fromArray(c2.leftProjectionMatrix), g2.projectionMatrix.fromArray(c2.rightProjectionMatrix), y2.projectionMatrix.copy(v2.projectionMatrix);
            var s2 = n2.getLayers();
            if (s2.length) {
              var u2 = s2[0];
              null !== u2.leftBounds && 4 === u2.leftBounds.length && v2.bounds.fromArray(u2.leftBounds), null !== u2.rightBounds && 4 === u2.rightBounds.length && g2.bounds.fromArray(u2.rightBounds);
            }
            return y2;
          }, this.getStandingMatrix = function() {
            return h2;
          }, this.submitFrame = function() {
            t2() && n2.submitFrame();
          }, this.dispose = function() {
            "undefined" != typeof window && window.removeEventListener("vrdisplaypresentchange", r2);
          };
        }
        function St(e2) {
          function t2() {
            return null === ue2 ? we2 : 1;
          }
          function r2() {
            Ue2 = new te(oe2), Ue2.get("WEBGL_depth_texture"), Ue2.get("OES_texture_float"), Ue2.get("OES_texture_float_linear"), Ue2.get("OES_texture_half_float"), Ue2.get("OES_texture_half_float_linear"), Ue2.get("OES_standard_derivatives"), Ue2.get("OES_element_index_uint"), Ue2.get("ANGLE_instanced_arrays"), Ke2 = new bt(oe2, Ue2), Ie2 = new $(oe2, Ue2, e2), Oe2 = new xt(oe2, Ue2, Ke2), Oe2.scissor(ge2.copy(Ee2).multiplyScalar(we2)), Oe2.viewport(ve2.copy(Me2).multiplyScalar(we2)), Ne2 = new ne(oe2), Fe2 = new ot(), ze2 = new _t(oe2, Ue2, Oe2, Fe2, Ie2, Ke2, Ne2), Be2 = new x(oe2), Ge2 = new re(oe2, Be2, Ne2), He2 = new se(Ge2, Ne2), qe2 = new ae(oe2), Ve2 = new nt(ce2, Ue2, Ie2), ke2 = new lt(), We2 = new pt(), Xe2 = new K(ce2, Oe2, Ge2, X2), Ye2 = new Q(oe2, Ue2, Ne2), Ze2 = new ie(oe2, Ue2, Ne2), Je2 = new yt(ce2, oe2, Oe2, ze2, Ie2), Ne2.programs = Ve2.programs, ce2.context = oe2, ce2.capabilities = Ie2, ce2.extensions = Ue2, ce2.properties = Fe2, ce2.renderLists = ke2, ce2.state = Oe2, ce2.info = Ne2;
          }
          function i2(e3) {
            e3.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), le2 = true;
          }
          function n2() {
            console.log("THREE.WebGLRenderer: Context Restored."), le2 = false, r2();
          }
          function a2(e3) {
            var t3 = e3.target;
            t3.removeEventListener("dispose", a2), c2(t3);
          }
          function c2(e3) {
            l2(e3), Fe2.remove(e3);
          }
          function l2(e3) {
            var t3 = Fe2.get(e3).program;
            e3.program = void 0, void 0 !== t3 && Ve2.releaseProgram(t3);
          }
          function h2(e3, t3, r3) {
            e3.render(function(e4) {
              ce2.renderBufferImmediate(e4, t3, r3);
            });
          }
          function d2(e3, t3, r3) {
            if (r3 && r3.isInstancedBufferGeometry && null === Ue2.get("ANGLE_instanced_arrays"))
              return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
            Oe2.initAttributes();
            var i3 = r3.attributes, n3 = t3.getAttributes(), o2 = e3.defaultAttributeValues;
            for (var a3 in n3) {
              var s2 = n3[a3];
              if (s2 >= 0) {
                var c3 = i3[a3];
                if (void 0 !== c3) {
                  var l3 = c3.normalized, u2 = c3.itemSize, h3 = Be2.get(c3);
                  if (void 0 === h3)
                    continue;
                  var d3 = h3.buffer, p2 = h3.type, f3 = h3.bytesPerElement;
                  if (c3.isInterleavedBufferAttribute) {
                    var m3 = c3.data, v3 = m3.stride, g2 = c3.offset;
                    m3 && m3.isInstancedInterleavedBuffer ? (Oe2.enableAttributeAndDivisor(s2, m3.meshPerAttribute), void 0 === r3.maxInstancedCount && (r3.maxInstancedCount = m3.meshPerAttribute * m3.count)) : Oe2.enableAttribute(s2), oe2.bindBuffer(oe2.ARRAY_BUFFER, d3), oe2.vertexAttribPointer(s2, u2, p2, l3, v3 * f3, g2 * f3);
                  } else
                    c3.isInstancedBufferAttribute ? (Oe2.enableAttributeAndDivisor(s2, c3.meshPerAttribute), void 0 === r3.maxInstancedCount && (r3.maxInstancedCount = c3.meshPerAttribute * c3.count)) : Oe2.enableAttribute(s2), oe2.bindBuffer(oe2.ARRAY_BUFFER, d3), oe2.vertexAttribPointer(s2, u2, p2, l3, 0, 0);
                } else if (void 0 !== o2) {
                  var y3 = o2[a3];
                  if (void 0 !== y3)
                    switch (y3.length) {
                      case 2:
                        oe2.vertexAttrib2fv(s2, y3);
                        break;
                      case 3:
                        oe2.vertexAttrib3fv(s2, y3);
                        break;
                      case 4:
                        oe2.vertexAttrib4fv(s2, y3);
                        break;
                      default:
                        oe2.vertexAttrib1fv(s2, y3);
                    }
                }
              }
            }
            Oe2.disableUnusedAttributes();
          }
          function f2() {
            et2 || (v2(), et2 = true);
          }
          function m2() {
            et2 = false;
          }
          function v2() {
            var e3 = Qe2.getDevice();
            e3 && e3.isPresenting ? e3.requestAnimationFrame(y2) : window.requestAnimationFrame(y2);
          }
          function y2(e3) {
            false !== et2 && (tt2(e3), v2());
          }
          function _2(e3, t3, r3) {
            if (false !== e3.visible) {
              if (e3.layers.test(t3.layers)) {
                if (e3.isLight)
                  J2.pushLight(e3), e3.castShadow && J2.pushShadow(e3);
                else if (e3.isSprite)
                  e3.frustumCulled && !Te2.intersectsSprite(e3) || J2.pushSprite(e3);
                else if (e3.isImmediateRenderObject)
                  r3 && Pe2.setFromMatrixPosition(e3.matrixWorld).applyMatrix4(Re2), Z2.push(e3, null, e3.material, Pe2.z, null);
                else if ((e3.isMesh || e3.isLine || e3.isPoints) && (e3.isSkinnedMesh && e3.skeleton.update(), !e3.frustumCulled || Te2.intersectsObject(e3))) {
                  r3 && Pe2.setFromMatrixPosition(e3.matrixWorld).applyMatrix4(Re2);
                  var i3 = He2.update(e3), n3 = e3.material;
                  if (Array.isArray(n3))
                    for (var o2 = i3.groups, a3 = 0, s2 = o2.length; a3 < s2; a3++) {
                      var c3 = o2[a3], l3 = n3[c3.materialIndex];
                      l3 && l3.visible && Z2.push(e3, i3, l3, Pe2.z, c3);
                    }
                  else
                    n3.visible && Z2.push(e3, i3, n3, Pe2.z, null);
                }
              }
              for (var u2 = e3.children, a3 = 0, s2 = u2.length; a3 < s2; a3++)
                _2(u2[a3], t3, r3);
            }
          }
          function b2(e3, t3, r3, i3) {
            for (var n3 = 0, o2 = e3.length; n3 < o2; n3++) {
              var a3 = e3[n3], s2 = a3.object, c3 = a3.geometry, l3 = void 0 === i3 ? a3.material : i3, u2 = a3.group;
              if (r3.isArrayCamera) {
                me2 = r3;
                for (var h3 = r3.cameras, d3 = 0, p2 = h3.length; d3 < p2; d3++) {
                  var f3 = h3[d3];
                  if (s2.layers.test(f3.layers)) {
                    var m3 = f3.bounds, v3 = m3.x * _e2, g2 = m3.y * be2, y3 = m3.z * _e2, x2 = m3.w * be2;
                    Oe2.viewport(ve2.set(v3, g2, y3, x2).multiplyScalar(we2)), w2(s2, t3, f3, c3, l3, u2);
                  }
                }
              } else
                me2 = null, w2(s2, t3, r3, c3, l3, u2);
            }
          }
          function w2(e3, t3, r3, i3, n3, o2) {
            if (e3.onBeforeRender(ce2, t3, r3, i3, n3, o2), J2 = We2.get(t3, me2 || r3), e3.modelViewMatrix.multiplyMatrices(r3.matrixWorldInverse, e3.matrixWorld), e3.normalMatrix.getNormalMatrix(e3.modelViewMatrix), e3.isImmediateRenderObject) {
              var a3 = e3.isMesh && e3.matrixWorld.determinant() < 0;
              Oe2.setMaterial(n3, a3);
              var s2 = E2(r3, t3.fog, n3, e3);
              pe2 = "", h2(e3, s2, n3);
            } else
              ce2.renderBufferDirect(r3, t3.fog, i3, n3, e3, o2);
            e3.onAfterRender(ce2, t3, r3, i3, n3, o2), J2 = We2.get(t3, me2 || r3);
          }
          function M2(e3, t3, r3) {
            var i3 = Fe2.get(e3), n3 = J2.state.lights, o2 = J2.state.shadowsArray, s2 = Ve2.getParameters(e3, n3.state, o2, t3, Ae2.numPlanes, Ae2.numIntersection, r3), c3 = Ve2.getProgramCode(e3, s2), u2 = i3.program, h3 = true;
            if (void 0 === u2)
              e3.addEventListener("dispose", a2);
            else if (u2.code !== c3)
              l2(e3);
            else if (i3.lightsHash !== n3.state.hash)
              Fe2.update(e3, "lightsHash", n3.state.hash), h3 = false;
            else {
              if (void 0 !== s2.shaderID)
                return;
              h3 = false;
            }
            if (h3) {
              if (s2.shaderID) {
                var d3 = ks[s2.shaderID];
                i3.shader = { name: e3.type, uniforms: Hs.clone(d3.uniforms), vertexShader: d3.vertexShader, fragmentShader: d3.fragmentShader };
              } else
                i3.shader = { name: e3.type, uniforms: e3.uniforms, vertexShader: e3.vertexShader, fragmentShader: e3.fragmentShader };
              e3.onBeforeCompile(i3.shader, ce2), u2 = Ve2.acquireProgram(e3, i3.shader, s2, c3), i3.program = u2, e3.program = u2;
            }
            var p2 = u2.getAttributes();
            if (e3.morphTargets) {
              e3.numSupportedMorphTargets = 0;
              for (var f3 = 0; f3 < ce2.maxMorphTargets; f3++)
                p2["morphTarget" + f3] >= 0 && e3.numSupportedMorphTargets++;
            }
            if (e3.morphNormals) {
              e3.numSupportedMorphNormals = 0;
              for (var f3 = 0; f3 < ce2.maxMorphNormals; f3++)
                p2["morphNormal" + f3] >= 0 && e3.numSupportedMorphNormals++;
            }
            var m3 = i3.shader.uniforms;
            (e3.isShaderMaterial || e3.isRawShaderMaterial) && true !== e3.clipping || (i3.numClippingPlanes = Ae2.numPlanes, i3.numIntersection = Ae2.numIntersection, m3.clippingPlanes = Ae2.uniform), i3.fog = t3, i3.lightsHash = n3.state.hash, e3.lights && (m3.ambientLightColor.value = n3.state.ambient, m3.directionalLights.value = n3.state.directional, m3.spotLights.value = n3.state.spot, m3.rectAreaLights.value = n3.state.rectArea, m3.pointLights.value = n3.state.point, m3.hemisphereLights.value = n3.state.hemi, m3.directionalShadowMap.value = n3.state.directionalShadowMap, m3.directionalShadowMatrix.value = n3.state.directionalShadowMatrix, m3.spotShadowMap.value = n3.state.spotShadowMap, m3.spotShadowMatrix.value = n3.state.spotShadowMatrix, m3.pointShadowMap.value = n3.state.pointShadowMap, m3.pointShadowMatrix.value = n3.state.pointShadowMatrix);
            var v3 = i3.program.getUniforms(), g2 = je.seqWithValue(v3.seq, m3);
            i3.uniformsList = g2;
          }
          function E2(e3, t3, r3, i3) {
            xe2 = 0;
            var n3 = Fe2.get(r3), o2 = J2.state.lights;
            if (Le2 && (Ce2 || e3 !== fe2)) {
              var a3 = e3 === fe2 && r3.id === de2;
              Ae2.setState(r3.clippingPlanes, r3.clipIntersection, r3.clipShadows, e3, n3, a3);
            }
            false === r3.needsUpdate && (void 0 === n3.program ? r3.needsUpdate = true : r3.fog && n3.fog !== t3 ? r3.needsUpdate = true : r3.lights && n3.lightsHash !== o2.state.hash ? r3.needsUpdate = true : void 0 === n3.numClippingPlanes || n3.numClippingPlanes === Ae2.numPlanes && n3.numIntersection === Ae2.numIntersection || (r3.needsUpdate = true)), r3.needsUpdate && (M2(r3, t3, i3), r3.needsUpdate = false);
            var s2 = false, c3 = false, l3 = false, u2 = n3.program, h3 = u2.getUniforms(), d3 = n3.shader.uniforms;
            if (Oe2.useProgram(u2.program) && (s2 = true, c3 = true, l3 = true), r3.id !== de2 && (de2 = r3.id, c3 = true), s2 || e3 !== fe2) {
              if (h3.setValue(oe2, "projectionMatrix", e3.projectionMatrix), Ie2.logarithmicDepthBuffer && h3.setValue(oe2, "logDepthBufFC", 2 / (Math.log(e3.far + 1) / Math.LN2)), fe2 !== (me2 || e3) && (fe2 = me2 || e3, c3 = true, l3 = true), r3.isShaderMaterial || r3.isMeshPhongMaterial || r3.isMeshStandardMaterial || r3.envMap) {
                var f3 = h3.map.cameraPosition;
                void 0 !== f3 && f3.setValue(oe2, Pe2.setFromMatrixPosition(e3.matrixWorld));
              }
              (r3.isMeshPhongMaterial || r3.isMeshLambertMaterial || r3.isMeshBasicMaterial || r3.isMeshStandardMaterial || r3.isShaderMaterial || r3.skinning) && h3.setValue(oe2, "viewMatrix", e3.matrixWorldInverse);
            }
            if (r3.skinning) {
              h3.setOptional(oe2, i3, "bindMatrix"), h3.setOptional(oe2, i3, "bindMatrixInverse");
              var m3 = i3.skeleton;
              if (m3) {
                var v3 = m3.bones;
                if (Ie2.floatVertexTextures) {
                  if (void 0 === m3.boneTexture) {
                    var g2 = Math.sqrt(4 * v3.length);
                    g2 = zs.ceilPowerOfTwo(g2), g2 = Math.max(g2, 4);
                    var y3 = new Float32Array(g2 * g2 * 4);
                    y3.set(m3.boneMatrices);
                    var x2 = new p(y3, g2, g2, Ja, ja);
                    x2.needsUpdate = true, m3.boneMatrices = y3, m3.boneTexture = x2, m3.boneTextureSize = g2;
                  }
                  h3.setValue(oe2, "boneTexture", m3.boneTexture), h3.setValue(oe2, "boneTextureSize", m3.boneTextureSize);
                } else
                  h3.setOptional(oe2, m3, "boneMatrices");
              }
            }
            return c3 && (h3.setValue(oe2, "toneMappingExposure", ce2.toneMappingExposure), h3.setValue(oe2, "toneMappingWhitePoint", ce2.toneMappingWhitePoint), r3.lights && z2(d3, l3), t3 && r3.fog && C2(d3, t3), r3.isMeshBasicMaterial ? S2(d3, r3) : r3.isMeshLambertMaterial ? (S2(d3, r3), R2(d3, r3)) : r3.isMeshPhongMaterial ? (S2(d3, r3), r3.isMeshToonMaterial ? D2(d3, r3) : P2(d3, r3)) : r3.isMeshStandardMaterial ? (S2(d3, r3), r3.isMeshPhysicalMaterial ? I2(d3, r3) : U2(d3, r3)) : r3.isMeshDepthMaterial ? (S2(d3, r3), O2(d3, r3)) : r3.isMeshDistanceMaterial ? (S2(d3, r3), N2(d3, r3)) : r3.isMeshNormalMaterial ? (S2(d3, r3), F2(d3, r3)) : r3.isLineBasicMaterial ? (T2(d3, r3), r3.isLineDashedMaterial && A2(d3, r3)) : r3.isPointsMaterial ? L2(d3, r3) : r3.isShadowMaterial && (d3.color.value = r3.color, d3.opacity.value = r3.opacity), void 0 !== d3.ltc_1 && (d3.ltc_1.value = Vs.LTC_1), void 0 !== d3.ltc_2 && (d3.ltc_2.value = Vs.LTC_2), je.upload(oe2, n3.uniformsList, d3, ce2)), r3.isShaderMaterial && true === r3.uniformsNeedUpdate && (je.upload(oe2, n3.uniformsList, d3, ce2), r3.uniformsNeedUpdate = false), h3.setValue(oe2, "modelViewMatrix", i3.modelViewMatrix), h3.setValue(oe2, "normalMatrix", i3.normalMatrix), h3.setValue(oe2, "modelMatrix", i3.matrixWorld), u2;
          }
          function S2(e3, t3) {
            e3.opacity.value = t3.opacity, t3.color && (e3.diffuse.value = t3.color), t3.emissive && e3.emissive.value.copy(t3.emissive).multiplyScalar(t3.emissiveIntensity), t3.map && (e3.map.value = t3.map), t3.alphaMap && (e3.alphaMap.value = t3.alphaMap), t3.specularMap && (e3.specularMap.value = t3.specularMap), t3.envMap && (e3.envMap.value = t3.envMap, e3.flipEnvMap.value = t3.envMap && t3.envMap.isCubeTexture ? -1 : 1, e3.reflectivity.value = t3.reflectivity, e3.refractionRatio.value = t3.refractionRatio, e3.maxMipLevel.value = Fe2.get(t3.envMap).__maxMipLevel), t3.lightMap && (e3.lightMap.value = t3.lightMap, e3.lightMapIntensity.value = t3.lightMapIntensity), t3.aoMap && (e3.aoMap.value = t3.aoMap, e3.aoMapIntensity.value = t3.aoMapIntensity);
            var r3;
            t3.map ? r3 = t3.map : t3.specularMap ? r3 = t3.specularMap : t3.displacementMap ? r3 = t3.displacementMap : t3.normalMap ? r3 = t3.normalMap : t3.bumpMap ? r3 = t3.bumpMap : t3.roughnessMap ? r3 = t3.roughnessMap : t3.metalnessMap ? r3 = t3.metalnessMap : t3.alphaMap ? r3 = t3.alphaMap : t3.emissiveMap && (r3 = t3.emissiveMap), void 0 !== r3 && (r3.isWebGLRenderTarget && (r3 = r3.texture), true === r3.matrixAutoUpdate && r3.updateMatrix(), e3.uvTransform.value.copy(r3.matrix));
          }
          function T2(e3, t3) {
            e3.diffuse.value = t3.color, e3.opacity.value = t3.opacity;
          }
          function A2(e3, t3) {
            e3.dashSize.value = t3.dashSize, e3.totalSize.value = t3.dashSize + t3.gapSize, e3.scale.value = t3.scale;
          }
          function L2(e3, t3) {
            e3.diffuse.value = t3.color, e3.opacity.value = t3.opacity, e3.size.value = t3.size * we2, e3.scale.value = 0.5 * be2, e3.map.value = t3.map, null !== t3.map && (true === t3.map.matrixAutoUpdate && t3.map.updateMatrix(), e3.uvTransform.value.copy(t3.map.matrix));
          }
          function C2(e3, t3) {
            e3.fogColor.value = t3.color, t3.isFog ? (e3.fogNear.value = t3.near, e3.fogFar.value = t3.far) : t3.isFogExp2 && (e3.fogDensity.value = t3.density);
          }
          function R2(e3, t3) {
            t3.emissiveMap && (e3.emissiveMap.value = t3.emissiveMap);
          }
          function P2(e3, t3) {
            e3.specular.value = t3.specular, e3.shininess.value = Math.max(t3.shininess, 1e-4), t3.emissiveMap && (e3.emissiveMap.value = t3.emissiveMap), t3.bumpMap && (e3.bumpMap.value = t3.bumpMap, e3.bumpScale.value = t3.bumpScale), t3.normalMap && (e3.normalMap.value = t3.normalMap, e3.normalScale.value.copy(t3.normalScale)), t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias);
          }
          function D2(e3, t3) {
            P2(e3, t3), t3.gradientMap && (e3.gradientMap.value = t3.gradientMap);
          }
          function U2(e3, t3) {
            e3.roughness.value = t3.roughness, e3.metalness.value = t3.metalness, t3.roughnessMap && (e3.roughnessMap.value = t3.roughnessMap), t3.metalnessMap && (e3.metalnessMap.value = t3.metalnessMap), t3.emissiveMap && (e3.emissiveMap.value = t3.emissiveMap), t3.bumpMap && (e3.bumpMap.value = t3.bumpMap, e3.bumpScale.value = t3.bumpScale), t3.normalMap && (e3.normalMap.value = t3.normalMap, e3.normalScale.value.copy(t3.normalScale)), t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias), t3.envMap && (e3.envMapIntensity.value = t3.envMapIntensity);
          }
          function I2(e3, t3) {
            e3.clearCoat.value = t3.clearCoat, e3.clearCoatRoughness.value = t3.clearCoatRoughness, U2(e3, t3);
          }
          function O2(e3, t3) {
            t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias);
          }
          function N2(e3, t3) {
            t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias), e3.referencePosition.value.copy(t3.referencePosition), e3.nearDistance.value = t3.nearDistance, e3.farDistance.value = t3.farDistance;
          }
          function F2(e3, t3) {
            t3.bumpMap && (e3.bumpMap.value = t3.bumpMap, e3.bumpScale.value = t3.bumpScale), t3.normalMap && (e3.normalMap.value = t3.normalMap, e3.normalScale.value.copy(t3.normalScale)), t3.displacementMap && (e3.displacementMap.value = t3.displacementMap, e3.displacementScale.value = t3.displacementScale, e3.displacementBias.value = t3.displacementBias);
          }
          function z2(e3, t3) {
            e3.ambientLightColor.needsUpdate = t3, e3.directionalLights.needsUpdate = t3, e3.pointLights.needsUpdate = t3, e3.spotLights.needsUpdate = t3, e3.rectAreaLights.needsUpdate = t3, e3.hemisphereLights.needsUpdate = t3;
          }
          function B2() {
            var e3 = xe2;
            return e3 >= Ie2.maxTextures && console.warn("THREE.WebGLRenderer: Trying to use " + e3 + " texture units while this GPU supports only " + Ie2.maxTextures), xe2 += 1, e3;
          }
          console.log("THREE.WebGLRenderer", Mo), e2 = e2 || {};
          var G2 = void 0 !== e2.canvas ? e2.canvas : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), H2 = void 0 !== e2.context ? e2.context : null, j2 = void 0 !== e2.alpha && e2.alpha, V2 = void 0 === e2.depth || e2.depth, k2 = void 0 === e2.stencil || e2.stencil, W2 = void 0 !== e2.antialias && e2.antialias, X2 = void 0 === e2.premultipliedAlpha || e2.premultipliedAlpha, q2 = void 0 !== e2.preserveDrawingBuffer && e2.preserveDrawingBuffer, Y2 = void 0 !== e2.powerPreference ? e2.powerPreference : "default", Z2 = null, J2 = null;
          this.domElement = G2, this.context = null, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this.gammaFactor = 2, this.gammaInput = false, this.gammaOutput = false, this.physicallyCorrectLights = false, this.toneMapping = va, this.toneMappingExposure = 1, this.toneMappingWhitePoint = 1, this.maxMorphTargets = 8, this.maxMorphNormals = 4;
          var oe2, ce2 = this, le2 = false, ue2 = null, he2 = null, de2 = -1, pe2 = "", fe2 = null, me2 = null, ve2 = new u(), ge2 = new u(), ye2 = null, xe2 = 0, _e2 = G2.width, be2 = G2.height, we2 = 1, Me2 = new u(0, 0, _e2, be2), Ee2 = new u(0, 0, _e2, be2), Se2 = false, Te2 = new g(), Ae2 = new ee(), Le2 = false, Ce2 = false, Re2 = new o(), Pe2 = new s();
          try {
            var De2 = { alpha: j2, depth: V2, stencil: k2, antialias: W2, premultipliedAlpha: X2, preserveDrawingBuffer: q2, powerPreference: Y2 };
            if (G2.addEventListener("webglcontextlost", i2, false), G2.addEventListener("webglcontextrestored", n2, false), null === (oe2 = H2 || G2.getContext("webgl", De2) || G2.getContext("experimental-webgl", De2)))
              throw null !== G2.getContext("webgl") ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
            void 0 === oe2.getShaderPrecisionFormat && (oe2.getShaderPrecisionFormat = function() {
              return { rangeMin: 1, rangeMax: 1, precision: 1 };
            });
          } catch (e3) {
            console.error("THREE.WebGLRenderer: " + e3.message);
          }
          var Ue2, Ie2, Oe2, Ne2, Fe2, ze2, Be2, Ge2, He2, Ve2, ke2, We2, Xe2, qe2, Ye2, Ze2, Je2, Ke2;
          r2();
          var Qe2 = new Et(ce2);
          this.vr = Qe2;
          var $e2 = new vt(ce2, He2, Ie2.maxTextureSize);
          this.shadowMap = $e2, this.getContext = function() {
            return oe2;
          }, this.getContextAttributes = function() {
            return oe2.getContextAttributes();
          }, this.forceContextLoss = function() {
            var e3 = Ue2.get("WEBGL_lose_context");
            e3 && e3.loseContext();
          }, this.forceContextRestore = function() {
            var e3 = Ue2.get("WEBGL_lose_context");
            e3 && e3.restoreContext();
          }, this.getPixelRatio = function() {
            return we2;
          }, this.setPixelRatio = function(e3) {
            void 0 !== e3 && (we2 = e3, this.setSize(_e2, be2, false));
          }, this.getSize = function() {
            return { width: _e2, height: be2 };
          }, this.setSize = function(e3, t3, r3) {
            var i3 = Qe2.getDevice();
            if (i3 && i3.isPresenting)
              return void console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
            _e2 = e3, be2 = t3, G2.width = e3 * we2, G2.height = t3 * we2, false !== r3 && (G2.style.width = e3 + "px", G2.style.height = t3 + "px"), this.setViewport(0, 0, e3, t3);
          }, this.getDrawingBufferSize = function() {
            return { width: _e2 * we2, height: be2 * we2 };
          }, this.setDrawingBufferSize = function(e3, t3, r3) {
            _e2 = e3, be2 = t3, we2 = r3, G2.width = e3 * r3, G2.height = t3 * r3, this.setViewport(0, 0, e3, t3);
          }, this.getCurrentViewport = function() {
            return ve2;
          }, this.setViewport = function(e3, t3, r3, i3) {
            Me2.set(e3, be2 - t3 - i3, r3, i3), Oe2.viewport(ve2.copy(Me2).multiplyScalar(we2));
          }, this.setScissor = function(e3, t3, r3, i3) {
            Ee2.set(e3, be2 - t3 - i3, r3, i3), Oe2.scissor(ge2.copy(Ee2).multiplyScalar(we2));
          }, this.setScissorTest = function(e3) {
            Oe2.setScissorTest(Se2 = e3);
          }, this.getClearColor = function() {
            return Xe2.getClearColor();
          }, this.setClearColor = function() {
            Xe2.setClearColor.apply(Xe2, arguments);
          }, this.getClearAlpha = function() {
            return Xe2.getClearAlpha();
          }, this.setClearAlpha = function() {
            Xe2.setClearAlpha.apply(Xe2, arguments);
          }, this.clear = function(e3, t3, r3) {
            var i3 = 0;
            (void 0 === e3 || e3) && (i3 |= oe2.COLOR_BUFFER_BIT), (void 0 === t3 || t3) && (i3 |= oe2.DEPTH_BUFFER_BIT), (void 0 === r3 || r3) && (i3 |= oe2.STENCIL_BUFFER_BIT), oe2.clear(i3);
          }, this.clearColor = function() {
            this.clear(true, false, false);
          }, this.clearDepth = function() {
            this.clear(false, true, false);
          }, this.clearStencil = function() {
            this.clear(false, false, true);
          }, this.clearTarget = function(e3, t3, r3, i3) {
            this.setRenderTarget(e3), this.clear(t3, r3, i3);
          }, this.dispose = function() {
            G2.removeEventListener("webglcontextlost", i2, false), G2.removeEventListener("webglcontextrestored", n2, false), ke2.dispose(), We2.dispose(), Fe2.dispose(), He2.dispose(), Qe2.dispose(), m2();
          }, this.renderBufferImmediate = function(e3, t3, r3) {
            Oe2.initAttributes();
            var i3 = Fe2.get(e3);
            e3.hasPositions && !i3.position && (i3.position = oe2.createBuffer()), e3.hasNormals && !i3.normal && (i3.normal = oe2.createBuffer()), e3.hasUvs && !i3.uv && (i3.uv = oe2.createBuffer()), e3.hasColors && !i3.color && (i3.color = oe2.createBuffer());
            var n3 = t3.getAttributes();
            if (e3.hasPositions && (oe2.bindBuffer(oe2.ARRAY_BUFFER, i3.position), oe2.bufferData(oe2.ARRAY_BUFFER, e3.positionArray, oe2.DYNAMIC_DRAW), Oe2.enableAttribute(n3.position), oe2.vertexAttribPointer(n3.position, 3, oe2.FLOAT, false, 0, 0)), e3.hasNormals) {
              if (oe2.bindBuffer(oe2.ARRAY_BUFFER, i3.normal), !r3.isMeshPhongMaterial && !r3.isMeshStandardMaterial && !r3.isMeshNormalMaterial && true === r3.flatShading)
                for (var o2 = 0, a3 = 3 * e3.count; o2 < a3; o2 += 9) {
                  var s2 = e3.normalArray, c3 = (s2[o2 + 0] + s2[o2 + 3] + s2[o2 + 6]) / 3, l3 = (s2[o2 + 1] + s2[o2 + 4] + s2[o2 + 7]) / 3, u2 = (s2[o2 + 2] + s2[o2 + 5] + s2[o2 + 8]) / 3;
                  s2[o2 + 0] = c3, s2[o2 + 1] = l3, s2[o2 + 2] = u2, s2[o2 + 3] = c3, s2[o2 + 4] = l3, s2[o2 + 5] = u2, s2[o2 + 6] = c3, s2[o2 + 7] = l3, s2[o2 + 8] = u2;
                }
              oe2.bufferData(oe2.ARRAY_BUFFER, e3.normalArray, oe2.DYNAMIC_DRAW), Oe2.enableAttribute(n3.normal), oe2.vertexAttribPointer(n3.normal, 3, oe2.FLOAT, false, 0, 0);
            }
            e3.hasUvs && r3.map && (oe2.bindBuffer(oe2.ARRAY_BUFFER, i3.uv), oe2.bufferData(oe2.ARRAY_BUFFER, e3.uvArray, oe2.DYNAMIC_DRAW), Oe2.enableAttribute(n3.uv), oe2.vertexAttribPointer(n3.uv, 2, oe2.FLOAT, false, 0, 0)), e3.hasColors && r3.vertexColors !== Uo && (oe2.bindBuffer(oe2.ARRAY_BUFFER, i3.color), oe2.bufferData(oe2.ARRAY_BUFFER, e3.colorArray, oe2.DYNAMIC_DRAW), Oe2.enableAttribute(n3.color), oe2.vertexAttribPointer(n3.color, 3, oe2.FLOAT, false, 0, 0)), Oe2.disableUnusedAttributes(), oe2.drawArrays(oe2.TRIANGLES, 0, e3.count), e3.count = 0;
          }, this.renderBufferDirect = function(e3, r3, i3, n3, o2, a3) {
            var s2 = o2.isMesh && o2.matrixWorld.determinant() < 0;
            Oe2.setMaterial(n3, s2);
            var c3 = E2(e3, r3, n3, o2), l3 = i3.id + "_" + c3.id + "_" + (true === n3.wireframe), u2 = false;
            l3 !== pe2 && (pe2 = l3, u2 = true), o2.morphTargetInfluences && (qe2.update(o2, i3, n3, c3), u2 = true);
            var h3 = i3.index, p2 = i3.attributes.position, f3 = 1;
            true === n3.wireframe && (h3 = Ge2.getWireframeAttribute(i3), f3 = 2);
            var m3, v3 = Ye2;
            null !== h3 && (m3 = Be2.get(h3), v3 = Ze2, v3.setIndex(m3)), u2 && (d2(n3, c3, i3), null !== h3 && oe2.bindBuffer(oe2.ELEMENT_ARRAY_BUFFER, m3.buffer));
            var g2 = 1 / 0;
            null !== h3 ? g2 = h3.count : void 0 !== p2 && (g2 = p2.count);
            var y3 = i3.drawRange.start * f3, x2 = i3.drawRange.count * f3, _3 = null !== a3 ? a3.start * f3 : 0, b3 = null !== a3 ? a3.count * f3 : 1 / 0, w3 = Math.max(y3, _3), M3 = Math.min(g2, y3 + x2, _3 + b3) - 1, S3 = Math.max(0, M3 - w3 + 1);
            if (0 !== S3) {
              if (o2.isMesh)
                if (true === n3.wireframe)
                  Oe2.setLineWidth(n3.wireframeLinewidth * t2()), v3.setMode(oe2.LINES);
                else
                  switch (o2.drawMode) {
                    case Ts:
                      v3.setMode(oe2.TRIANGLES);
                      break;
                    case As:
                      v3.setMode(oe2.TRIANGLE_STRIP);
                      break;
                    case Ls:
                      v3.setMode(oe2.TRIANGLE_FAN);
                  }
              else if (o2.isLine) {
                var T3 = n3.linewidth;
                void 0 === T3 && (T3 = 1), Oe2.setLineWidth(T3 * t2()), o2.isLineSegments ? v3.setMode(oe2.LINES) : o2.isLineLoop ? v3.setMode(oe2.LINE_LOOP) : v3.setMode(oe2.LINE_STRIP);
              } else
                o2.isPoints && v3.setMode(oe2.POINTS);
              i3 && i3.isInstancedBufferGeometry ? i3.maxInstancedCount > 0 && v3.renderInstances(i3, w3, S3) : v3.render(w3, S3);
            }
          }, this.compile = function(e3, t3) {
            J2 = We2.get(e3, t3), J2.init(), e3.traverse(function(e4) {
              e4.isLight && (J2.pushLight(e4), e4.castShadow && J2.pushShadow(e4));
            }), J2.setupLights(t3), e3.traverse(function(t4) {
              if (t4.material)
                if (Array.isArray(t4.material))
                  for (var r3 = 0; r3 < t4.material.length; r3++)
                    M2(t4.material[r3], e3.fog, t4);
                else
                  M2(t4.material, e3.fog, t4);
            });
          };
          var et2 = false, tt2 = null;
          this.animate = function(e3) {
            tt2 = e3, null !== tt2 ? f2() : m2();
          }, this.render = function(e3, t3, r3, i3) {
            if (!t3 || !t3.isCamera)
              return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
            if (!le2) {
              pe2 = "", de2 = -1, fe2 = null, true === e3.autoUpdate && e3.updateMatrixWorld(), null === t3.parent && t3.updateMatrixWorld(), Qe2.enabled && (t3 = Qe2.getCamera(t3)), J2 = We2.get(e3, t3), J2.init(), e3.onBeforeRender(ce2, e3, t3, r3), Re2.multiplyMatrices(t3.projectionMatrix, t3.matrixWorldInverse), Te2.setFromMatrix(Re2), Ce2 = this.localClippingEnabled, Le2 = Ae2.init(this.clippingPlanes, Ce2, t3), Z2 = ke2.get(e3, t3), Z2.init(), _2(e3, t3, ce2.sortObjects), true === ce2.sortObjects && Z2.sort(), Le2 && Ae2.beginShadows();
              var n3 = J2.state.shadowsArray;
              $e2.render(n3, e3, t3), J2.setupLights(t3), Le2 && Ae2.endShadows(), this.info.autoReset && this.info.reset(), void 0 === r3 && (r3 = null), this.setRenderTarget(r3), Xe2.render(Z2, e3, t3, i3);
              var o2 = Z2.opaque, a3 = Z2.transparent;
              if (e3.overrideMaterial) {
                var s2 = e3.overrideMaterial;
                o2.length && b2(o2, e3, t3, s2), a3.length && b2(a3, e3, t3, s2);
              } else
                o2.length && b2(o2, e3, t3), a3.length && b2(a3, e3, t3);
              var c3 = J2.state.spritesArray;
              Je2.render(c3, e3, t3), r3 && ze2.updateRenderTargetMipmap(r3), Oe2.buffers.depth.setTest(true), Oe2.buffers.depth.setMask(true), Oe2.buffers.color.setMask(true), Oe2.setPolygonOffset(false), e3.onAfterRender(ce2, e3, t3), Qe2.enabled && Qe2.submitFrame(), Z2 = null, J2 = null;
            }
          }, this.allocTextureUnit = B2, this.setTexture2D = function() {
            var e3 = false;
            return function(t3, r3) {
              t3 && t3.isWebGLRenderTarget && (e3 || (console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."), e3 = true), t3 = t3.texture), ze2.setTexture2D(t3, r3);
            };
          }(), this.setTexture = function() {
            var e3 = false;
            return function(t3, r3) {
              e3 || (console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."), e3 = true), ze2.setTexture2D(t3, r3);
            };
          }(), this.setTextureCube = function() {
            var e3 = false;
            return function(t3, r3) {
              t3 && t3.isWebGLRenderTargetCube && (e3 || (console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."), e3 = true), t3 = t3.texture), t3 && t3.isCubeTexture || Array.isArray(t3.image) && 6 === t3.image.length ? ze2.setTextureCube(t3, r3) : ze2.setTextureCubeDynamic(t3, r3);
            };
          }(), this.getRenderTarget = function() {
            return ue2;
          }, this.setRenderTarget = function(e3) {
            ue2 = e3, e3 && void 0 === Fe2.get(e3).__webglFramebuffer && ze2.setupRenderTarget(e3);
            var t3 = null, r3 = false;
            if (e3) {
              var i3 = Fe2.get(e3).__webglFramebuffer;
              e3.isWebGLRenderTargetCube ? (t3 = i3[e3.activeCubeFace], r3 = true) : t3 = i3, ve2.copy(e3.viewport), ge2.copy(e3.scissor), ye2 = e3.scissorTest;
            } else
              ve2.copy(Me2).multiplyScalar(we2), ge2.copy(Ee2).multiplyScalar(we2), ye2 = Se2;
            if (he2 !== t3 && (oe2.bindFramebuffer(oe2.FRAMEBUFFER, t3), he2 = t3), Oe2.viewport(ve2), Oe2.scissor(ge2), Oe2.setScissorTest(ye2), r3) {
              var n3 = Fe2.get(e3.texture);
              oe2.framebufferTexture2D(oe2.FRAMEBUFFER, oe2.COLOR_ATTACHMENT0, oe2.TEXTURE_CUBE_MAP_POSITIVE_X + e3.activeCubeFace, n3.__webglTexture, e3.activeMipMapLevel);
            }
          }, this.readRenderTargetPixels = function(e3, t3, r3, i3, n3, o2) {
            if (!e3 || !e3.isWebGLRenderTarget)
              return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
            var a3 = Fe2.get(e3).__webglFramebuffer;
            if (a3) {
              var s2 = false;
              a3 !== he2 && (oe2.bindFramebuffer(oe2.FRAMEBUFFER, a3), s2 = true);
              try {
                var c3 = e3.texture, l3 = c3.format, u2 = c3.type;
                if (l3 !== Ja && Ke2.convert(l3) !== oe2.getParameter(oe2.IMPLEMENTATION_COLOR_READ_FORMAT))
                  return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                if (!(u2 === Na || Ke2.convert(u2) === oe2.getParameter(oe2.IMPLEMENTATION_COLOR_READ_TYPE) || u2 === ja && (Ue2.get("OES_texture_float") || Ue2.get("WEBGL_color_buffer_float")) || u2 === Va && Ue2.get("EXT_color_buffer_half_float")))
                  return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                oe2.checkFramebufferStatus(oe2.FRAMEBUFFER) === oe2.FRAMEBUFFER_COMPLETE ? t3 >= 0 && t3 <= e3.width - i3 && r3 >= 0 && r3 <= e3.height - n3 && oe2.readPixels(t3, r3, i3, n3, Ke2.convert(l3), Ke2.convert(u2), o2) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.");
              } finally {
                s2 && oe2.bindFramebuffer(oe2.FRAMEBUFFER, he2);
              }
            }
          }, this.copyFramebufferToTexture = function(e3, t3, r3) {
            var i3 = t3.image.width, n3 = t3.image.height, o2 = Ke2.convert(t3.format);
            this.setTexture2D(t3, 0), oe2.copyTexImage2D(oe2.TEXTURE_2D, r3 || 0, o2, e3.x, e3.y, i3, n3, 0);
          }, this.copyTextureToTexture = function(e3, t3, r3, i3) {
            var n3 = t3.image.width, o2 = t3.image.height, a3 = Ke2.convert(r3.format), s2 = Ke2.convert(r3.type), c3 = t3.isDataTexture ? t3.image.data : t3.image;
            this.setTexture2D(r3, 0), oe2.texSubImage2D(oe2.TEXTURE_2D, i3 || 0, e3.x, e3.y, n3, o2, a3, s2, c3);
          };
        }
        function Tt(e2, t2) {
          this.name = "", this.color = new y(e2), this.density = void 0 !== t2 ? t2 : 25e-5;
        }
        function At(e2, t2, r2) {
          this.name = "", this.color = new y(e2), this.near = void 0 !== t2 ? t2 : 1, this.far = void 0 !== r2 ? r2 : 1e3;
        }
        function Lt() {
          w.call(this), this.type = "Scene", this.background = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = true;
        }
        function Ct(e2) {
          k.call(this), this.type = "SpriteMaterial", this.color = new y(16777215), this.map = null, this.rotation = 0, this.fog = false, this.lights = false, this.setValues(e2);
        }
        function Rt(e2) {
          w.call(this), this.type = "Sprite", this.material = void 0 !== e2 ? e2 : new Ct(), this.center = new n(0.5, 0.5);
        }
        function Pt() {
          w.call(this), this.type = "LOD", Object.defineProperties(this, { levels: { enumerable: true, value: [] } });
        }
        function Dt(e2, t2) {
          if (e2 = e2 || [], this.bones = e2.slice(0), this.boneMatrices = new Float32Array(16 * this.bones.length), void 0 === t2)
            this.calculateInverses();
          else if (this.bones.length === t2.length)
            this.boneInverses = t2.slice(0);
          else {
            console.warn("THREE.Skeleton boneInverses is the wrong length."), this.boneInverses = [];
            for (var r2 = 0, i2 = this.bones.length; r2 < i2; r2++)
              this.boneInverses.push(new o());
          }
        }
        function Ut() {
          w.call(this), this.type = "Bone";
        }
        function It(e2, t2) {
          J.call(this, e2, t2), this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new o(), this.bindMatrixInverse = new o();
          var r2 = this.initBones(), i2 = new Dt(r2);
          this.bind(i2, this.matrixWorld), this.normalizeSkinWeights();
        }
        function Ot(e2) {
          k.call(this), this.type = "LineBasicMaterial", this.color = new y(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.lights = false, this.setValues(e2);
        }
        function Nt(e2, t2, r2) {
          if (1 === r2)
            return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."), new Ft(e2, t2);
          w.call(this), this.type = "Line", this.geometry = void 0 !== e2 ? e2 : new B(), this.material = void 0 !== t2 ? t2 : new Ot({ color: 16777215 * Math.random() });
        }
        function Ft(e2, t2) {
          Nt.call(this, e2, t2), this.type = "LineSegments";
        }
        function zt(e2, t2) {
          Nt.call(this, e2, t2), this.type = "LineLoop";
        }
        function Bt(e2) {
          k.call(this), this.type = "PointsMaterial", this.color = new y(16777215), this.map = null, this.size = 1, this.sizeAttenuation = true, this.lights = false, this.setValues(e2);
        }
        function Gt(e2, t2) {
          w.call(this), this.type = "Points", this.geometry = void 0 !== e2 ? e2 : new B(), this.material = void 0 !== t2 ? t2 : new Bt({ color: 16777215 * Math.random() });
        }
        function Ht() {
          w.call(this), this.type = "Group";
        }
        function jt(e2, t2, r2, i2, n2, o2, a2, s2, c2) {
          l.call(this, e2, t2, r2, i2, n2, o2, a2, s2, c2), this.generateMipmaps = false;
        }
        function Vt(e2, t2, r2, i2, n2, o2, a2, s2, c2, u2, h2, d2) {
          l.call(this, null, o2, a2, s2, c2, u2, i2, n2, h2, d2), this.image = { width: t2, height: r2 }, this.mipmaps = e2, this.flipY = false, this.generateMipmaps = false;
        }
        function kt(e2, t2, r2, i2, n2, o2, a2, s2, c2, u2) {
          if ((u2 = void 0 !== u2 ? u2 : $a) !== $a && u2 !== es)
            throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
          void 0 === r2 && u2 === $a && (r2 = Ba), void 0 === r2 && u2 === es && (r2 = qa), l.call(this, null, i2, n2, o2, a2, s2, u2, r2, c2), this.image = { width: e2, height: t2 }, this.magFilter = void 0 !== a2 ? a2 : Ra, this.minFilter = void 0 !== s2 ? s2 : Ra, this.flipY = false, this.generateMipmaps = false;
        }
        function Wt(e2) {
          B.call(this), this.type = "WireframeGeometry";
          var t2, r2, i2, n2, o2, a2, c2, l2, u2, h2, d2 = [], p2 = [0, 0], f2 = {}, m2 = ["a", "b", "c"];
          if (e2 && e2.isGeometry) {
            var v2 = e2.faces;
            for (t2 = 0, i2 = v2.length; t2 < i2; t2++) {
              var g2 = v2[t2];
              for (r2 = 0; r2 < 3; r2++)
                c2 = g2[m2[r2]], l2 = g2[m2[(r2 + 1) % 3]], p2[0] = Math.min(c2, l2), p2[1] = Math.max(c2, l2), u2 = p2[0] + "," + p2[1], void 0 === f2[u2] && (f2[u2] = { index1: p2[0], index2: p2[1] });
            }
            for (u2 in f2)
              a2 = f2[u2], h2 = e2.vertices[a2.index1], d2.push(h2.x, h2.y, h2.z), h2 = e2.vertices[a2.index2], d2.push(h2.x, h2.y, h2.z);
          } else if (e2 && e2.isBufferGeometry) {
            var y2, x2, _2, b2, w2, M2, E2, S2;
            if (h2 = new s(), null !== e2.index) {
              for (y2 = e2.attributes.position, x2 = e2.index, _2 = e2.groups, 0 === _2.length && (_2 = [{ start: 0, count: x2.count, materialIndex: 0 }]), n2 = 0, o2 = _2.length; n2 < o2; ++n2)
                for (b2 = _2[n2], w2 = b2.start, M2 = b2.count, t2 = w2, i2 = w2 + M2; t2 < i2; t2 += 3)
                  for (r2 = 0; r2 < 3; r2++)
                    c2 = x2.getX(t2 + r2), l2 = x2.getX(t2 + (r2 + 1) % 3), p2[0] = Math.min(c2, l2), p2[1] = Math.max(c2, l2), u2 = p2[0] + "," + p2[1], void 0 === f2[u2] && (f2[u2] = { index1: p2[0], index2: p2[1] });
              for (u2 in f2)
                a2 = f2[u2], h2.fromBufferAttribute(y2, a2.index1), d2.push(h2.x, h2.y, h2.z), h2.fromBufferAttribute(y2, a2.index2), d2.push(h2.x, h2.y, h2.z);
            } else
              for (y2 = e2.attributes.position, t2 = 0, i2 = y2.count / 3; t2 < i2; t2++)
                for (r2 = 0; r2 < 3; r2++)
                  E2 = 3 * t2 + r2, h2.fromBufferAttribute(y2, E2), d2.push(h2.x, h2.y, h2.z), S2 = 3 * t2 + (r2 + 1) % 3, h2.fromBufferAttribute(y2, S2), d2.push(h2.x, h2.y, h2.z);
          }
          this.addAttribute("position", new O(d2, 3));
        }
        function Xt(e2, t2, r2) {
          T.call(this), this.type = "ParametricGeometry", this.parameters = { func: e2, slices: t2, stacks: r2 }, this.fromBufferGeometry(new qt(e2, t2, r2)), this.mergeVertices();
        }
        function qt(e2, t2, r2) {
          B.call(this), this.type = "ParametricBufferGeometry", this.parameters = { func: e2, slices: t2, stacks: r2 };
          var i2, n2, o2 = [], a2 = [], c2 = [], l2 = [], u2 = new s(), h2 = new s(), d2 = new s(), p2 = new s(), f2 = new s(), m2 = t2 + 1;
          for (i2 = 0; i2 <= r2; i2++) {
            var v2 = i2 / r2;
            for (n2 = 0; n2 <= t2; n2++) {
              var g2 = n2 / t2;
              e2(g2, v2, h2), a2.push(h2.x, h2.y, h2.z), g2 - 1e-5 >= 0 ? (e2(g2 - 1e-5, v2, d2), p2.subVectors(h2, d2)) : (e2(g2 + 1e-5, v2, d2), p2.subVectors(d2, h2)), v2 - 1e-5 >= 0 ? (e2(g2, v2 - 1e-5, d2), f2.subVectors(h2, d2)) : (e2(g2, v2 + 1e-5, d2), f2.subVectors(d2, h2)), u2.crossVectors(p2, f2).normalize(), c2.push(u2.x, u2.y, u2.z), l2.push(g2, v2);
            }
          }
          for (i2 = 0; i2 < r2; i2++)
            for (n2 = 0; n2 < t2; n2++) {
              var y2 = i2 * m2 + n2, x2 = i2 * m2 + n2 + 1, _2 = (i2 + 1) * m2 + n2 + 1, b2 = (i2 + 1) * m2 + n2;
              o2.push(y2, x2, b2), o2.push(x2, _2, b2);
            }
          this.setIndex(o2), this.addAttribute("position", new O(a2, 3)), this.addAttribute("normal", new O(c2, 3)), this.addAttribute("uv", new O(l2, 2));
        }
        function Yt(e2, t2, r2, i2) {
          T.call(this), this.type = "PolyhedronGeometry", this.parameters = { vertices: e2, indices: t2, radius: r2, detail: i2 }, this.fromBufferGeometry(new Zt(e2, t2, r2, i2)), this.mergeVertices();
        }
        function Zt(e2, t2, r2, i2) {
          function o2(e3, t3, r3, i3) {
            var n2, o3, a3 = Math.pow(2, i3), s2 = [];
            for (n2 = 0; n2 <= a3; n2++) {
              s2[n2] = [];
              var l3 = e3.clone().lerp(r3, n2 / a3), u3 = t3.clone().lerp(r3, n2 / a3), h3 = a3 - n2;
              for (o3 = 0; o3 <= h3; o3++)
                s2[n2][o3] = 0 === o3 && n2 === a3 ? l3 : l3.clone().lerp(u3, o3 / h3);
            }
            for (n2 = 0; n2 < a3; n2++)
              for (o3 = 0; o3 < 2 * (a3 - n2) - 1; o3++) {
                var d3 = Math.floor(o3 / 2);
                o3 % 2 == 0 ? (c2(s2[n2][d3 + 1]), c2(s2[n2 + 1][d3]), c2(s2[n2][d3])) : (c2(s2[n2][d3 + 1]), c2(s2[n2 + 1][d3 + 1]), c2(s2[n2 + 1][d3]));
              }
          }
          function a2() {
            for (var e3 = 0; e3 < m2.length; e3 += 6) {
              var t3 = m2[e3 + 0], r3 = m2[e3 + 2], i3 = m2[e3 + 4], n2 = Math.max(t3, r3, i3), o3 = Math.min(t3, r3, i3);
              n2 > 0.9 && o3 < 0.1 && (t3 < 0.2 && (m2[e3 + 0] += 1), r3 < 0.2 && (m2[e3 + 2] += 1), i3 < 0.2 && (m2[e3 + 4] += 1));
            }
          }
          function c2(e3) {
            f2.push(e3.x, e3.y, e3.z);
          }
          function l2(t3, r3) {
            var i3 = 3 * t3;
            r3.x = e2[i3 + 0], r3.y = e2[i3 + 1], r3.z = e2[i3 + 2];
          }
          function u2() {
            for (var e3 = new s(), t3 = new s(), r3 = new s(), i3 = new s(), o3 = new n(), a3 = new n(), c3 = new n(), l3 = 0, u3 = 0; l3 < f2.length; l3 += 9, u3 += 6) {
              e3.set(f2[l3 + 0], f2[l3 + 1], f2[l3 + 2]), t3.set(f2[l3 + 3], f2[l3 + 4], f2[l3 + 5]), r3.set(f2[l3 + 6], f2[l3 + 7], f2[l3 + 8]), o3.set(m2[u3 + 0], m2[u3 + 1]), a3.set(m2[u3 + 2], m2[u3 + 3]), c3.set(m2[u3 + 4], m2[u3 + 5]), i3.copy(e3).add(t3).add(r3).divideScalar(3);
              var p3 = d2(i3);
              h2(o3, u3 + 0, e3, p3), h2(a3, u3 + 2, t3, p3), h2(c3, u3 + 4, r3, p3);
            }
          }
          function h2(e3, t3, r3, i3) {
            i3 < 0 && 1 === e3.x && (m2[t3] = e3.x - 1), 0 === r3.x && 0 === r3.z && (m2[t3] = i3 / 2 / Math.PI + 0.5);
          }
          function d2(e3) {
            return Math.atan2(e3.z, -e3.x);
          }
          function p2(e3) {
            return Math.atan2(-e3.y, Math.sqrt(e3.x * e3.x + e3.z * e3.z));
          }
          B.call(this), this.type = "PolyhedronBufferGeometry", this.parameters = { vertices: e2, indices: t2, radius: r2, detail: i2 }, r2 = r2 || 1, i2 = i2 || 0;
          var f2 = [], m2 = [];
          !function(e3) {
            for (var r3 = new s(), i3 = new s(), n2 = new s(), a3 = 0; a3 < t2.length; a3 += 3)
              l2(t2[a3 + 0], r3), l2(t2[a3 + 1], i3), l2(t2[a3 + 2], n2), o2(r3, i3, n2, e3);
          }(i2), function(e3) {
            for (var t3 = new s(), r3 = 0; r3 < f2.length; r3 += 3)
              t3.x = f2[r3 + 0], t3.y = f2[r3 + 1], t3.z = f2[r3 + 2], t3.normalize().multiplyScalar(e3), f2[r3 + 0] = t3.x, f2[r3 + 1] = t3.y, f2[r3 + 2] = t3.z;
          }(r2), function() {
            for (var e3 = new s(), t3 = 0; t3 < f2.length; t3 += 3) {
              e3.x = f2[t3 + 0], e3.y = f2[t3 + 1], e3.z = f2[t3 + 2];
              var r3 = d2(e3) / 2 / Math.PI + 0.5, i3 = p2(e3) / Math.PI + 0.5;
              m2.push(r3, 1 - i3);
            }
            u2(), a2();
          }(), this.addAttribute("position", new O(f2, 3)), this.addAttribute("normal", new O(f2.slice(), 3)), this.addAttribute("uv", new O(m2, 2)), 0 === i2 ? this.computeVertexNormals() : this.normalizeNormals();
        }
        function Jt(e2, t2) {
          T.call(this), this.type = "TetrahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new Kt(e2, t2)), this.mergeVertices();
        }
        function Kt(e2, t2) {
          var r2 = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1], i2 = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];
          Zt.call(this, r2, i2, e2, t2), this.type = "TetrahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
        }
        function Qt(e2, t2) {
          T.call(this), this.type = "OctahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new $t(e2, t2)), this.mergeVertices();
        }
        function $t(e2, t2) {
          var r2 = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1], i2 = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];
          Zt.call(this, r2, i2, e2, t2), this.type = "OctahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
        }
        function er(e2, t2) {
          T.call(this), this.type = "IcosahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new tr(e2, t2)), this.mergeVertices();
        }
        function tr(e2, t2) {
          var r2 = (1 + Math.sqrt(5)) / 2, i2 = [-1, r2, 0, 1, r2, 0, -1, -r2, 0, 1, -r2, 0, 0, -1, r2, 0, 1, r2, 0, -1, -r2, 0, 1, -r2, r2, 0, -1, r2, 0, 1, -r2, 0, -1, -r2, 0, 1], n2 = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];
          Zt.call(this, i2, n2, e2, t2), this.type = "IcosahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
        }
        function rr(e2, t2) {
          T.call(this), this.type = "DodecahedronGeometry", this.parameters = { radius: e2, detail: t2 }, this.fromBufferGeometry(new ir(e2, t2)), this.mergeVertices();
        }
        function ir(e2, t2) {
          var r2 = (1 + Math.sqrt(5)) / 2, i2 = 1 / r2, n2 = [-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, 0, -i2, -r2, 0, -i2, r2, 0, i2, -r2, 0, i2, r2, -i2, -r2, 0, -i2, r2, 0, i2, -r2, 0, i2, r2, 0, -r2, 0, -i2, r2, 0, -i2, -r2, 0, i2, r2, 0, i2], o2 = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];
          Zt.call(this, n2, o2, e2, t2), this.type = "DodecahedronBufferGeometry", this.parameters = { radius: e2, detail: t2 };
        }
        function nr(e2, t2, r2, i2, n2, o2) {
          T.call(this), this.type = "TubeGeometry", this.parameters = { path: e2, tubularSegments: t2, radius: r2, radialSegments: i2, closed: n2 }, void 0 !== o2 && console.warn("THREE.TubeGeometry: taper has been removed.");
          var a2 = new or(e2, t2, r2, i2, n2);
          this.tangents = a2.tangents, this.normals = a2.normals, this.binormals = a2.binormals, this.fromBufferGeometry(a2), this.mergeVertices();
        }
        function or(e2, t2, r2, i2, o2) {
          function a2(n2) {
            v2 = e2.getPointAt(n2 / t2, v2);
            var o3 = u2.normals[n2], a3 = u2.binormals[n2];
            for (d2 = 0; d2 <= i2; d2++) {
              var s2 = d2 / i2 * Math.PI * 2, c3 = Math.sin(s2), l3 = -Math.cos(s2);
              f2.x = l3 * o3.x + c3 * a3.x, f2.y = l3 * o3.y + c3 * a3.y, f2.z = l3 * o3.z + c3 * a3.z, f2.normalize(), y2.push(f2.x, f2.y, f2.z), p2.x = v2.x + r2 * f2.x, p2.y = v2.y + r2 * f2.y, p2.z = v2.z + r2 * f2.z, g2.push(p2.x, p2.y, p2.z);
            }
          }
          function c2() {
            for (d2 = 1; d2 <= t2; d2++)
              for (h2 = 1; h2 <= i2; h2++) {
                var e3 = (i2 + 1) * (d2 - 1) + (h2 - 1), r3 = (i2 + 1) * d2 + (h2 - 1), n2 = (i2 + 1) * d2 + h2, o3 = (i2 + 1) * (d2 - 1) + h2;
                _2.push(e3, r3, o3), _2.push(r3, n2, o3);
              }
          }
          function l2() {
            for (h2 = 0; h2 <= t2; h2++)
              for (d2 = 0; d2 <= i2; d2++)
                m2.x = h2 / t2, m2.y = d2 / i2, x2.push(m2.x, m2.y);
          }
          B.call(this), this.type = "TubeBufferGeometry", this.parameters = { path: e2, tubularSegments: t2, radius: r2, radialSegments: i2, closed: o2 }, t2 = t2 || 64, r2 = r2 || 1, i2 = i2 || 8, o2 = o2 || false;
          var u2 = e2.computeFrenetFrames(t2, o2);
          this.tangents = u2.tangents, this.normals = u2.normals, this.binormals = u2.binormals;
          var h2, d2, p2 = new s(), f2 = new s(), m2 = new n(), v2 = new s(), g2 = [], y2 = [], x2 = [], _2 = [];
          !function() {
            for (h2 = 0; h2 < t2; h2++)
              a2(h2);
            a2(false === o2 ? t2 : 0), l2(), c2();
          }(), this.setIndex(_2), this.addAttribute("position", new O(g2, 3)), this.addAttribute("normal", new O(y2, 3)), this.addAttribute("uv", new O(x2, 2));
        }
        function ar(e2, t2, r2, i2, n2, o2, a2) {
          T.call(this), this.type = "TorusKnotGeometry", this.parameters = { radius: e2, tube: t2, tubularSegments: r2, radialSegments: i2, p: n2, q: o2 }, void 0 !== a2 && console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."), this.fromBufferGeometry(new sr(e2, t2, r2, i2, n2, o2)), this.mergeVertices();
        }
        function sr(e2, t2, r2, i2, n2, o2) {
          function a2(e3, t3, r3, i3, n3) {
            var o3 = Math.cos(e3), a3 = Math.sin(e3), s2 = r3 / t3 * e3, c3 = Math.cos(s2);
            n3.x = i3 * (2 + c3) * 0.5 * o3, n3.y = i3 * (2 + c3) * a3 * 0.5, n3.z = i3 * Math.sin(s2) * 0.5;
          }
          B.call(this), this.type = "TorusKnotBufferGeometry", this.parameters = { radius: e2, tube: t2, tubularSegments: r2, radialSegments: i2, p: n2, q: o2 }, e2 = e2 || 1, t2 = t2 || 0.4, r2 = Math.floor(r2) || 64, i2 = Math.floor(i2) || 8, n2 = n2 || 2, o2 = o2 || 3;
          var c2, l2, u2 = [], h2 = [], d2 = [], p2 = [], f2 = new s(), m2 = new s(), v2 = new s(), g2 = new s(), y2 = new s(), x2 = new s(), _2 = new s();
          for (c2 = 0; c2 <= r2; ++c2) {
            var b2 = c2 / r2 * n2 * Math.PI * 2;
            for (a2(b2, n2, o2, e2, v2), a2(b2 + 0.01, n2, o2, e2, g2), x2.subVectors(g2, v2), _2.addVectors(g2, v2), y2.crossVectors(x2, _2), _2.crossVectors(y2, x2), y2.normalize(), _2.normalize(), l2 = 0; l2 <= i2; ++l2) {
              var w2 = l2 / i2 * Math.PI * 2, M2 = -t2 * Math.cos(w2), E2 = t2 * Math.sin(w2);
              f2.x = v2.x + (M2 * _2.x + E2 * y2.x), f2.y = v2.y + (M2 * _2.y + E2 * y2.y), f2.z = v2.z + (M2 * _2.z + E2 * y2.z), h2.push(f2.x, f2.y, f2.z), m2.subVectors(f2, v2).normalize(), d2.push(m2.x, m2.y, m2.z), p2.push(c2 / r2), p2.push(l2 / i2);
            }
          }
          for (l2 = 1; l2 <= r2; l2++)
            for (c2 = 1; c2 <= i2; c2++) {
              var S2 = (i2 + 1) * (l2 - 1) + (c2 - 1), T2 = (i2 + 1) * l2 + (c2 - 1), A2 = (i2 + 1) * l2 + c2, L2 = (i2 + 1) * (l2 - 1) + c2;
              u2.push(S2, T2, L2), u2.push(T2, A2, L2);
            }
          this.setIndex(u2), this.addAttribute("position", new O(h2, 3)), this.addAttribute("normal", new O(d2, 3)), this.addAttribute("uv", new O(p2, 2));
        }
        function cr(e2, t2, r2, i2, n2) {
          T.call(this), this.type = "TorusGeometry", this.parameters = { radius: e2, tube: t2, radialSegments: r2, tubularSegments: i2, arc: n2 }, this.fromBufferGeometry(new lr(e2, t2, r2, i2, n2)), this.mergeVertices();
        }
        function lr(e2, t2, r2, i2, n2) {
          B.call(this), this.type = "TorusBufferGeometry", this.parameters = { radius: e2, tube: t2, radialSegments: r2, tubularSegments: i2, arc: n2 }, e2 = e2 || 1, t2 = t2 || 0.4, r2 = Math.floor(r2) || 8, i2 = Math.floor(i2) || 6, n2 = n2 || 2 * Math.PI;
          var o2, a2, c2 = [], l2 = [], u2 = [], h2 = [], d2 = new s(), p2 = new s(), f2 = new s();
          for (o2 = 0; o2 <= r2; o2++)
            for (a2 = 0; a2 <= i2; a2++) {
              var m2 = a2 / i2 * n2, v2 = o2 / r2 * Math.PI * 2;
              p2.x = (e2 + t2 * Math.cos(v2)) * Math.cos(m2), p2.y = (e2 + t2 * Math.cos(v2)) * Math.sin(m2), p2.z = t2 * Math.sin(v2), l2.push(p2.x, p2.y, p2.z), d2.x = e2 * Math.cos(m2), d2.y = e2 * Math.sin(m2), f2.subVectors(p2, d2).normalize(), u2.push(f2.x, f2.y, f2.z), h2.push(a2 / i2), h2.push(o2 / r2);
            }
          for (o2 = 1; o2 <= r2; o2++)
            for (a2 = 1; a2 <= i2; a2++) {
              var g2 = (i2 + 1) * o2 + a2 - 1, y2 = (i2 + 1) * (o2 - 1) + a2 - 1, x2 = (i2 + 1) * (o2 - 1) + a2, _2 = (i2 + 1) * o2 + a2;
              c2.push(g2, y2, _2), c2.push(y2, x2, _2);
            }
          this.setIndex(c2), this.addAttribute("position", new O(l2, 3)), this.addAttribute("normal", new O(u2, 3)), this.addAttribute("uv", new O(h2, 2));
        }
        function ur(e2, t2, r2, i2, n2) {
          var o2, a2;
          if (n2 === Fr(e2, t2, r2, i2) > 0)
            for (o2 = t2; o2 < r2; o2 += i2)
              a2 = Ir(o2, e2[o2], e2[o2 + 1], a2);
          else
            for (o2 = r2 - i2; o2 >= t2; o2 -= i2)
              a2 = Ir(o2, e2[o2], e2[o2 + 1], a2);
          return a2 && Lr(a2, a2.next) && (Or(a2), a2 = a2.next), a2;
        }
        function hr(e2, t2) {
          if (!e2)
            return e2;
          t2 || (t2 = e2);
          var r2, i2 = e2;
          do {
            if (r2 = false, i2.steiner || !Lr(i2, i2.next) && 0 !== Ar(i2.prev, i2, i2.next))
              i2 = i2.next;
            else {
              if (Or(i2), (i2 = t2 = i2.prev) === i2.next)
                break;
              r2 = true;
            }
          } while (r2 || i2 !== t2);
          return t2;
        }
        function dr(e2, t2, r2, i2, n2, o2, a2) {
          if (e2) {
            !a2 && o2 && br(e2, i2, n2, o2);
            for (var s2, c2, l2 = e2; e2.prev !== e2.next; )
              if (s2 = e2.prev, c2 = e2.next, o2 ? fr(e2, i2, n2, o2) : pr(e2))
                t2.push(s2.i / r2), t2.push(e2.i / r2), t2.push(c2.i / r2), Or(e2), e2 = c2.next, l2 = c2.next;
              else if ((e2 = c2) === l2) {
                a2 ? 1 === a2 ? (e2 = mr(e2, t2, r2), dr(e2, t2, r2, i2, n2, o2, 2)) : 2 === a2 && vr(e2, t2, r2, i2, n2, o2) : dr(hr(e2), t2, r2, i2, n2, o2, 1);
                break;
              }
          }
        }
        function pr(e2) {
          var t2 = e2.prev, r2 = e2, i2 = e2.next;
          if (Ar(t2, r2, i2) >= 0)
            return false;
          for (var n2 = e2.next.next; n2 !== e2.prev; ) {
            if (Sr(t2.x, t2.y, r2.x, r2.y, i2.x, i2.y, n2.x, n2.y) && Ar(n2.prev, n2, n2.next) >= 0)
              return false;
            n2 = n2.next;
          }
          return true;
        }
        function fr(e2, t2, r2, i2) {
          var n2 = e2.prev, o2 = e2, a2 = e2.next;
          if (Ar(n2, o2, a2) >= 0)
            return false;
          for (var s2 = n2.x < o2.x ? n2.x < a2.x ? n2.x : a2.x : o2.x < a2.x ? o2.x : a2.x, c2 = n2.y < o2.y ? n2.y < a2.y ? n2.y : a2.y : o2.y < a2.y ? o2.y : a2.y, l2 = n2.x > o2.x ? n2.x > a2.x ? n2.x : a2.x : o2.x > a2.x ? o2.x : a2.x, u2 = n2.y > o2.y ? n2.y > a2.y ? n2.y : a2.y : o2.y > a2.y ? o2.y : a2.y, h2 = Mr(s2, c2, t2, r2, i2), d2 = Mr(l2, u2, t2, r2, i2), p2 = e2.nextZ; p2 && p2.z <= d2; ) {
            if (p2 !== e2.prev && p2 !== e2.next && Sr(n2.x, n2.y, o2.x, o2.y, a2.x, a2.y, p2.x, p2.y) && Ar(p2.prev, p2, p2.next) >= 0)
              return false;
            p2 = p2.nextZ;
          }
          for (p2 = e2.prevZ; p2 && p2.z >= h2; ) {
            if (p2 !== e2.prev && p2 !== e2.next && Sr(n2.x, n2.y, o2.x, o2.y, a2.x, a2.y, p2.x, p2.y) && Ar(p2.prev, p2, p2.next) >= 0)
              return false;
            p2 = p2.prevZ;
          }
          return true;
        }
        function mr(e2, t2, r2) {
          var i2 = e2;
          do {
            var n2 = i2.prev, o2 = i2.next.next;
            !Lr(n2, o2) && Cr(n2, i2, i2.next, o2) && Pr(n2, o2) && Pr(o2, n2) && (t2.push(n2.i / r2), t2.push(i2.i / r2), t2.push(o2.i / r2), Or(i2), Or(i2.next), i2 = e2 = o2), i2 = i2.next;
          } while (i2 !== e2);
          return i2;
        }
        function vr(e2, t2, r2, i2, n2, o2) {
          var a2 = e2;
          do {
            for (var s2 = a2.next.next; s2 !== a2.prev; ) {
              if (a2.i !== s2.i && Tr(a2, s2)) {
                var c2 = Ur(a2, s2);
                return a2 = hr(a2, a2.next), c2 = hr(c2, c2.next), dr(a2, t2, r2, i2, n2, o2), void dr(c2, t2, r2, i2, n2, o2);
              }
              s2 = s2.next;
            }
            a2 = a2.next;
          } while (a2 !== e2);
        }
        function gr(e2, t2, r2, i2) {
          var n2, o2, a2, s2, c2, l2 = [];
          for (n2 = 0, o2 = t2.length; n2 < o2; n2++)
            a2 = t2[n2] * i2, s2 = n2 < o2 - 1 ? t2[n2 + 1] * i2 : e2.length, c2 = ur(e2, a2, s2, i2, false), c2 === c2.next && (c2.steiner = true), l2.push(Er(c2));
          for (l2.sort(yr), n2 = 0; n2 < l2.length; n2++)
            xr(l2[n2], r2), r2 = hr(r2, r2.next);
          return r2;
        }
        function yr(e2, t2) {
          return e2.x - t2.x;
        }
        function xr(e2, t2) {
          if (t2 = _r(e2, t2)) {
            var r2 = Ur(t2, e2);
            hr(r2, r2.next);
          }
        }
        function _r(e2, t2) {
          var r2, i2 = t2, n2 = e2.x, o2 = e2.y, a2 = -1 / 0;
          do {
            if (o2 <= i2.y && o2 >= i2.next.y && i2.next.y !== i2.y) {
              var s2 = i2.x + (o2 - i2.y) * (i2.next.x - i2.x) / (i2.next.y - i2.y);
              if (s2 <= n2 && s2 > a2) {
                if (a2 = s2, s2 === n2) {
                  if (o2 === i2.y)
                    return i2;
                  if (o2 === i2.next.y)
                    return i2.next;
                }
                r2 = i2.x < i2.next.x ? i2 : i2.next;
              }
            }
            i2 = i2.next;
          } while (i2 !== t2);
          if (!r2)
            return null;
          if (n2 === a2)
            return r2.prev;
          var c2, l2 = r2, u2 = r2.x, h2 = r2.y, d2 = 1 / 0;
          for (i2 = r2.next; i2 !== l2; )
            n2 >= i2.x && i2.x >= u2 && n2 !== i2.x && Sr(o2 < h2 ? n2 : a2, o2, u2, h2, o2 < h2 ? a2 : n2, o2, i2.x, i2.y) && ((c2 = Math.abs(o2 - i2.y) / (n2 - i2.x)) < d2 || c2 === d2 && i2.x > r2.x) && Pr(i2, e2) && (r2 = i2, d2 = c2), i2 = i2.next;
          return r2;
        }
        function br(e2, t2, r2, i2) {
          var n2 = e2;
          do {
            null === n2.z && (n2.z = Mr(n2.x, n2.y, t2, r2, i2)), n2.prevZ = n2.prev, n2.nextZ = n2.next, n2 = n2.next;
          } while (n2 !== e2);
          n2.prevZ.nextZ = null, n2.prevZ = null, wr(n2);
        }
        function wr(e2) {
          var t2, r2, i2, n2, o2, a2, s2, c2, l2 = 1;
          do {
            for (r2 = e2, e2 = null, o2 = null, a2 = 0; r2; ) {
              for (a2++, i2 = r2, s2 = 0, t2 = 0; t2 < l2 && (s2++, i2 = i2.nextZ); t2++)
                ;
              for (c2 = l2; s2 > 0 || c2 > 0 && i2; )
                0 !== s2 && (0 === c2 || !i2 || r2.z <= i2.z) ? (n2 = r2, r2 = r2.nextZ, s2--) : (n2 = i2, i2 = i2.nextZ, c2--), o2 ? o2.nextZ = n2 : e2 = n2, n2.prevZ = o2, o2 = n2;
              r2 = i2;
            }
            o2.nextZ = null, l2 *= 2;
          } while (a2 > 1);
          return e2;
        }
        function Mr(e2, t2, r2, i2, n2) {
          return e2 = 32767 * (e2 - r2) * n2, t2 = 32767 * (t2 - i2) * n2, e2 = 16711935 & (e2 | e2 << 8), e2 = 252645135 & (e2 | e2 << 4), e2 = 858993459 & (e2 | e2 << 2), e2 = 1431655765 & (e2 | e2 << 1), t2 = 16711935 & (t2 | t2 << 8), t2 = 252645135 & (t2 | t2 << 4), t2 = 858993459 & (t2 | t2 << 2), t2 = 1431655765 & (t2 | t2 << 1), e2 | t2 << 1;
        }
        function Er(e2) {
          var t2 = e2, r2 = e2;
          do {
            t2.x < r2.x && (r2 = t2), t2 = t2.next;
          } while (t2 !== e2);
          return r2;
        }
        function Sr(e2, t2, r2, i2, n2, o2, a2, s2) {
          return (n2 - a2) * (t2 - s2) - (e2 - a2) * (o2 - s2) >= 0 && (e2 - a2) * (i2 - s2) - (r2 - a2) * (t2 - s2) >= 0 && (r2 - a2) * (o2 - s2) - (n2 - a2) * (i2 - s2) >= 0;
        }
        function Tr(e2, t2) {
          return e2.next.i !== t2.i && e2.prev.i !== t2.i && !Rr(e2, t2) && Pr(e2, t2) && Pr(t2, e2) && Dr(e2, t2);
        }
        function Ar(e2, t2, r2) {
          return (t2.y - e2.y) * (r2.x - t2.x) - (t2.x - e2.x) * (r2.y - t2.y);
        }
        function Lr(e2, t2) {
          return e2.x === t2.x && e2.y === t2.y;
        }
        function Cr(e2, t2, r2, i2) {
          return !!(Lr(e2, t2) && Lr(r2, i2) || Lr(e2, i2) && Lr(r2, t2)) || Ar(e2, t2, r2) > 0 != Ar(e2, t2, i2) > 0 && Ar(r2, i2, e2) > 0 != Ar(r2, i2, t2) > 0;
        }
        function Rr(e2, t2) {
          var r2 = e2;
          do {
            if (r2.i !== e2.i && r2.next.i !== e2.i && r2.i !== t2.i && r2.next.i !== t2.i && Cr(r2, r2.next, e2, t2))
              return true;
            r2 = r2.next;
          } while (r2 !== e2);
          return false;
        }
        function Pr(e2, t2) {
          return Ar(e2.prev, e2, e2.next) < 0 ? Ar(e2, t2, e2.next) >= 0 && Ar(e2, e2.prev, t2) >= 0 : Ar(e2, t2, e2.prev) < 0 || Ar(e2, e2.next, t2) < 0;
        }
        function Dr(e2, t2) {
          var r2 = e2, i2 = false, n2 = (e2.x + t2.x) / 2, o2 = (e2.y + t2.y) / 2;
          do {
            r2.y > o2 != r2.next.y > o2 && r2.next.y !== r2.y && n2 < (r2.next.x - r2.x) * (o2 - r2.y) / (r2.next.y - r2.y) + r2.x && (i2 = !i2), r2 = r2.next;
          } while (r2 !== e2);
          return i2;
        }
        function Ur(e2, t2) {
          var r2 = new Nr(e2.i, e2.x, e2.y), i2 = new Nr(t2.i, t2.x, t2.y), n2 = e2.next, o2 = t2.prev;
          return e2.next = t2, t2.prev = e2, r2.next = n2, n2.prev = r2, i2.next = r2, r2.prev = i2, o2.next = i2, i2.prev = o2, i2;
        }
        function Ir(e2, t2, r2, i2) {
          var n2 = new Nr(e2, t2, r2);
          return i2 ? (n2.next = i2.next, n2.prev = i2, i2.next.prev = n2, i2.next = n2) : (n2.prev = n2, n2.next = n2), n2;
        }
        function Or(e2) {
          e2.next.prev = e2.prev, e2.prev.next = e2.next, e2.prevZ && (e2.prevZ.nextZ = e2.nextZ), e2.nextZ && (e2.nextZ.prevZ = e2.prevZ);
        }
        function Nr(e2, t2, r2) {
          this.i = e2, this.x = t2, this.y = r2, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = false;
        }
        function Fr(e2, t2, r2, i2) {
          for (var n2 = 0, o2 = t2, a2 = r2 - i2; o2 < r2; o2 += i2)
            n2 += (e2[a2] - e2[o2]) * (e2[o2 + 1] + e2[a2 + 1]), a2 = o2;
          return n2;
        }
        function zr(e2) {
          var t2 = e2.length;
          t2 > 2 && e2[t2 - 1].equals(e2[0]) && e2.pop();
        }
        function Br(e2, t2) {
          for (var r2 = 0; r2 < t2.length; r2++)
            e2.push(t2[r2].x), e2.push(t2[r2].y);
        }
        function Gr(e2, t2) {
          T.call(this), this.type = "ExtrudeGeometry", this.parameters = { shapes: e2, options: t2 }, this.fromBufferGeometry(new Hr(e2, t2)), this.mergeVertices();
        }
        function Hr(e2, t2) {
          B.call(this), this.type = "ExtrudeBufferGeometry", this.parameters = { shapes: e2, options: t2 }, e2 = Array.isArray(e2) ? e2 : [e2];
          for (var r2 = this, i2 = [], o2 = [], a2 = 0, c2 = e2.length; a2 < c2; a2++) {
            var l2 = e2[a2];
            !function(e3) {
              function a3(e4, t3, r3) {
                return t3 || console.error("THREE.ExtrudeGeometry: vec does not exist"), t3.clone().multiplyScalar(r3).add(e4);
              }
              function c3(e4, t3, r3) {
                var i3, o3, a4, s2 = e4.x - t3.x, c4 = e4.y - t3.y, l4 = r3.x - e4.x, u3 = r3.y - e4.y, h3 = s2 * s2 + c4 * c4, d3 = s2 * u3 - c4 * l4;
                if (Math.abs(d3) > Number.EPSILON) {
                  var p3 = Math.sqrt(h3), f3 = Math.sqrt(l4 * l4 + u3 * u3), m3 = t3.x - c4 / p3, v3 = t3.y + s2 / p3, g3 = r3.x - u3 / f3, y3 = r3.y + l4 / f3, x3 = ((g3 - m3) * u3 - (y3 - v3) * l4) / (s2 * u3 - c4 * l4);
                  i3 = m3 + s2 * x3 - e4.x, o3 = v3 + c4 * x3 - e4.y;
                  var _3 = i3 * i3 + o3 * o3;
                  if (_3 <= 2)
                    return new n(i3, o3);
                  a4 = Math.sqrt(_3 / 2);
                } else {
                  var b3 = false;
                  s2 > Number.EPSILON ? l4 > Number.EPSILON && (b3 = true) : s2 < -Number.EPSILON ? l4 < -Number.EPSILON && (b3 = true) : Math.sign(c4) === Math.sign(u3) && (b3 = true), b3 ? (i3 = -c4, o3 = s2, a4 = Math.sqrt(h3)) : (i3 = s2, o3 = c4, a4 = Math.sqrt(h3 / 2));
                }
                return new n(i3 / a4, o3 / a4);
              }
              function l3(e4, t3) {
                var r3, i3;
                for (Y2 = e4.length; --Y2 >= 0; ) {
                  r3 = Y2, (i3 = Y2 - 1) < 0 && (i3 = e4.length - 1);
                  var n2 = 0, o3 = w2 + 2 * A2;
                  for (n2 = 0; n2 < o3; n2++) {
                    var a4 = W2 * n2, s2 = W2 * (n2 + 1);
                    d2(t3 + r3 + a4, t3 + i3 + a4, t3 + i3 + s2, t3 + r3 + s2);
                  }
                }
              }
              function u2(e4, t3, r3) {
                _2.push(e4), _2.push(t3), _2.push(r3);
              }
              function h2(e4, t3, n2) {
                p2(e4), p2(t3), p2(n2);
                var o3 = i2.length / 3, a4 = C2.generateTopUV(r2, i2, o3 - 3, o3 - 2, o3 - 1);
                f2(a4[0]), f2(a4[1]), f2(a4[2]);
              }
              function d2(e4, t3, n2, o3) {
                p2(e4), p2(t3), p2(o3), p2(t3), p2(n2), p2(o3);
                var a4 = i2.length / 3, s2 = C2.generateSideWallUV(r2, i2, a4 - 6, a4 - 3, a4 - 2, a4 - 1);
                f2(s2[0]), f2(s2[1]), f2(s2[3]), f2(s2[1]), f2(s2[2]), f2(s2[3]);
              }
              function p2(e4) {
                i2.push(_2[3 * e4 + 0]), i2.push(_2[3 * e4 + 1]), i2.push(_2[3 * e4 + 2]);
              }
              function f2(e4) {
                o2.push(e4.x), o2.push(e4.y);
              }
              var m2, v2, g2, y2, x2, _2 = [], b2 = void 0 !== t2.curveSegments ? t2.curveSegments : 12, w2 = void 0 !== t2.steps ? t2.steps : 1, M2 = void 0 !== t2.amount ? t2.amount : 100, E2 = void 0 === t2.bevelEnabled || t2.bevelEnabled, S2 = void 0 !== t2.bevelThickness ? t2.bevelThickness : 6, T2 = void 0 !== t2.bevelSize ? t2.bevelSize : S2 - 2, A2 = void 0 !== t2.bevelSegments ? t2.bevelSegments : 3, L2 = t2.extrudePath, C2 = void 0 !== t2.UVGenerator ? t2.UVGenerator : ac, R2 = false;
              L2 && (m2 = L2.getSpacedPoints(w2), R2 = true, E2 = false, v2 = L2.computeFrenetFrames(w2, false), g2 = new s(), y2 = new s(), x2 = new s()), E2 || (A2 = 0, S2 = 0, T2 = 0);
              var P2, D2, U2, I2 = e3.extractPoints(b2), O2 = I2.shape, N2 = I2.holes;
              if (!oc.isClockWise(O2))
                for (O2 = O2.reverse(), D2 = 0, U2 = N2.length; D2 < U2; D2++)
                  P2 = N2[D2], oc.isClockWise(P2) && (N2[D2] = P2.reverse());
              var F2 = oc.triangulateShape(O2, N2), z2 = O2;
              for (D2 = 0, U2 = N2.length; D2 < U2; D2++)
                P2 = N2[D2], O2 = O2.concat(P2);
              for (var B2, G2, H2, j2, V2, k2, W2 = O2.length, X2 = F2.length, q2 = [], Y2 = 0, Z2 = z2.length, J2 = Z2 - 1, K2 = Y2 + 1; Y2 < Z2; Y2++, J2++, K2++)
                J2 === Z2 && (J2 = 0), K2 === Z2 && (K2 = 0), q2[Y2] = c3(z2[Y2], z2[J2], z2[K2]);
              var Q2, $2 = [], ee2 = q2.concat();
              for (D2 = 0, U2 = N2.length; D2 < U2; D2++) {
                for (P2 = N2[D2], Q2 = [], Y2 = 0, Z2 = P2.length, J2 = Z2 - 1, K2 = Y2 + 1; Y2 < Z2; Y2++, J2++, K2++)
                  J2 === Z2 && (J2 = 0), K2 === Z2 && (K2 = 0), Q2[Y2] = c3(P2[Y2], P2[J2], P2[K2]);
                $2.push(Q2), ee2 = ee2.concat(Q2);
              }
              for (B2 = 0; B2 < A2; B2++) {
                for (H2 = B2 / A2, j2 = S2 * Math.cos(H2 * Math.PI / 2), G2 = T2 * Math.sin(H2 * Math.PI / 2), Y2 = 0, Z2 = z2.length; Y2 < Z2; Y2++)
                  V2 = a3(z2[Y2], q2[Y2], G2), u2(V2.x, V2.y, -j2);
                for (D2 = 0, U2 = N2.length; D2 < U2; D2++)
                  for (P2 = N2[D2], Q2 = $2[D2], Y2 = 0, Z2 = P2.length; Y2 < Z2; Y2++)
                    V2 = a3(P2[Y2], Q2[Y2], G2), u2(V2.x, V2.y, -j2);
              }
              for (G2 = T2, Y2 = 0; Y2 < W2; Y2++)
                V2 = E2 ? a3(O2[Y2], ee2[Y2], G2) : O2[Y2], R2 ? (y2.copy(v2.normals[0]).multiplyScalar(V2.x), g2.copy(v2.binormals[0]).multiplyScalar(V2.y), x2.copy(m2[0]).add(y2).add(g2), u2(x2.x, x2.y, x2.z)) : u2(V2.x, V2.y, 0);
              var te2;
              for (te2 = 1; te2 <= w2; te2++)
                for (Y2 = 0; Y2 < W2; Y2++)
                  V2 = E2 ? a3(O2[Y2], ee2[Y2], G2) : O2[Y2], R2 ? (y2.copy(v2.normals[te2]).multiplyScalar(V2.x), g2.copy(v2.binormals[te2]).multiplyScalar(V2.y), x2.copy(m2[te2]).add(y2).add(g2), u2(x2.x, x2.y, x2.z)) : u2(V2.x, V2.y, M2 / w2 * te2);
              for (B2 = A2 - 1; B2 >= 0; B2--) {
                for (H2 = B2 / A2, j2 = S2 * Math.cos(H2 * Math.PI / 2), G2 = T2 * Math.sin(H2 * Math.PI / 2), Y2 = 0, Z2 = z2.length; Y2 < Z2; Y2++)
                  V2 = a3(z2[Y2], q2[Y2], G2), u2(V2.x, V2.y, M2 + j2);
                for (D2 = 0, U2 = N2.length; D2 < U2; D2++)
                  for (P2 = N2[D2], Q2 = $2[D2], Y2 = 0, Z2 = P2.length; Y2 < Z2; Y2++)
                    V2 = a3(P2[Y2], Q2[Y2], G2), R2 ? u2(V2.x, V2.y + m2[w2 - 1].y, m2[w2 - 1].x + j2) : u2(V2.x, V2.y, M2 + j2);
              }
              !function() {
                var e4 = i2.length / 3;
                if (E2) {
                  var t3 = 0, n2 = W2 * t3;
                  for (Y2 = 0; Y2 < X2; Y2++)
                    k2 = F2[Y2], h2(k2[2] + n2, k2[1] + n2, k2[0] + n2);
                  for (t3 = w2 + 2 * A2, n2 = W2 * t3, Y2 = 0; Y2 < X2; Y2++)
                    k2 = F2[Y2], h2(k2[0] + n2, k2[1] + n2, k2[2] + n2);
                } else {
                  for (Y2 = 0; Y2 < X2; Y2++)
                    k2 = F2[Y2], h2(k2[2], k2[1], k2[0]);
                  for (Y2 = 0; Y2 < X2; Y2++)
                    k2 = F2[Y2], h2(k2[0] + W2 * w2, k2[1] + W2 * w2, k2[2] + W2 * w2);
                }
                r2.addGroup(e4, i2.length / 3 - e4, 0);
              }(), function() {
                var e4 = i2.length / 3, t3 = 0;
                for (l3(z2, t3), t3 += z2.length, D2 = 0, U2 = N2.length; D2 < U2; D2++)
                  P2 = N2[D2], l3(P2, t3), t3 += P2.length;
                r2.addGroup(e4, i2.length / 3 - e4, 1);
              }();
            }(l2);
          }
          this.addAttribute("position", new O(i2, 3)), this.addAttribute("uv", new O(o2, 2)), this.computeVertexNormals();
        }
        function jr(e2, t2) {
          T.call(this), this.type = "TextGeometry", this.parameters = { text: e2, parameters: t2 }, this.fromBufferGeometry(new Vr(e2, t2)), this.mergeVertices();
        }
        function Vr(e2, t2) {
          t2 = t2 || {};
          var r2 = t2.font;
          if (!r2 || !r2.isFont)
            return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."), new T();
          var i2 = r2.generateShapes(e2, t2.size, t2.curveSegments);
          t2.amount = void 0 !== t2.height ? t2.height : 50, void 0 === t2.bevelThickness && (t2.bevelThickness = 10), void 0 === t2.bevelSize && (t2.bevelSize = 8), void 0 === t2.bevelEnabled && (t2.bevelEnabled = false), Hr.call(this, i2, t2), this.type = "TextBufferGeometry";
        }
        function kr(e2, t2, r2, i2, n2, o2, a2) {
          T.call(this), this.type = "SphereGeometry", this.parameters = { radius: e2, widthSegments: t2, heightSegments: r2, phiStart: i2, phiLength: n2, thetaStart: o2, thetaLength: a2 }, this.fromBufferGeometry(new Wr(e2, t2, r2, i2, n2, o2, a2)), this.mergeVertices();
        }
        function Wr(e2, t2, r2, i2, n2, o2, a2) {
          B.call(this), this.type = "SphereBufferGeometry", this.parameters = { radius: e2, widthSegments: t2, heightSegments: r2, phiStart: i2, phiLength: n2, thetaStart: o2, thetaLength: a2 }, e2 = e2 || 1, t2 = Math.max(3, Math.floor(t2) || 8), r2 = Math.max(2, Math.floor(r2) || 6), i2 = void 0 !== i2 ? i2 : 0, n2 = void 0 !== n2 ? n2 : 2 * Math.PI, o2 = void 0 !== o2 ? o2 : 0, a2 = void 0 !== a2 ? a2 : Math.PI;
          var c2, l2, u2 = o2 + a2, h2 = 0, d2 = [], p2 = new s(), f2 = new s(), m2 = [], v2 = [], g2 = [], y2 = [];
          for (l2 = 0; l2 <= r2; l2++) {
            var x2 = [], _2 = l2 / r2;
            for (c2 = 0; c2 <= t2; c2++) {
              var b2 = c2 / t2;
              p2.x = -e2 * Math.cos(i2 + b2 * n2) * Math.sin(o2 + _2 * a2), p2.y = e2 * Math.cos(o2 + _2 * a2), p2.z = e2 * Math.sin(i2 + b2 * n2) * Math.sin(o2 + _2 * a2), v2.push(p2.x, p2.y, p2.z), f2.set(p2.x, p2.y, p2.z).normalize(), g2.push(f2.x, f2.y, f2.z), y2.push(b2, 1 - _2), x2.push(h2++);
            }
            d2.push(x2);
          }
          for (l2 = 0; l2 < r2; l2++)
            for (c2 = 0; c2 < t2; c2++) {
              var w2 = d2[l2][c2 + 1], M2 = d2[l2][c2], E2 = d2[l2 + 1][c2], S2 = d2[l2 + 1][c2 + 1];
              (0 !== l2 || o2 > 0) && m2.push(w2, M2, S2), (l2 !== r2 - 1 || u2 < Math.PI) && m2.push(M2, E2, S2);
            }
          this.setIndex(m2), this.addAttribute("position", new O(v2, 3)), this.addAttribute("normal", new O(g2, 3)), this.addAttribute("uv", new O(y2, 2));
        }
        function Xr(e2, t2, r2, i2, n2, o2) {
          T.call(this), this.type = "RingGeometry", this.parameters = { innerRadius: e2, outerRadius: t2, thetaSegments: r2, phiSegments: i2, thetaStart: n2, thetaLength: o2 }, this.fromBufferGeometry(new qr(e2, t2, r2, i2, n2, o2)), this.mergeVertices();
        }
        function qr(e2, t2, r2, i2, o2, a2) {
          B.call(this), this.type = "RingBufferGeometry", this.parameters = { innerRadius: e2, outerRadius: t2, thetaSegments: r2, phiSegments: i2, thetaStart: o2, thetaLength: a2 }, e2 = e2 || 0.5, t2 = t2 || 1, o2 = void 0 !== o2 ? o2 : 0, a2 = void 0 !== a2 ? a2 : 2 * Math.PI, r2 = void 0 !== r2 ? Math.max(3, r2) : 8, i2 = void 0 !== i2 ? Math.max(1, i2) : 1;
          var c2, l2, u2, h2 = [], d2 = [], p2 = [], f2 = [], m2 = e2, v2 = (t2 - e2) / i2, g2 = new s(), y2 = new n();
          for (l2 = 0; l2 <= i2; l2++) {
            for (u2 = 0; u2 <= r2; u2++)
              c2 = o2 + u2 / r2 * a2, g2.x = m2 * Math.cos(c2), g2.y = m2 * Math.sin(c2), d2.push(g2.x, g2.y, g2.z), p2.push(0, 0, 1), y2.x = (g2.x / t2 + 1) / 2, y2.y = (g2.y / t2 + 1) / 2, f2.push(y2.x, y2.y);
            m2 += v2;
          }
          for (l2 = 0; l2 < i2; l2++) {
            var x2 = l2 * (r2 + 1);
            for (u2 = 0; u2 < r2; u2++) {
              c2 = u2 + x2;
              var _2 = c2, b2 = c2 + r2 + 1, w2 = c2 + r2 + 2, M2 = c2 + 1;
              h2.push(_2, b2, M2), h2.push(b2, w2, M2);
            }
          }
          this.setIndex(h2), this.addAttribute("position", new O(d2, 3)), this.addAttribute("normal", new O(p2, 3)), this.addAttribute("uv", new O(f2, 2));
        }
        function Yr(e2, t2, r2, i2) {
          T.call(this), this.type = "LatheGeometry", this.parameters = { points: e2, segments: t2, phiStart: r2, phiLength: i2 }, this.fromBufferGeometry(new Zr(e2, t2, r2, i2)), this.mergeVertices();
        }
        function Zr(e2, t2, r2, i2) {
          B.call(this), this.type = "LatheBufferGeometry", this.parameters = { points: e2, segments: t2, phiStart: r2, phiLength: i2 }, t2 = Math.floor(t2) || 12, r2 = r2 || 0, i2 = i2 || 2 * Math.PI, i2 = zs.clamp(i2, 0, 2 * Math.PI);
          var o2, a2, c2, l2 = [], u2 = [], h2 = [], d2 = 1 / t2, p2 = new s(), f2 = new n();
          for (a2 = 0; a2 <= t2; a2++) {
            var m2 = r2 + a2 * d2 * i2, v2 = Math.sin(m2), g2 = Math.cos(m2);
            for (c2 = 0; c2 <= e2.length - 1; c2++)
              p2.x = e2[c2].x * v2, p2.y = e2[c2].y, p2.z = e2[c2].x * g2, u2.push(p2.x, p2.y, p2.z), f2.x = a2 / t2, f2.y = c2 / (e2.length - 1), h2.push(f2.x, f2.y);
          }
          for (a2 = 0; a2 < t2; a2++)
            for (c2 = 0; c2 < e2.length - 1; c2++) {
              o2 = c2 + a2 * e2.length;
              var y2 = o2, x2 = o2 + e2.length, _2 = o2 + e2.length + 1, b2 = o2 + 1;
              l2.push(y2, x2, b2), l2.push(x2, _2, b2);
            }
          if (this.setIndex(l2), this.addAttribute("position", new O(u2, 3)), this.addAttribute("uv", new O(h2, 2)), this.computeVertexNormals(), i2 === 2 * Math.PI) {
            var w2 = this.attributes.normal.array, M2 = new s(), E2 = new s(), S2 = new s();
            for (o2 = t2 * e2.length * 3, a2 = 0, c2 = 0; a2 < e2.length; a2++, c2 += 3)
              M2.x = w2[c2 + 0], M2.y = w2[c2 + 1], M2.z = w2[c2 + 2], E2.x = w2[o2 + c2 + 0], E2.y = w2[o2 + c2 + 1], E2.z = w2[o2 + c2 + 2], S2.addVectors(M2, E2).normalize(), w2[c2 + 0] = w2[o2 + c2 + 0] = S2.x, w2[c2 + 1] = w2[o2 + c2 + 1] = S2.y, w2[c2 + 2] = w2[o2 + c2 + 2] = S2.z;
          }
        }
        function Jr(e2, t2) {
          T.call(this), this.type = "ShapeGeometry", "object" == typeof t2 && (console.warn("THREE.ShapeGeometry: Options parameter has been removed."), t2 = t2.curveSegments), this.parameters = { shapes: e2, curveSegments: t2 }, this.fromBufferGeometry(new Kr(e2, t2)), this.mergeVertices();
        }
        function Kr(e2, t2) {
          function r2(e3) {
            var r3, s3, l3, u2 = n2.length / 3, h2 = e3.extractPoints(t2), d2 = h2.shape, p2 = h2.holes;
            if (false === oc.isClockWise(d2))
              for (d2 = d2.reverse(), r3 = 0, s3 = p2.length; r3 < s3; r3++)
                l3 = p2[r3], true === oc.isClockWise(l3) && (p2[r3] = l3.reverse());
            var f2 = oc.triangulateShape(d2, p2);
            for (r3 = 0, s3 = p2.length; r3 < s3; r3++)
              l3 = p2[r3], d2 = d2.concat(l3);
            for (r3 = 0, s3 = d2.length; r3 < s3; r3++) {
              var m2 = d2[r3];
              n2.push(m2.x, m2.y, 0), o2.push(0, 0, 1), a2.push(m2.x, m2.y);
            }
            for (r3 = 0, s3 = f2.length; r3 < s3; r3++) {
              var v2 = f2[r3], g2 = v2[0] + u2, y2 = v2[1] + u2, x2 = v2[2] + u2;
              i2.push(g2, y2, x2), c2 += 3;
            }
          }
          B.call(this), this.type = "ShapeBufferGeometry", this.parameters = { shapes: e2, curveSegments: t2 }, t2 = t2 || 12;
          var i2 = [], n2 = [], o2 = [], a2 = [], s2 = 0, c2 = 0;
          if (false === Array.isArray(e2))
            r2(e2);
          else
            for (var l2 = 0; l2 < e2.length; l2++)
              r2(e2[l2]), this.addGroup(s2, c2, l2), s2 += c2, c2 = 0;
          this.setIndex(i2), this.addAttribute("position", new O(n2, 3)), this.addAttribute("normal", new O(o2, 3)), this.addAttribute("uv", new O(a2, 2));
        }
        function Qr(e2, t2) {
          if (t2.shapes = [], Array.isArray(e2))
            for (var r2 = 0, i2 = e2.length; r2 < i2; r2++) {
              var n2 = e2[r2];
              t2.shapes.push(n2.uuid);
            }
          else
            t2.shapes.push(e2.uuid);
          return t2;
        }
        function $r(e2, t2) {
          B.call(this), this.type = "EdgesGeometry", this.parameters = { thresholdAngle: t2 }, t2 = void 0 !== t2 ? t2 : 1;
          var r2, i2, n2, o2, a2 = [], s2 = Math.cos(zs.DEG2RAD * t2), c2 = [0, 0], l2 = {}, u2 = ["a", "b", "c"];
          e2.isBufferGeometry ? (o2 = new T(), o2.fromBufferGeometry(e2)) : o2 = e2.clone(), o2.mergeVertices(), o2.computeFaceNormals();
          for (var h2 = o2.vertices, d2 = o2.faces, p2 = 0, f2 = d2.length; p2 < f2; p2++)
            for (var m2 = d2[p2], v2 = 0; v2 < 3; v2++)
              r2 = m2[u2[v2]], i2 = m2[u2[(v2 + 1) % 3]], c2[0] = Math.min(r2, i2), c2[1] = Math.max(r2, i2), n2 = c2[0] + "," + c2[1], void 0 === l2[n2] ? l2[n2] = { index1: c2[0], index2: c2[1], face1: p2, face2: void 0 } : l2[n2].face2 = p2;
          for (n2 in l2) {
            var g2 = l2[n2];
            if (void 0 === g2.face2 || d2[g2.face1].normal.dot(d2[g2.face2].normal) <= s2) {
              var y2 = h2[g2.index1];
              a2.push(y2.x, y2.y, y2.z), y2 = h2[g2.index2], a2.push(y2.x, y2.y, y2.z);
            }
          }
          this.addAttribute("position", new O(a2, 3));
        }
        function ei(e2, t2, r2, i2, n2, o2, a2, s2) {
          T.call(this), this.type = "CylinderGeometry", this.parameters = { radiusTop: e2, radiusBottom: t2, height: r2, radialSegments: i2, heightSegments: n2, openEnded: o2, thetaStart: a2, thetaLength: s2 }, this.fromBufferGeometry(new ti(e2, t2, r2, i2, n2, o2, a2, s2)), this.mergeVertices();
        }
        function ti(e2, t2, r2, i2, o2, a2, c2, l2) {
          function u2(r3) {
            var o3, a3, u3, g3 = new n(), _2 = new s(), b2 = 0, w2 = true === r3 ? e2 : t2, M2 = true === r3 ? 1 : -1;
            for (a3 = v2, o3 = 1; o3 <= i2; o3++)
              p2.push(0, y2 * M2, 0), f2.push(0, M2, 0), m2.push(0.5, 0.5), v2++;
            for (u3 = v2, o3 = 0; o3 <= i2; o3++) {
              var E2 = o3 / i2, S2 = E2 * l2 + c2, T2 = Math.cos(S2), A2 = Math.sin(S2);
              _2.x = w2 * A2, _2.y = y2 * M2, _2.z = w2 * T2, p2.push(_2.x, _2.y, _2.z), f2.push(0, M2, 0), g3.x = 0.5 * T2 + 0.5, g3.y = 0.5 * A2 * M2 + 0.5, m2.push(g3.x, g3.y), v2++;
            }
            for (o3 = 0; o3 < i2; o3++) {
              var L2 = a3 + o3, C2 = u3 + o3;
              true === r3 ? d2.push(C2, C2 + 1, L2) : d2.push(C2 + 1, C2, L2), b2 += 3;
            }
            h2.addGroup(x2, b2, true === r3 ? 1 : 2), x2 += b2;
          }
          B.call(this), this.type = "CylinderBufferGeometry", this.parameters = { radiusTop: e2, radiusBottom: t2, height: r2, radialSegments: i2, heightSegments: o2, openEnded: a2, thetaStart: c2, thetaLength: l2 };
          var h2 = this;
          e2 = void 0 !== e2 ? e2 : 1, t2 = void 0 !== t2 ? t2 : 1, r2 = r2 || 1, i2 = Math.floor(i2) || 8, o2 = Math.floor(o2) || 1, a2 = void 0 !== a2 && a2, c2 = void 0 !== c2 ? c2 : 0, l2 = void 0 !== l2 ? l2 : 2 * Math.PI;
          var d2 = [], p2 = [], f2 = [], m2 = [], v2 = 0, g2 = [], y2 = r2 / 2, x2 = 0;
          !function() {
            var n2, a3, u3 = new s(), _2 = new s(), b2 = 0, w2 = (t2 - e2) / r2;
            for (a3 = 0; a3 <= o2; a3++) {
              var M2 = [], E2 = a3 / o2, S2 = E2 * (t2 - e2) + e2;
              for (n2 = 0; n2 <= i2; n2++) {
                var T2 = n2 / i2, A2 = T2 * l2 + c2, L2 = Math.sin(A2), C2 = Math.cos(A2);
                _2.x = S2 * L2, _2.y = -E2 * r2 + y2, _2.z = S2 * C2, p2.push(_2.x, _2.y, _2.z), u3.set(L2, w2, C2).normalize(), f2.push(u3.x, u3.y, u3.z), m2.push(T2, 1 - E2), M2.push(v2++);
              }
              g2.push(M2);
            }
            for (n2 = 0; n2 < i2; n2++)
              for (a3 = 0; a3 < o2; a3++) {
                var R2 = g2[a3][n2], P2 = g2[a3 + 1][n2], D2 = g2[a3 + 1][n2 + 1], U2 = g2[a3][n2 + 1];
                d2.push(R2, P2, U2), d2.push(P2, D2, U2), b2 += 6;
              }
            h2.addGroup(x2, b2, 0), x2 += b2;
          }(), false === a2 && (e2 > 0 && u2(true), t2 > 0 && u2(false)), this.setIndex(d2), this.addAttribute("position", new O(p2, 3)), this.addAttribute("normal", new O(f2, 3)), this.addAttribute("uv", new O(m2, 2));
        }
        function ri(e2, t2, r2, i2, n2, o2, a2) {
          ei.call(this, 0, e2, t2, r2, i2, n2, o2, a2), this.type = "ConeGeometry", this.parameters = { radius: e2, height: t2, radialSegments: r2, heightSegments: i2, openEnded: n2, thetaStart: o2, thetaLength: a2 };
        }
        function ii(e2, t2, r2, i2, n2, o2, a2) {
          ti.call(this, 0, e2, t2, r2, i2, n2, o2, a2), this.type = "ConeBufferGeometry", this.parameters = { radius: e2, height: t2, radialSegments: r2, heightSegments: i2, openEnded: n2, thetaStart: o2, thetaLength: a2 };
        }
        function ni(e2, t2, r2, i2) {
          T.call(this), this.type = "CircleGeometry", this.parameters = { radius: e2, segments: t2, thetaStart: r2, thetaLength: i2 }, this.fromBufferGeometry(new oi(e2, t2, r2, i2)), this.mergeVertices();
        }
        function oi(e2, t2, r2, i2) {
          B.call(this), this.type = "CircleBufferGeometry", this.parameters = { radius: e2, segments: t2, thetaStart: r2, thetaLength: i2 }, e2 = e2 || 1, t2 = void 0 !== t2 ? Math.max(3, t2) : 8, r2 = void 0 !== r2 ? r2 : 0, i2 = void 0 !== i2 ? i2 : 2 * Math.PI;
          var o2, a2, c2 = [], l2 = [], u2 = [], h2 = [], d2 = new s(), p2 = new n();
          for (l2.push(0, 0, 0), u2.push(0, 0, 1), h2.push(0.5, 0.5), a2 = 0, o2 = 3; a2 <= t2; a2++, o2 += 3) {
            var f2 = r2 + a2 / t2 * i2;
            d2.x = e2 * Math.cos(f2), d2.y = e2 * Math.sin(f2), l2.push(d2.x, d2.y, d2.z), u2.push(0, 0, 1), p2.x = (l2[o2] / e2 + 1) / 2, p2.y = (l2[o2 + 1] / e2 + 1) / 2, h2.push(p2.x, p2.y);
          }
          for (o2 = 1; o2 <= t2; o2++)
            c2.push(o2, o2 + 1, 0);
          this.setIndex(c2), this.addAttribute("position", new O(l2, 3)), this.addAttribute("normal", new O(u2, 3)), this.addAttribute("uv", new O(h2, 2));
        }
        function ai(e2) {
          k.call(this), this.type = "ShadowMaterial", this.color = new y(0), this.transparent = true, this.setValues(e2);
        }
        function si(e2) {
          X.call(this, e2), this.type = "RawShaderMaterial";
        }
        function ci(e2) {
          k.call(this), this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new y(16777215), this.roughness = 0.5, this.metalness = 0.5, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new y(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalScale = new n(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
        }
        function li(e2) {
          ci.call(this), this.defines = { PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.reflectivity = 0.5, this.clearCoat = 0, this.clearCoatRoughness = 0, this.setValues(e2);
        }
        function ui(e2) {
          k.call(this), this.type = "MeshPhongMaterial", this.color = new y(16777215), this.specular = new y(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new y(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalScale = new n(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = da, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
        }
        function hi(e2) {
          ui.call(this), this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.gradientMap = null, this.setValues(e2);
        }
        function di(e2) {
          k.call(this), this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalScale = new n(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
        }
        function pi(e2) {
          k.call(this), this.type = "MeshLambertMaterial", this.color = new y(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new y(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = da, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.skinning = false, this.morphTargets = false, this.morphNormals = false, this.setValues(e2);
        }
        function fi(e2) {
          Ot.call(this), this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e2);
        }
        function mi(e2, t2, r2) {
          var i2 = this, n2 = false, o2 = 0, a2 = 0, s2 = void 0;
          this.onStart = void 0, this.onLoad = e2, this.onProgress = t2, this.onError = r2, this.itemStart = function(e3) {
            a2++, false === n2 && void 0 !== i2.onStart && i2.onStart(e3, o2, a2), n2 = true;
          }, this.itemEnd = function(e3) {
            o2++, void 0 !== i2.onProgress && i2.onProgress(e3, o2, a2), o2 === a2 && (n2 = false, void 0 !== i2.onLoad && i2.onLoad());
          }, this.itemError = function(e3) {
            void 0 !== i2.onError && i2.onError(e3);
          }, this.resolveURL = function(e3) {
            return s2 ? s2(e3) : e3;
          }, this.setURLModifier = function(e3) {
            return s2 = e3, this;
          };
        }
        function vi(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function gi(e2) {
          this.manager = void 0 !== e2 ? e2 : uc, this._parser = null;
        }
        function yi(e2) {
          this.manager = void 0 !== e2 ? e2 : uc, this._parser = null;
        }
        function xi(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function _i(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function bi(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function wi() {
          this.type = "Curve", this.arcLengthDivisions = 200;
        }
        function Mi(e2, t2, r2, i2, n2, o2, a2, s2) {
          wi.call(this), this.type = "EllipseCurve", this.aX = e2 || 0, this.aY = t2 || 0, this.xRadius = r2 || 1, this.yRadius = i2 || 1, this.aStartAngle = n2 || 0, this.aEndAngle = o2 || 2 * Math.PI, this.aClockwise = a2 || false, this.aRotation = s2 || 0;
        }
        function Ei(e2, t2, r2, i2, n2, o2) {
          Mi.call(this, e2, t2, r2, r2, i2, n2, o2), this.type = "ArcCurve";
        }
        function Si() {
          function e2(e3, o2, a2, s2) {
            t2 = e3, r2 = a2, i2 = -3 * e3 + 3 * o2 - 2 * a2 - s2, n2 = 2 * e3 - 2 * o2 + a2 + s2;
          }
          var t2 = 0, r2 = 0, i2 = 0, n2 = 0;
          return { initCatmullRom: function(t3, r3, i3, n3, o2) {
            e2(r3, i3, o2 * (i3 - t3), o2 * (n3 - r3));
          }, initNonuniformCatmullRom: function(t3, r3, i3, n3, o2, a2, s2) {
            var c2 = (r3 - t3) / o2 - (i3 - t3) / (o2 + a2) + (i3 - r3) / a2, l2 = (i3 - r3) / a2 - (n3 - r3) / (a2 + s2) + (n3 - i3) / s2;
            c2 *= a2, l2 *= a2, e2(r3, i3, c2, l2);
          }, calc: function(e3) {
            var o2 = e3 * e3;
            return t2 + r2 * e3 + i2 * o2 + n2 * (o2 * e3);
          } };
        }
        function Ti(e2, t2, r2, i2) {
          wi.call(this), this.type = "CatmullRomCurve3", this.points = e2 || [], this.closed = t2 || false, this.curveType = r2 || "centripetal", this.tension = i2 || 0.5;
        }
        function Ai(e2, t2, r2, i2, n2) {
          var o2 = 0.5 * (i2 - t2), a2 = 0.5 * (n2 - r2), s2 = e2 * e2;
          return (2 * r2 - 2 * i2 + o2 + a2) * (e2 * s2) + (-3 * r2 + 3 * i2 - 2 * o2 - a2) * s2 + o2 * e2 + r2;
        }
        function Li(e2, t2) {
          var r2 = 1 - e2;
          return r2 * r2 * t2;
        }
        function Ci(e2, t2) {
          return 2 * (1 - e2) * e2 * t2;
        }
        function Ri(e2, t2) {
          return e2 * e2 * t2;
        }
        function Pi(e2, t2, r2, i2) {
          return Li(e2, t2) + Ci(e2, r2) + Ri(e2, i2);
        }
        function Di(e2, t2) {
          var r2 = 1 - e2;
          return r2 * r2 * r2 * t2;
        }
        function Ui(e2, t2) {
          var r2 = 1 - e2;
          return 3 * r2 * r2 * e2 * t2;
        }
        function Ii(e2, t2) {
          return 3 * (1 - e2) * e2 * e2 * t2;
        }
        function Oi(e2, t2) {
          return e2 * e2 * e2 * t2;
        }
        function Ni(e2, t2, r2, i2, n2) {
          return Di(e2, t2) + Ui(e2, r2) + Ii(e2, i2) + Oi(e2, n2);
        }
        function Fi(e2, t2, r2, i2) {
          wi.call(this), this.type = "CubicBezierCurve", this.v0 = e2 || new n(), this.v1 = t2 || new n(), this.v2 = r2 || new n(), this.v3 = i2 || new n();
        }
        function zi(e2, t2, r2, i2) {
          wi.call(this), this.type = "CubicBezierCurve3", this.v0 = e2 || new s(), this.v1 = t2 || new s(), this.v2 = r2 || new s(), this.v3 = i2 || new s();
        }
        function Bi(e2, t2) {
          wi.call(this), this.type = "LineCurve", this.v1 = e2 || new n(), this.v2 = t2 || new n();
        }
        function Gi(e2, t2) {
          wi.call(this), this.type = "LineCurve3", this.v1 = e2 || new s(), this.v2 = t2 || new s();
        }
        function Hi(e2, t2, r2) {
          wi.call(this), this.type = "QuadraticBezierCurve", this.v0 = e2 || new n(), this.v1 = t2 || new n(), this.v2 = r2 || new n();
        }
        function ji(e2, t2, r2) {
          wi.call(this), this.type = "QuadraticBezierCurve3", this.v0 = e2 || new s(), this.v1 = t2 || new s(), this.v2 = r2 || new s();
        }
        function Vi(e2) {
          wi.call(this), this.type = "SplineCurve", this.points = e2 || [];
        }
        function ki() {
          wi.call(this), this.type = "CurvePath", this.curves = [], this.autoClose = false;
        }
        function Wi(e2) {
          ki.call(this), this.type = "Path", this.currentPoint = new n(), e2 && this.setFromPoints(e2);
        }
        function Xi(e2) {
          Wi.call(this, e2), this.uuid = zs.generateUUID(), this.type = "Shape", this.holes = [];
        }
        function qi(e2, t2) {
          w.call(this), this.type = "Light", this.color = new y(e2), this.intensity = void 0 !== t2 ? t2 : 1, this.receiveShadow = void 0;
        }
        function Yi(e2, t2, r2) {
          qi.call(this, e2, r2), this.type = "HemisphereLight", this.castShadow = void 0, this.position.copy(w.DefaultUp), this.updateMatrix(), this.groundColor = new y(t2);
        }
        function Zi(e2) {
          this.camera = e2, this.bias = 0, this.radius = 1, this.mapSize = new n(512, 512), this.map = null, this.matrix = new o();
        }
        function Ji() {
          Zi.call(this, new wt(50, 1, 0.5, 500));
        }
        function Ki(e2, t2, r2, i2, n2, o2) {
          qi.call(this, e2, t2), this.type = "SpotLight", this.position.copy(w.DefaultUp), this.updateMatrix(), this.target = new w(), Object.defineProperty(this, "power", { get: function() {
            return this.intensity * Math.PI;
          }, set: function(e3) {
            this.intensity = e3 / Math.PI;
          } }), this.distance = void 0 !== r2 ? r2 : 0, this.angle = void 0 !== i2 ? i2 : Math.PI / 3, this.penumbra = void 0 !== n2 ? n2 : 0, this.decay = void 0 !== o2 ? o2 : 1, this.shadow = new Ji();
        }
        function Qi(e2, t2, r2, i2) {
          qi.call(this, e2, t2), this.type = "PointLight", Object.defineProperty(this, "power", { get: function() {
            return 4 * this.intensity * Math.PI;
          }, set: function(e3) {
            this.intensity = e3 / (4 * Math.PI);
          } }), this.distance = void 0 !== r2 ? r2 : 0, this.decay = void 0 !== i2 ? i2 : 1, this.shadow = new Zi(new wt(90, 1, 0.5, 500));
        }
        function $i() {
          Zi.call(this, new E(-5, 5, 5, -5, 0.5, 500));
        }
        function en(e2, t2) {
          qi.call(this, e2, t2), this.type = "DirectionalLight", this.position.copy(w.DefaultUp), this.updateMatrix(), this.target = new w(), this.shadow = new $i();
        }
        function tn(e2, t2) {
          qi.call(this, e2, t2), this.type = "AmbientLight", this.castShadow = void 0;
        }
        function rn(e2, t2, r2, i2) {
          qi.call(this, e2, t2), this.type = "RectAreaLight", this.width = void 0 !== r2 ? r2 : 10, this.height = void 0 !== i2 ? i2 : 10;
        }
        function nn(e2, t2, r2, i2) {
          fn.call(this, e2, t2, r2, i2);
        }
        function on(e2, t2, r2) {
          fn.call(this, e2, t2, r2);
        }
        function an(e2, t2, r2, i2) {
          this.parameterPositions = e2, this._cachedIndex = 0, this.resultBuffer = void 0 !== i2 ? i2 : new t2.constructor(r2), this.sampleValues = t2, this.valueSize = r2;
        }
        function sn(e2, t2, r2, i2) {
          an.call(this, e2, t2, r2, i2);
        }
        function cn(e2, t2, r2, i2) {
          fn.call(this, e2, t2, r2, i2);
        }
        function ln(e2, t2, r2, i2) {
          fn.call(this, e2, t2, r2, i2);
        }
        function un(e2, t2, r2, i2) {
          fn.call(this, e2, t2, r2, i2);
        }
        function hn(e2, t2, r2, i2) {
          an.call(this, e2, t2, r2, i2), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0;
        }
        function dn(e2, t2, r2, i2) {
          an.call(this, e2, t2, r2, i2);
        }
        function pn(e2, t2, r2, i2) {
          an.call(this, e2, t2, r2, i2);
        }
        function fn(e2, t2, r2, i2) {
          if (void 0 === e2)
            throw new Error("THREE.KeyframeTrack: track name is undefined");
          if (void 0 === t2 || 0 === t2.length)
            throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e2);
          this.name = e2, this.times = gc.convertArray(t2, this.TimeBufferType), this.values = gc.convertArray(r2, this.ValueBufferType), this.setInterpolation(i2 || this.DefaultInterpolation), this.validate(), this.optimize();
        }
        function mn(e2, t2, r2, i2) {
          fn.call(this, e2, t2, r2, i2);
        }
        function vn(e2, t2, r2) {
          this.name = e2, this.tracks = r2, this.duration = void 0 !== t2 ? t2 : -1, this.uuid = zs.generateUUID(), this.duration < 0 && this.resetDuration(), this.optimize();
        }
        function gn(e2) {
          this.manager = void 0 !== e2 ? e2 : uc, this.textures = {};
        }
        function yn(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function xn() {
        }
        function _n(e2) {
          "boolean" == typeof e2 && (console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."), e2 = void 0), this.manager = void 0 !== e2 ? e2 : uc, this.withCredentials = false;
        }
        function bn(e2) {
          this.manager = void 0 !== e2 ? e2 : uc, this.texturePath = "";
        }
        function wn(e2) {
          "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.manager = void 0 !== e2 ? e2 : uc, this.options = void 0;
        }
        function Mn() {
          this.type = "ShapePath", this.color = new y(), this.subPaths = [], this.currentPath = null;
        }
        function En(e2) {
          this.type = "Font", this.data = e2;
        }
        function Sn(e2, t2, r2, i2) {
          for (var n2 = String(e2).split(""), o2 = t2 / i2.resolution, a2 = (i2.boundingBox.yMax - i2.boundingBox.yMin + i2.underlineThickness) * o2, s2 = [], c2 = 0, l2 = 0, u2 = 0; u2 < n2.length; u2++) {
            var h2 = n2[u2];
            if ("\n" === h2)
              c2 = 0, l2 -= a2;
            else {
              var d2 = Tn(h2, r2, o2, c2, l2, i2);
              c2 += d2.offsetX, s2.push(d2.path);
            }
          }
          return s2;
        }
        function Tn(e2, t2, r2, i2, n2, o2) {
          var a2 = o2.glyphs[e2] || o2.glyphs["?"];
          if (a2) {
            var s2, c2, l2, u2, h2, d2, p2, f2, m2 = new Mn();
            if (a2.o)
              for (var v2 = a2._cachedOutline || (a2._cachedOutline = a2.o.split(" ")), g2 = 0, y2 = v2.length; g2 < y2; ) {
                var x2 = v2[g2++];
                switch (x2) {
                  case "m":
                    s2 = v2[g2++] * r2 + i2, c2 = v2[g2++] * r2 + n2, m2.moveTo(s2, c2);
                    break;
                  case "l":
                    s2 = v2[g2++] * r2 + i2, c2 = v2[g2++] * r2 + n2, m2.lineTo(s2, c2);
                    break;
                  case "q":
                    l2 = v2[g2++] * r2 + i2, u2 = v2[g2++] * r2 + n2, h2 = v2[g2++] * r2 + i2, d2 = v2[g2++] * r2 + n2, m2.quadraticCurveTo(h2, d2, l2, u2);
                    break;
                  case "b":
                    l2 = v2[g2++] * r2 + i2, u2 = v2[g2++] * r2 + n2, h2 = v2[g2++] * r2 + i2, d2 = v2[g2++] * r2 + n2, p2 = v2[g2++] * r2 + i2, f2 = v2[g2++] * r2 + n2, m2.bezierCurveTo(h2, d2, p2, f2, l2, u2);
                }
              }
            return { offsetX: a2.ha * r2, path: m2 };
          }
        }
        function An(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function Ln(e2) {
          this.manager = void 0 !== e2 ? e2 : uc;
        }
        function Cn() {
          this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new wt(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = false, this.cameraR = new wt(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = false;
        }
        function Rn(e2, t2, r2) {
          w.call(this), this.type = "CubeCamera";
          var i2 = new wt(90, 1, e2, t2);
          i2.up.set(0, -1, 0), i2.lookAt(new s(1, 0, 0)), this.add(i2);
          var n2 = new wt(90, 1, e2, t2);
          n2.up.set(0, -1, 0), n2.lookAt(new s(-1, 0, 0)), this.add(n2);
          var o2 = new wt(90, 1, e2, t2);
          o2.up.set(0, 0, 1), o2.lookAt(new s(0, 1, 0)), this.add(o2);
          var a2 = new wt(90, 1, e2, t2);
          a2.up.set(0, 0, -1), a2.lookAt(new s(0, -1, 0)), this.add(a2);
          var c2 = new wt(90, 1, e2, t2);
          c2.up.set(0, -1, 0), c2.lookAt(new s(0, 0, 1)), this.add(c2);
          var l2 = new wt(90, 1, e2, t2);
          l2.up.set(0, -1, 0), l2.lookAt(new s(0, 0, -1)), this.add(l2);
          var u2 = { format: Za, magFilter: Ua, minFilter: Ua };
          this.renderTarget = new d(r2, r2, u2), this.renderTarget.texture.name = "CubeCamera", this.update = function(e3, t3) {
            null === this.parent && this.updateMatrixWorld();
            var r3 = this.renderTarget, s2 = r3.texture.generateMipmaps;
            r3.texture.generateMipmaps = false, r3.activeCubeFace = 0, e3.render(t3, i2, r3), r3.activeCubeFace = 1, e3.render(t3, n2, r3), r3.activeCubeFace = 2, e3.render(t3, o2, r3), r3.activeCubeFace = 3, e3.render(t3, a2, r3), r3.activeCubeFace = 4, e3.render(t3, c2, r3), r3.texture.generateMipmaps = s2, r3.activeCubeFace = 5, e3.render(t3, l2, r3), e3.setRenderTarget(null);
          }, this.clear = function(e3, t3, r3, i3) {
            for (var n3 = this.renderTarget, o3 = 0; o3 < 6; o3++)
              n3.activeCubeFace = o3, e3.setRenderTarget(n3), e3.clear(t3, r3, i3);
            e3.setRenderTarget(null);
          };
        }
        function Pn() {
          w.call(this), this.type = "AudioListener", this.context = Ec.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null;
        }
        function Dn(e2) {
          w.call(this), this.type = "Audio", this.context = e2.context, this.gain = this.context.createGain(), this.gain.connect(e2.getInput()), this.autoplay = false, this.buffer = null, this.loop = false, this.startTime = 0, this.offset = 0, this.playbackRate = 1, this.isPlaying = false, this.hasPlaybackControl = true, this.sourceType = "empty", this.filters = [];
        }
        function Un(e2) {
          Dn.call(this, e2), this.panner = this.context.createPanner(), this.panner.connect(this.gain);
        }
        function In(e2, t2) {
          this.analyser = e2.context.createAnalyser(), this.analyser.fftSize = void 0 !== t2 ? t2 : 2048, this.data = new Uint8Array(this.analyser.frequencyBinCount), e2.getOutput().connect(this.analyser);
        }
        function On(e2, t2, r2) {
          this.binding = e2, this.valueSize = r2;
          var i2, n2 = Float64Array;
          switch (t2) {
            case "quaternion":
              i2 = this._slerp;
              break;
            case "string":
            case "bool":
              n2 = Array, i2 = this._select;
              break;
            default:
              i2 = this._lerp;
          }
          this.buffer = new n2(4 * r2), this._mixBufferRegion = i2, this.cumulativeWeight = 0, this.useCount = 0, this.referenceCount = 0;
        }
        function Nn(e2, t2, r2) {
          var i2 = r2 || Fn.parseTrackName(t2);
          this._targetGroup = e2, this._bindings = e2.subscribe_(t2, i2);
        }
        function Fn(e2, t2, r2) {
          this.path = t2, this.parsedPath = r2 || Fn.parseTrackName(t2), this.node = Fn.findNode(e2, this.parsedPath.nodeName) || e2, this.rootNode = e2;
        }
        function zn() {
          this.uuid = zs.generateUUID(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
          var e2 = {};
          this._indicesByUUID = e2;
          for (var t2 = 0, r2 = arguments.length; t2 !== r2; ++t2)
            e2[arguments[t2].uuid] = t2;
          this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
          var i2 = this;
          this.stats = { objects: { get total() {
            return i2._objects.length;
          }, get inUse() {
            return this.total - i2.nCachedObjects_;
          } }, get bindingsPerObject() {
            return i2._bindings.length;
          } };
        }
        function Bn(e2, t2, r2) {
          this._mixer = e2, this._clip = t2, this._localRoot = r2 || null;
          for (var i2 = t2.tracks, n2 = i2.length, o2 = new Array(n2), a2 = { endingStart: Ss, endingEnd: Ss }, s2 = 0; s2 !== n2; ++s2) {
            var c2 = i2[s2].createInterpolant(null);
            o2[s2] = c2, c2.settings = a2;
          }
          this._interpolantSettings = a2, this._interpolants = o2, this._propertyBindings = new Array(n2), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Es, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = false, this.enabled = true, this.clampWhenFinished = false, this.zeroSlopeAtStart = true, this.zeroSlopeAtEnd = true;
        }
        function Gn(e2) {
          this._root = e2, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
        }
        function Hn(e2) {
          "string" == typeof e2 && (console.warn("THREE.Uniform: Type parameter is no longer needed."), e2 = arguments[1]), this.value = e2;
        }
        function jn() {
          B.call(this), this.type = "InstancedBufferGeometry", this.maxInstancedCount = void 0;
        }
        function Vn(e2, t2, r2, i2) {
          this.data = e2, this.itemSize = t2, this.offset = r2, this.normalized = true === i2;
        }
        function kn(e2, t2) {
          this.array = e2, this.stride = t2, this.count = void 0 !== e2 ? e2.length / t2 : 0, this.dynamic = false, this.updateRange = { offset: 0, count: -1 }, this.version = 0;
        }
        function Wn(e2, t2, r2) {
          kn.call(this, e2, t2), this.meshPerAttribute = r2 || 1;
        }
        function Xn(e2, t2, r2) {
          A.call(this, e2, t2), this.meshPerAttribute = r2 || 1;
        }
        function qn(e2, t2, r2, i2) {
          this.ray = new q(e2, t2), this.near = r2 || 0, this.far = i2 || 1 / 0, this.params = { Mesh: {}, Line: {}, LOD: {}, Points: { threshold: 1 }, Sprite: {} }, Object.defineProperties(this.params, { PointCloud: { get: function() {
            return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."), this.Points;
          } } });
        }
        function Yn(e2, t2) {
          return e2.distance - t2.distance;
        }
        function Zn(e2, t2, r2, i2) {
          if (false !== e2.visible && (e2.raycast(t2, r2), true === i2))
            for (var n2 = e2.children, o2 = 0, a2 = n2.length; o2 < a2; o2++)
              Zn(n2[o2], t2, r2, true);
        }
        function Jn(e2) {
          this.autoStart = void 0 === e2 || e2, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = false;
        }
        function Kn(e2, t2, r2) {
          return this.radius = void 0 !== e2 ? e2 : 1, this.phi = void 0 !== t2 ? t2 : 0, this.theta = void 0 !== r2 ? r2 : 0, this;
        }
        function Qn(e2, t2, r2) {
          return this.radius = void 0 !== e2 ? e2 : 1, this.theta = void 0 !== t2 ? t2 : 0, this.y = void 0 !== r2 ? r2 : 0, this;
        }
        function $n(e2, t2) {
          this.min = void 0 !== e2 ? e2 : new n(1 / 0, 1 / 0), this.max = void 0 !== t2 ? t2 : new n(-1 / 0, -1 / 0);
        }
        function eo(e2) {
          w.call(this), this.material = e2, this.render = function() {
          };
        }
        function to(e2, t2, r2, i2) {
          this.object = e2, this.size = void 0 !== t2 ? t2 : 1;
          var n2 = void 0 !== r2 ? r2 : 16711680, o2 = void 0 !== i2 ? i2 : 1, a2 = 0, s2 = this.object.geometry;
          s2 && s2.isGeometry ? a2 = 3 * s2.faces.length : s2 && s2.isBufferGeometry && (a2 = s2.attributes.normal.count);
          var c2 = new B(), l2 = new O(2 * a2 * 3, 3);
          c2.addAttribute("position", l2), Ft.call(this, c2, new Ot({ color: n2, linewidth: o2 })), this.matrixAutoUpdate = false, this.update();
        }
        function ro(e2, t2) {
          w.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = t2;
          for (var r2 = new B(), i2 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1], n2 = 0, o2 = 1; n2 < 32; n2++, o2++) {
            var a2 = n2 / 32 * Math.PI * 2, s2 = o2 / 32 * Math.PI * 2;
            i2.push(Math.cos(a2), Math.sin(a2), 1, Math.cos(s2), Math.sin(s2), 1);
          }
          r2.addAttribute("position", new O(i2, 3));
          var c2 = new Ot({ fog: false });
          this.cone = new Ft(r2, c2), this.add(this.cone), this.update();
        }
        function io(e2) {
          var t2 = [];
          e2 && e2.isBone && t2.push(e2);
          for (var r2 = 0; r2 < e2.children.length; r2++)
            t2.push.apply(t2, io(e2.children[r2]));
          return t2;
        }
        function no(e2) {
          for (var t2 = io(e2), r2 = new B(), i2 = [], n2 = [], o2 = new y(0, 0, 1), a2 = new y(0, 1, 0), s2 = 0; s2 < t2.length; s2++) {
            var c2 = t2[s2];
            c2.parent && c2.parent.isBone && (i2.push(0, 0, 0), i2.push(0, 0, 0), n2.push(o2.r, o2.g, o2.b), n2.push(a2.r, a2.g, a2.b));
          }
          r2.addAttribute("position", new O(i2, 3)), r2.addAttribute("color", new O(n2, 3));
          var l2 = new Ot({ vertexColors: Oo, depthTest: false, depthWrite: false, transparent: true });
          Ft.call(this, r2, l2), this.root = e2, this.bones = t2, this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false;
        }
        function oo(e2, t2, r2) {
          this.light = e2, this.light.updateMatrixWorld(), this.color = r2;
          var i2 = new Wr(t2, 4, 2), n2 = new W({ wireframe: true, fog: false });
          J.call(this, i2, n2), this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = false, this.update();
        }
        function ao(e2, t2) {
          w.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = t2;
          var r2 = new Ot({ fog: false }), i2 = new B();
          i2.addAttribute("position", new A(new Float32Array(15), 3)), this.line = new Nt(i2, r2), this.add(this.line), this.update();
        }
        function so(e2, t2, r2) {
          w.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = r2;
          var i2 = new $t(t2);
          i2.rotateY(0.5 * Math.PI), this.material = new W({ wireframe: true, fog: false }), void 0 === this.color && (this.material.vertexColors = Oo);
          var n2 = i2.getAttribute("position"), o2 = new Float32Array(3 * n2.count);
          i2.addAttribute("color", new A(o2, 3)), this.add(new J(i2, this.material)), this.update();
        }
        function co(e2, t2, r2, i2) {
          e2 = e2 || 10, t2 = t2 || 10, r2 = new y(void 0 !== r2 ? r2 : 4473924), i2 = new y(void 0 !== i2 ? i2 : 8947848);
          for (var n2 = t2 / 2, o2 = e2 / t2, a2 = e2 / 2, s2 = [], c2 = [], l2 = 0, u2 = 0, h2 = -a2; l2 <= t2; l2++, h2 += o2) {
            s2.push(-a2, 0, h2, a2, 0, h2), s2.push(h2, 0, -a2, h2, 0, a2);
            var d2 = l2 === n2 ? r2 : i2;
            d2.toArray(c2, u2), u2 += 3, d2.toArray(c2, u2), u2 += 3, d2.toArray(c2, u2), u2 += 3, d2.toArray(c2, u2), u2 += 3;
          }
          var p2 = new B();
          p2.addAttribute("position", new O(s2, 3)), p2.addAttribute("color", new O(c2, 3));
          var f2 = new Ot({ vertexColors: Oo });
          Ft.call(this, p2, f2);
        }
        function lo(e2, t2, r2, i2, n2, o2) {
          e2 = e2 || 10, t2 = t2 || 16, r2 = r2 || 8, i2 = i2 || 64, n2 = new y(void 0 !== n2 ? n2 : 4473924), o2 = new y(void 0 !== o2 ? o2 : 8947848);
          var a2, s2, c2, l2, u2, h2, d2, p2 = [], f2 = [];
          for (l2 = 0; l2 <= t2; l2++)
            c2 = l2 / t2 * (2 * Math.PI), a2 = Math.sin(c2) * e2, s2 = Math.cos(c2) * e2, p2.push(0, 0, 0), p2.push(a2, 0, s2), d2 = 1 & l2 ? n2 : o2, f2.push(d2.r, d2.g, d2.b), f2.push(d2.r, d2.g, d2.b);
          for (l2 = 0; l2 <= r2; l2++)
            for (d2 = 1 & l2 ? n2 : o2, h2 = e2 - e2 / r2 * l2, u2 = 0; u2 < i2; u2++)
              c2 = u2 / i2 * (2 * Math.PI), a2 = Math.sin(c2) * h2, s2 = Math.cos(c2) * h2, p2.push(a2, 0, s2), f2.push(d2.r, d2.g, d2.b), c2 = (u2 + 1) / i2 * (2 * Math.PI), a2 = Math.sin(c2) * h2, s2 = Math.cos(c2) * h2, p2.push(a2, 0, s2), f2.push(d2.r, d2.g, d2.b);
          var m2 = new B();
          m2.addAttribute("position", new O(p2, 3)), m2.addAttribute("color", new O(f2, 3));
          var v2 = new Ot({ vertexColors: Oo });
          Ft.call(this, m2, v2);
        }
        function uo(e2, t2, r2, i2) {
          this.object = e2, this.size = void 0 !== t2 ? t2 : 1;
          var n2 = void 0 !== r2 ? r2 : 16776960, o2 = void 0 !== i2 ? i2 : 1, a2 = 0, s2 = this.object.geometry;
          s2 && s2.isGeometry ? a2 = s2.faces.length : console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");
          var c2 = new B(), l2 = new O(2 * a2 * 3, 3);
          c2.addAttribute("position", l2), Ft.call(this, c2, new Ot({ color: n2, linewidth: o2 })), this.matrixAutoUpdate = false, this.update();
        }
        function ho(e2, t2, r2) {
          w.call(this), this.light = e2, this.light.updateMatrixWorld(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.color = r2, void 0 === t2 && (t2 = 1);
          var i2 = new B();
          i2.addAttribute("position", new O([-t2, t2, 0, t2, t2, 0, t2, -t2, 0, -t2, -t2, 0, -t2, t2, 0], 3));
          var n2 = new Ot({ fog: false });
          this.lightPlane = new Nt(i2, n2), this.add(this.lightPlane), i2 = new B(), i2.addAttribute("position", new O([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Nt(i2, n2), this.add(this.targetLine), this.update();
        }
        function po(e2) {
          function t2(e3, t3, i3) {
            r2(e3, i3), r2(t3, i3);
          }
          function r2(e3, t3) {
            o2.push(0, 0, 0), a2.push(t3.r, t3.g, t3.b), void 0 === s2[e3] && (s2[e3] = []), s2[e3].push(o2.length / 3 - 1);
          }
          var i2 = new B(), n2 = new Ot({ color: 16777215, vertexColors: Io }), o2 = [], a2 = [], s2 = {}, c2 = new y(16755200), l2 = new y(16711680), u2 = new y(43775), h2 = new y(16777215), d2 = new y(3355443);
          t2("n1", "n2", c2), t2("n2", "n4", c2), t2("n4", "n3", c2), t2("n3", "n1", c2), t2("f1", "f2", c2), t2("f2", "f4", c2), t2("f4", "f3", c2), t2("f3", "f1", c2), t2("n1", "f1", c2), t2("n2", "f2", c2), t2("n3", "f3", c2), t2("n4", "f4", c2), t2("p", "n1", l2), t2("p", "n2", l2), t2("p", "n3", l2), t2("p", "n4", l2), t2("u1", "u2", u2), t2("u2", "u3", u2), t2("u3", "u1", u2), t2("c", "t", h2), t2("p", "c", d2), t2("cn1", "cn2", d2), t2("cn3", "cn4", d2), t2("cf1", "cf2", d2), t2("cf3", "cf4", d2), i2.addAttribute("position", new O(o2, 3)), i2.addAttribute("color", new O(a2, 3)), Ft.call(this, i2, n2), this.camera = e2, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e2.matrixWorld, this.matrixAutoUpdate = false, this.pointMap = s2, this.update();
        }
        function fo(e2, t2) {
          this.object = e2, void 0 === t2 && (t2 = 16776960);
          var r2 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), i2 = new Float32Array(24), n2 = new B();
          n2.setIndex(new A(r2, 1)), n2.addAttribute("position", new A(i2, 3)), Ft.call(this, n2, new Ot({ color: t2 })), this.matrixAutoUpdate = false, this.update();
        }
        function mo(e2, t2) {
          this.type = "Box3Helper", this.box = e2;
          var r2 = void 0 !== t2 ? t2 : 16776960, i2 = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), n2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], o2 = new B();
          o2.setIndex(new A(i2, 1)), o2.addAttribute("position", new O(n2, 3)), Ft.call(this, o2, new Ot({ color: r2 })), this.geometry.computeBoundingSphere();
        }
        function vo(e2, t2, r2) {
          this.type = "PlaneHelper", this.plane = e2, this.size = void 0 === t2 ? 1 : t2;
          var i2 = void 0 !== r2 ? r2 : 16776960, n2 = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0], o2 = new B();
          o2.addAttribute("position", new O(n2, 3)), o2.computeBoundingSphere(), Nt.call(this, o2, new Ot({ color: i2 }));
          var a2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], s2 = new B();
          s2.addAttribute("position", new O(a2, 3)), s2.computeBoundingSphere(), this.add(new J(s2, new W({ color: i2, opacity: 0.2, transparent: true, depthWrite: false })));
        }
        function go(e2, t2, r2, i2, n2, o2) {
          w.call(this), void 0 === i2 && (i2 = 16776960), void 0 === r2 && (r2 = 1), void 0 === n2 && (n2 = 0.2 * r2), void 0 === o2 && (o2 = 0.2 * n2), void 0 === Tc && (Tc = new B(), Tc.addAttribute("position", new O([0, 0, 0, 0, 1, 0], 3)), Ac = new ti(0, 0.5, 1, 5, 1), Ac.translate(0, -0.5, 0)), this.position.copy(t2), this.line = new Nt(Tc, new Ot({ color: i2 })), this.line.matrixAutoUpdate = false, this.add(this.line), this.cone = new J(Ac, new W({ color: i2 })), this.cone.matrixAutoUpdate = false, this.add(this.cone), this.setDirection(e2), this.setLength(r2, n2, o2);
        }
        function yo(e2) {
          e2 = e2 || 1;
          var t2 = [0, 0, 0, e2, 0, 0, 0, 0, 0, 0, e2, 0, 0, 0, 0, 0, 0, e2], r2 = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], i2 = new B();
          i2.addAttribute("position", new O(t2, 3)), i2.addAttribute("color", new O(r2, 3));
          var n2 = new Ot({ vertexColors: Oo });
          Ft.call(this, i2, n2);
        }
        function xo(e2) {
          console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), Ti.call(this, e2), this.type = "catmullrom", this.closed = true;
        }
        function _o(e2) {
          console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."), Ti.call(this, e2), this.type = "catmullrom";
        }
        function bo(e2) {
          console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."), Ti.call(this, e2), this.type = "catmullrom";
        }
        function wo(e2) {
          return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."), new vi(e2);
        }
        r.d(t, "_53", function() {
          return h;
        }), r.d(t, "_34", function() {
          return ks;
        }), r.d(t, "_46", function() {
          return Hs;
        }), r.d(t, "_33", function() {
          return Gs;
        }), r.d(t, "_31", function() {
          return Lt;
        }), r.d(t, "_3", function() {
          return J;
        }), r.d(t, "u", function() {
          return p;
        }), r.d(t, "_41", function() {
          return l;
        }), r.d(t, "p", function() {
          return gi;
        }), r.d(t, "_42", function() {
          return bi;
        }), r.d(t, "v", function() {
          return uc;
        }), r.d(t, "F", function() {
          return vi;
        }), r.d(t, "W", function() {
          return xn;
        }), r.d(t, "_16", function() {
          return wt;
        }), r.d(t, "_14", function() {
          return E;
        }), r.d(t, "k", function() {
          return B;
        }), r.d(t, "N", function() {
          return T;
        }), r.d(t, "E", function() {
          return S;
        }), r.d(t, "_12", function() {
          return w;
        }), r.d(t, "C", function() {
          return i;
        }), r.d(t, "_2", function() {
          return zs;
        }), r.d(t, "_39", function() {
          return Kn;
        }), r.d(t, "_49", function() {
          return s;
        }), r.d(t, "_48", function() {
          return n;
        }), r.d(t, "_18", function() {
          return a;
        }), r.d(t, "m", function() {
          return y;
        }), r.d(t, "S", function() {
          return eo;
        }), r.d(t, "_17", function() {
          return V;
        }), r.d(t, "_35", function() {
          return X;
        }), r.d(t, "_7", function() {
          return ui;
        }), r.d(t, "_6", function() {
          return pi;
        }), r.d(t, "_5", function() {
          return ft;
        }), r.d(t, "_4", function() {
          return W;
        }), r.d(t, "j", function() {
          return A;
        }), r.d(t, "Y", function() {
          return Eo;
        }), r.d(t, "L", function() {
          return Ro;
        }), r.d(t, "_9", function() {
          return No;
        }), r.d(t, "b", function() {
          return zo;
        }), r.d(t, "_27", function() {
          return Aa;
        }), r.d(t, "U", function() {
          return Ua;
        }), r.d(t, "V", function() {
          return Oa;
        }), r.d(t, "I", function() {
          return ja;
        }), r.d(t, "_22", function() {
          return Za;
        }), r.d(t, "_19", function() {
          return Ja;
        }), r.d(t, "_25", function() {
          return ts;
        }), r.d(t, "_20", function() {
          return is;
        }), r.d(t, "_21", function() {
          return ns;
        }), r.d(t, "_24", function() {
          return ls;
        }), r.d(t, "_54", function() {
          return wo;
        }), void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52)), void 0 === Number.isInteger && (Number.isInteger = function(e2) {
          return "number" == typeof e2 && isFinite(e2) && Math.floor(e2) === e2;
        }), void 0 === Math.sign && (Math.sign = function(e2) {
          return e2 < 0 ? -1 : e2 > 0 ? 1 : +e2;
        }), "name" in Function.prototype == false && Object.defineProperty(Function.prototype, "name", { get: function() {
          return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1];
        } }), void 0 === Object.assign && function() {
          Object.assign = function(e2) {
            if (void 0 === e2 || null === e2)
              throw new TypeError("Cannot convert undefined or null to object");
            for (var t2 = Object(e2), r2 = 1; r2 < arguments.length; r2++) {
              var i2 = arguments[r2];
              if (void 0 !== i2 && null !== i2)
                for (var n2 in i2)
                  Object.prototype.hasOwnProperty.call(i2, n2) && (t2[n2] = i2[n2]);
            }
            return t2;
          };
        }(), Object.assign(i.prototype, { addEventListener: function(e2, t2) {
          void 0 === this._listeners && (this._listeners = {});
          var r2 = this._listeners;
          void 0 === r2[e2] && (r2[e2] = []), -1 === r2[e2].indexOf(t2) && r2[e2].push(t2);
        }, hasEventListener: function(e2, t2) {
          if (void 0 === this._listeners)
            return false;
          var r2 = this._listeners;
          return void 0 !== r2[e2] && -1 !== r2[e2].indexOf(t2);
        }, removeEventListener: function(e2, t2) {
          if (void 0 !== this._listeners) {
            var r2 = this._listeners, i2 = r2[e2];
            if (void 0 !== i2) {
              var n2 = i2.indexOf(t2);
              -1 !== n2 && i2.splice(n2, 1);
            }
          }
        }, dispatchEvent: function(e2) {
          if (void 0 !== this._listeners) {
            var t2 = this._listeners, r2 = t2[e2.type];
            if (void 0 !== r2) {
              e2.target = this;
              for (var i2 = r2.slice(0), n2 = 0, o2 = i2.length; n2 < o2; n2++)
                i2[n2].call(this, e2);
            }
          }
        } });
        var Mo = "92", Eo = { LEFT: 0, MIDDLE: 1, RIGHT: 2 }, So = 0, To = 1, Ao = 2, Lo = 1, Co = 2, Ro = 0, Po = 1, Do = 2, Uo = 0, Io = 1, Oo = 2, No = 0, Fo = 1, zo = 2, Bo = 3, Go = 4, Ho = 5, jo = 100, Vo = 101, ko = 102, Wo = 103, Xo = 104, qo = 200, Yo = 201, Zo = 202, Jo = 203, Ko = 204, Qo = 205, $o = 206, ea = 207, ta = 208, ra = 209, ia = 210, na = 0, oa = 1, aa = 2, sa = 3, ca = 4, la = 5, ua = 6, ha = 7, da = 0, pa = 1, fa = 2, ma = 0, va = 1, ga = 2, ya = 3, xa = 4, _a = 301, ba = 302, wa = 303, Ma = 304, Ea = 305, Sa = 306, Ta = 307, Aa = 1e3, La = 1001, Ca = 1002, Ra = 1003, Pa = 1004, Da = 1005, Ua = 1006, Ia = 1007, Oa = 1008, Na = 1009, Fa = 1010, za = 1011, Ba = 1012, Ga = 1013, Ha = 1014, ja = 1015, Va = 1016, ka = 1017, Wa = 1018, Xa = 1019, qa = 1020, Ya = 1021, Za = 1022, Ja = 1023, Ka = 1024, Qa = 1025, $a = 1026, es = 1027, ts = 33776, rs = 33777, is = 33778, ns = 33779, os = 35840, as = 35841, ss = 35842, cs = 35843, ls = 36196, us = 37808, hs = 37809, ds = 37810, ps = 37811, fs = 37812, ms = 37813, vs = 37814, gs = 37815, ys = 37816, xs = 37817, _s = 37818, bs = 37819, ws = 37820, Ms = 37821, Es = 2201, Ss = 2400, Ts = 0, As = 1, Ls = 2, Cs = 3e3, Rs = 3001, Ps = 3007, Ds = 3002, Us = 3004, Is = 3005, Os = 3006, Ns = 3200, Fs = 3201, zs = { DEG2RAD: Math.PI / 180, RAD2DEG: 180 / Math.PI, generateUUID: function() {
          for (var e2 = [], t2 = 0; t2 < 256; t2++)
            e2[t2] = (t2 < 16 ? "0" : "") + t2.toString(16);
          return function() {
            var t3 = 4294967295 * Math.random() | 0, r2 = 4294967295 * Math.random() | 0, i2 = 4294967295 * Math.random() | 0, n2 = 4294967295 * Math.random() | 0;
            return (e2[255 & t3] + e2[t3 >> 8 & 255] + e2[t3 >> 16 & 255] + e2[t3 >> 24 & 255] + "-" + e2[255 & r2] + e2[r2 >> 8 & 255] + "-" + e2[r2 >> 16 & 15 | 64] + e2[r2 >> 24 & 255] + "-" + e2[63 & i2 | 128] + e2[i2 >> 8 & 255] + "-" + e2[i2 >> 16 & 255] + e2[i2 >> 24 & 255] + e2[255 & n2] + e2[n2 >> 8 & 255] + e2[n2 >> 16 & 255] + e2[n2 >> 24 & 255]).toUpperCase();
          };
        }(), clamp: function(e2, t2, r2) {
          return Math.max(t2, Math.min(r2, e2));
        }, euclideanModulo: function(e2, t2) {
          return (e2 % t2 + t2) % t2;
        }, mapLinear: function(e2, t2, r2, i2, n2) {
          return i2 + (e2 - t2) * (n2 - i2) / (r2 - t2);
        }, lerp: function(e2, t2, r2) {
          return (1 - r2) * e2 + r2 * t2;
        }, smoothstep: function(e2, t2, r2) {
          return e2 <= t2 ? 0 : e2 >= r2 ? 1 : (e2 = (e2 - t2) / (r2 - t2)) * e2 * (3 - 2 * e2);
        }, smootherstep: function(e2, t2, r2) {
          return e2 <= t2 ? 0 : e2 >= r2 ? 1 : (e2 = (e2 - t2) / (r2 - t2)) * e2 * e2 * (e2 * (6 * e2 - 15) + 10);
        }, randInt: function(e2, t2) {
          return e2 + Math.floor(Math.random() * (t2 - e2 + 1));
        }, randFloat: function(e2, t2) {
          return e2 + Math.random() * (t2 - e2);
        }, randFloatSpread: function(e2) {
          return e2 * (0.5 - Math.random());
        }, degToRad: function(e2) {
          return e2 * zs.DEG2RAD;
        }, radToDeg: function(e2) {
          return e2 * zs.RAD2DEG;
        }, isPowerOfTwo: function(e2) {
          return 0 == (e2 & e2 - 1) && 0 !== e2;
        }, ceilPowerOfTwo: function(e2) {
          return Math.pow(2, Math.ceil(Math.log(e2) / Math.LN2));
        }, floorPowerOfTwo: function(e2) {
          return Math.pow(2, Math.floor(Math.log(e2) / Math.LN2));
        } };
        Object.defineProperties(n.prototype, { width: { get: function() {
          return this.x;
        }, set: function(e2) {
          this.x = e2;
        } }, height: { get: function() {
          return this.y;
        }, set: function(e2) {
          this.y = e2;
        } } }), Object.assign(n.prototype, { isVector2: true, set: function(e2, t2) {
          return this.x = e2, this.y = t2, this;
        }, setScalar: function(e2) {
          return this.x = e2, this.y = e2, this;
        }, setX: function(e2) {
          return this.x = e2, this;
        }, setY: function(e2) {
          return this.y = e2, this;
        }, setComponent: function(e2, t2) {
          switch (e2) {
            case 0:
              this.x = t2;
              break;
            case 1:
              this.y = t2;
              break;
            default:
              throw new Error("index is out of range: " + e2);
          }
          return this;
        }, getComponent: function(e2) {
          switch (e2) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            default:
              throw new Error("index is out of range: " + e2);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y);
        }, copy: function(e2) {
          return this.x = e2.x, this.y = e2.y, this;
        }, add: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this);
        }, addScalar: function(e2) {
          return this.x += e2, this.y += e2, this;
        }, addVectors: function(e2, t2) {
          return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this;
        }, addScaledVector: function(e2, t2) {
          return this.x += e2.x * t2, this.y += e2.y * t2, this;
        }, sub: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this);
        }, subScalar: function(e2) {
          return this.x -= e2, this.y -= e2, this;
        }, subVectors: function(e2, t2) {
          return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this;
        }, multiply: function(e2) {
          return this.x *= e2.x, this.y *= e2.y, this;
        }, multiplyScalar: function(e2) {
          return this.x *= e2, this.y *= e2, this;
        }, divide: function(e2) {
          return this.x /= e2.x, this.y /= e2.y, this;
        }, divideScalar: function(e2) {
          return this.multiplyScalar(1 / e2);
        }, applyMatrix3: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = e2.elements;
          return this.x = i2[0] * t2 + i2[3] * r2 + i2[6], this.y = i2[1] * t2 + i2[4] * r2 + i2[7], this;
        }, min: function(e2) {
          return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this;
        }, max: function(e2) {
          return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this;
        }, clamp: function(e2, t2) {
          return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this;
        }, clampScalar: function() {
          var e2 = new n(), t2 = new n();
          return function(r2, i2) {
            return e2.set(r2, r2), t2.set(i2, i2), this.clamp(e2, t2);
          };
        }(), clampLength: function(e2, t2) {
          var r2 = this.length();
          return this.divideScalar(r2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, r2)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this;
        }, dot: function(e2) {
          return this.x * e2.x + this.y * e2.y;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, angle: function() {
          var e2 = Math.atan2(this.y, this.x);
          return e2 < 0 && (e2 += 2 * Math.PI), e2;
        }, distanceTo: function(e2) {
          return Math.sqrt(this.distanceToSquared(e2));
        }, distanceToSquared: function(e2) {
          var t2 = this.x - e2.x, r2 = this.y - e2.y;
          return t2 * t2 + r2 * r2;
        }, manhattanDistanceTo: function(e2) {
          return Math.abs(this.x - e2.x) + Math.abs(this.y - e2.y);
        }, setLength: function(e2) {
          return this.normalize().multiplyScalar(e2);
        }, lerp: function(e2, t2) {
          return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this;
        }, lerpVectors: function(e2, t2, r2) {
          return this.subVectors(t2, e2).multiplyScalar(r2).add(e2);
        }, equals: function(e2) {
          return e2.x === this.x && e2.y === this.y;
        }, fromArray: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2;
        }, fromBufferAttribute: function(e2, t2, r2) {
          return void 0 !== r2 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this;
        }, rotateAround: function(e2, t2) {
          var r2 = Math.cos(t2), i2 = Math.sin(t2), n2 = this.x - e2.x, o2 = this.y - e2.y;
          return this.x = n2 * r2 - o2 * i2 + e2.x, this.y = n2 * i2 + o2 * r2 + e2.y, this;
        } }), Object.assign(o.prototype, { isMatrix4: true, set: function(e2, t2, r2, i2, n2, o2, a2, s2, c2, l2, u2, h2, d2, p2, f2, m2) {
          var v2 = this.elements;
          return v2[0] = e2, v2[4] = t2, v2[8] = r2, v2[12] = i2, v2[1] = n2, v2[5] = o2, v2[9] = a2, v2[13] = s2, v2[2] = c2, v2[6] = l2, v2[10] = u2, v2[14] = h2, v2[3] = d2, v2[7] = p2, v2[11] = f2, v2[15] = m2, this;
        }, identity: function() {
          return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, clone: function() {
          return new o().fromArray(this.elements);
        }, copy: function(e2) {
          var t2 = this.elements, r2 = e2.elements;
          return t2[0] = r2[0], t2[1] = r2[1], t2[2] = r2[2], t2[3] = r2[3], t2[4] = r2[4], t2[5] = r2[5], t2[6] = r2[6], t2[7] = r2[7], t2[8] = r2[8], t2[9] = r2[9], t2[10] = r2[10], t2[11] = r2[11], t2[12] = r2[12], t2[13] = r2[13], t2[14] = r2[14], t2[15] = r2[15], this;
        }, copyPosition: function(e2) {
          var t2 = this.elements, r2 = e2.elements;
          return t2[12] = r2[12], t2[13] = r2[13], t2[14] = r2[14], this;
        }, extractBasis: function(e2, t2, r2) {
          return e2.setFromMatrixColumn(this, 0), t2.setFromMatrixColumn(this, 1), r2.setFromMatrixColumn(this, 2), this;
        }, makeBasis: function(e2, t2, r2) {
          return this.set(e2.x, t2.x, r2.x, 0, e2.y, t2.y, r2.y, 0, e2.z, t2.z, r2.z, 0, 0, 0, 0, 1), this;
        }, extractRotation: function() {
          var e2 = new s();
          return function(t2) {
            var r2 = this.elements, i2 = t2.elements, n2 = 1 / e2.setFromMatrixColumn(t2, 0).length(), o2 = 1 / e2.setFromMatrixColumn(t2, 1).length(), a2 = 1 / e2.setFromMatrixColumn(t2, 2).length();
            return r2[0] = i2[0] * n2, r2[1] = i2[1] * n2, r2[2] = i2[2] * n2, r2[4] = i2[4] * o2, r2[5] = i2[5] * o2, r2[6] = i2[6] * o2, r2[8] = i2[8] * a2, r2[9] = i2[9] * a2, r2[10] = i2[10] * a2, this;
          };
        }(), makeRotationFromEuler: function(e2) {
          e2 && e2.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
          var t2 = this.elements, r2 = e2.x, i2 = e2.y, n2 = e2.z, o2 = Math.cos(r2), a2 = Math.sin(r2), s2 = Math.cos(i2), c2 = Math.sin(i2), l2 = Math.cos(n2), u2 = Math.sin(n2);
          if ("XYZ" === e2.order) {
            var h2 = o2 * l2, d2 = o2 * u2, p2 = a2 * l2, f2 = a2 * u2;
            t2[0] = s2 * l2, t2[4] = -s2 * u2, t2[8] = c2, t2[1] = d2 + p2 * c2, t2[5] = h2 - f2 * c2, t2[9] = -a2 * s2, t2[2] = f2 - h2 * c2, t2[6] = p2 + d2 * c2, t2[10] = o2 * s2;
          } else if ("YXZ" === e2.order) {
            var m2 = s2 * l2, v2 = s2 * u2, g2 = c2 * l2, y2 = c2 * u2;
            t2[0] = m2 + y2 * a2, t2[4] = g2 * a2 - v2, t2[8] = o2 * c2, t2[1] = o2 * u2, t2[5] = o2 * l2, t2[9] = -a2, t2[2] = v2 * a2 - g2, t2[6] = y2 + m2 * a2, t2[10] = o2 * s2;
          } else if ("ZXY" === e2.order) {
            var m2 = s2 * l2, v2 = s2 * u2, g2 = c2 * l2, y2 = c2 * u2;
            t2[0] = m2 - y2 * a2, t2[4] = -o2 * u2, t2[8] = g2 + v2 * a2, t2[1] = v2 + g2 * a2, t2[5] = o2 * l2, t2[9] = y2 - m2 * a2, t2[2] = -o2 * c2, t2[6] = a2, t2[10] = o2 * s2;
          } else if ("ZYX" === e2.order) {
            var h2 = o2 * l2, d2 = o2 * u2, p2 = a2 * l2, f2 = a2 * u2;
            t2[0] = s2 * l2, t2[4] = p2 * c2 - d2, t2[8] = h2 * c2 + f2, t2[1] = s2 * u2, t2[5] = f2 * c2 + h2, t2[9] = d2 * c2 - p2, t2[2] = -c2, t2[6] = a2 * s2, t2[10] = o2 * s2;
          } else if ("YZX" === e2.order) {
            var x2 = o2 * s2, _2 = o2 * c2, b2 = a2 * s2, w2 = a2 * c2;
            t2[0] = s2 * l2, t2[4] = w2 - x2 * u2, t2[8] = b2 * u2 + _2, t2[1] = u2, t2[5] = o2 * l2, t2[9] = -a2 * l2, t2[2] = -c2 * l2, t2[6] = _2 * u2 + b2, t2[10] = x2 - w2 * u2;
          } else if ("XZY" === e2.order) {
            var x2 = o2 * s2, _2 = o2 * c2, b2 = a2 * s2, w2 = a2 * c2;
            t2[0] = s2 * l2, t2[4] = -u2, t2[8] = c2 * l2, t2[1] = x2 * u2 + w2, t2[5] = o2 * l2, t2[9] = _2 * u2 - b2, t2[2] = b2 * u2 - _2, t2[6] = a2 * l2, t2[10] = w2 * u2 + x2;
          }
          return t2[3] = 0, t2[7] = 0, t2[11] = 0, t2[12] = 0, t2[13] = 0, t2[14] = 0, t2[15] = 1, this;
        }, makeRotationFromQuaternion: function(e2) {
          var t2 = this.elements, r2 = e2._x, i2 = e2._y, n2 = e2._z, o2 = e2._w, a2 = r2 + r2, s2 = i2 + i2, c2 = n2 + n2, l2 = r2 * a2, u2 = r2 * s2, h2 = r2 * c2, d2 = i2 * s2, p2 = i2 * c2, f2 = n2 * c2, m2 = o2 * a2, v2 = o2 * s2, g2 = o2 * c2;
          return t2[0] = 1 - (d2 + f2), t2[4] = u2 - g2, t2[8] = h2 + v2, t2[1] = u2 + g2, t2[5] = 1 - (l2 + f2), t2[9] = p2 - m2, t2[2] = h2 - v2, t2[6] = p2 + m2, t2[10] = 1 - (l2 + d2), t2[3] = 0, t2[7] = 0, t2[11] = 0, t2[12] = 0, t2[13] = 0, t2[14] = 0, t2[15] = 1, this;
        }, lookAt: function() {
          var e2 = new s(), t2 = new s(), r2 = new s();
          return function(i2, n2, o2) {
            var a2 = this.elements;
            return r2.subVectors(i2, n2), 0 === r2.lengthSq() && (r2.z = 1), r2.normalize(), e2.crossVectors(o2, r2), 0 === e2.lengthSq() && (1 === Math.abs(o2.z) ? r2.x += 1e-4 : r2.z += 1e-4, r2.normalize(), e2.crossVectors(o2, r2)), e2.normalize(), t2.crossVectors(r2, e2), a2[0] = e2.x, a2[4] = t2.x, a2[8] = r2.x, a2[1] = e2.y, a2[5] = t2.y, a2[9] = r2.y, a2[2] = e2.z, a2[6] = t2.z, a2[10] = r2.z, this;
          };
        }(), multiply: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(e2, t2)) : this.multiplyMatrices(this, e2);
        }, premultiply: function(e2) {
          return this.multiplyMatrices(e2, this);
        }, multiplyMatrices: function(e2, t2) {
          var r2 = e2.elements, i2 = t2.elements, n2 = this.elements, o2 = r2[0], a2 = r2[4], s2 = r2[8], c2 = r2[12], l2 = r2[1], u2 = r2[5], h2 = r2[9], d2 = r2[13], p2 = r2[2], f2 = r2[6], m2 = r2[10], v2 = r2[14], g2 = r2[3], y2 = r2[7], x2 = r2[11], _2 = r2[15], b2 = i2[0], w2 = i2[4], M2 = i2[8], E2 = i2[12], S2 = i2[1], T2 = i2[5], A2 = i2[9], L2 = i2[13], C2 = i2[2], R2 = i2[6], P2 = i2[10], D2 = i2[14], U2 = i2[3], I2 = i2[7], O2 = i2[11], N2 = i2[15];
          return n2[0] = o2 * b2 + a2 * S2 + s2 * C2 + c2 * U2, n2[4] = o2 * w2 + a2 * T2 + s2 * R2 + c2 * I2, n2[8] = o2 * M2 + a2 * A2 + s2 * P2 + c2 * O2, n2[12] = o2 * E2 + a2 * L2 + s2 * D2 + c2 * N2, n2[1] = l2 * b2 + u2 * S2 + h2 * C2 + d2 * U2, n2[5] = l2 * w2 + u2 * T2 + h2 * R2 + d2 * I2, n2[9] = l2 * M2 + u2 * A2 + h2 * P2 + d2 * O2, n2[13] = l2 * E2 + u2 * L2 + h2 * D2 + d2 * N2, n2[2] = p2 * b2 + f2 * S2 + m2 * C2 + v2 * U2, n2[6] = p2 * w2 + f2 * T2 + m2 * R2 + v2 * I2, n2[10] = p2 * M2 + f2 * A2 + m2 * P2 + v2 * O2, n2[14] = p2 * E2 + f2 * L2 + m2 * D2 + v2 * N2, n2[3] = g2 * b2 + y2 * S2 + x2 * C2 + _2 * U2, n2[7] = g2 * w2 + y2 * T2 + x2 * R2 + _2 * I2, n2[11] = g2 * M2 + y2 * A2 + x2 * P2 + _2 * O2, n2[15] = g2 * E2 + y2 * L2 + x2 * D2 + _2 * N2, this;
        }, multiplyScalar: function(e2) {
          var t2 = this.elements;
          return t2[0] *= e2, t2[4] *= e2, t2[8] *= e2, t2[12] *= e2, t2[1] *= e2, t2[5] *= e2, t2[9] *= e2, t2[13] *= e2, t2[2] *= e2, t2[6] *= e2, t2[10] *= e2, t2[14] *= e2, t2[3] *= e2, t2[7] *= e2, t2[11] *= e2, t2[15] *= e2, this;
        }, applyToBufferAttribute: function() {
          var e2 = new s();
          return function(t2) {
            for (var r2 = 0, i2 = t2.count; r2 < i2; r2++)
              e2.x = t2.getX(r2), e2.y = t2.getY(r2), e2.z = t2.getZ(r2), e2.applyMatrix4(this), t2.setXYZ(r2, e2.x, e2.y, e2.z);
            return t2;
          };
        }(), determinant: function() {
          var e2 = this.elements, t2 = e2[0], r2 = e2[4], i2 = e2[8], n2 = e2[12], o2 = e2[1], a2 = e2[5], s2 = e2[9], c2 = e2[13], l2 = e2[2], u2 = e2[6], h2 = e2[10], d2 = e2[14];
          return e2[3] * (+n2 * s2 * u2 - i2 * c2 * u2 - n2 * a2 * h2 + r2 * c2 * h2 + i2 * a2 * d2 - r2 * s2 * d2) + e2[7] * (+t2 * s2 * d2 - t2 * c2 * h2 + n2 * o2 * h2 - i2 * o2 * d2 + i2 * c2 * l2 - n2 * s2 * l2) + e2[11] * (+t2 * c2 * u2 - t2 * a2 * d2 - n2 * o2 * u2 + r2 * o2 * d2 + n2 * a2 * l2 - r2 * c2 * l2) + e2[15] * (-i2 * a2 * l2 - t2 * s2 * u2 + t2 * a2 * h2 + i2 * o2 * u2 - r2 * o2 * h2 + r2 * s2 * l2);
        }, transpose: function() {
          var e2, t2 = this.elements;
          return e2 = t2[1], t2[1] = t2[4], t2[4] = e2, e2 = t2[2], t2[2] = t2[8], t2[8] = e2, e2 = t2[6], t2[6] = t2[9], t2[9] = e2, e2 = t2[3], t2[3] = t2[12], t2[12] = e2, e2 = t2[7], t2[7] = t2[13], t2[13] = e2, e2 = t2[11], t2[11] = t2[14], t2[14] = e2, this;
        }, setPosition: function(e2) {
          var t2 = this.elements;
          return t2[12] = e2.x, t2[13] = e2.y, t2[14] = e2.z, this;
        }, getInverse: function(e2, t2) {
          var r2 = this.elements, i2 = e2.elements, n2 = i2[0], o2 = i2[1], a2 = i2[2], s2 = i2[3], c2 = i2[4], l2 = i2[5], u2 = i2[6], h2 = i2[7], d2 = i2[8], p2 = i2[9], f2 = i2[10], m2 = i2[11], v2 = i2[12], g2 = i2[13], y2 = i2[14], x2 = i2[15], _2 = p2 * y2 * h2 - g2 * f2 * h2 + g2 * u2 * m2 - l2 * y2 * m2 - p2 * u2 * x2 + l2 * f2 * x2, b2 = v2 * f2 * h2 - d2 * y2 * h2 - v2 * u2 * m2 + c2 * y2 * m2 + d2 * u2 * x2 - c2 * f2 * x2, w2 = d2 * g2 * h2 - v2 * p2 * h2 + v2 * l2 * m2 - c2 * g2 * m2 - d2 * l2 * x2 + c2 * p2 * x2, M2 = v2 * p2 * u2 - d2 * g2 * u2 - v2 * l2 * f2 + c2 * g2 * f2 + d2 * l2 * y2 - c2 * p2 * y2, E2 = n2 * _2 + o2 * b2 + a2 * w2 + s2 * M2;
          if (0 === E2) {
            var S2 = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
            if (true === t2)
              throw new Error(S2);
            return console.warn(S2), this.identity();
          }
          var T2 = 1 / E2;
          return r2[0] = _2 * T2, r2[1] = (g2 * f2 * s2 - p2 * y2 * s2 - g2 * a2 * m2 + o2 * y2 * m2 + p2 * a2 * x2 - o2 * f2 * x2) * T2, r2[2] = (l2 * y2 * s2 - g2 * u2 * s2 + g2 * a2 * h2 - o2 * y2 * h2 - l2 * a2 * x2 + o2 * u2 * x2) * T2, r2[3] = (p2 * u2 * s2 - l2 * f2 * s2 - p2 * a2 * h2 + o2 * f2 * h2 + l2 * a2 * m2 - o2 * u2 * m2) * T2, r2[4] = b2 * T2, r2[5] = (d2 * y2 * s2 - v2 * f2 * s2 + v2 * a2 * m2 - n2 * y2 * m2 - d2 * a2 * x2 + n2 * f2 * x2) * T2, r2[6] = (v2 * u2 * s2 - c2 * y2 * s2 - v2 * a2 * h2 + n2 * y2 * h2 + c2 * a2 * x2 - n2 * u2 * x2) * T2, r2[7] = (c2 * f2 * s2 - d2 * u2 * s2 + d2 * a2 * h2 - n2 * f2 * h2 - c2 * a2 * m2 + n2 * u2 * m2) * T2, r2[8] = w2 * T2, r2[9] = (v2 * p2 * s2 - d2 * g2 * s2 - v2 * o2 * m2 + n2 * g2 * m2 + d2 * o2 * x2 - n2 * p2 * x2) * T2, r2[10] = (c2 * g2 * s2 - v2 * l2 * s2 + v2 * o2 * h2 - n2 * g2 * h2 - c2 * o2 * x2 + n2 * l2 * x2) * T2, r2[11] = (d2 * l2 * s2 - c2 * p2 * s2 - d2 * o2 * h2 + n2 * p2 * h2 + c2 * o2 * m2 - n2 * l2 * m2) * T2, r2[12] = M2 * T2, r2[13] = (d2 * g2 * a2 - v2 * p2 * a2 + v2 * o2 * f2 - n2 * g2 * f2 - d2 * o2 * y2 + n2 * p2 * y2) * T2, r2[14] = (v2 * l2 * a2 - c2 * g2 * a2 - v2 * o2 * u2 + n2 * g2 * u2 + c2 * o2 * y2 - n2 * l2 * y2) * T2, r2[15] = (c2 * p2 * a2 - d2 * l2 * a2 + d2 * o2 * u2 - n2 * p2 * u2 - c2 * o2 * f2 + n2 * l2 * f2) * T2, this;
        }, scale: function(e2) {
          var t2 = this.elements, r2 = e2.x, i2 = e2.y, n2 = e2.z;
          return t2[0] *= r2, t2[4] *= i2, t2[8] *= n2, t2[1] *= r2, t2[5] *= i2, t2[9] *= n2, t2[2] *= r2, t2[6] *= i2, t2[10] *= n2, t2[3] *= r2, t2[7] *= i2, t2[11] *= n2, this;
        }, getMaxScaleOnAxis: function() {
          var e2 = this.elements, t2 = e2[0] * e2[0] + e2[1] * e2[1] + e2[2] * e2[2], r2 = e2[4] * e2[4] + e2[5] * e2[5] + e2[6] * e2[6], i2 = e2[8] * e2[8] + e2[9] * e2[9] + e2[10] * e2[10];
          return Math.sqrt(Math.max(t2, r2, i2));
        }, makeTranslation: function(e2, t2, r2) {
          return this.set(1, 0, 0, e2, 0, 1, 0, t2, 0, 0, 1, r2, 0, 0, 0, 1), this;
        }, makeRotationX: function(e2) {
          var t2 = Math.cos(e2), r2 = Math.sin(e2);
          return this.set(1, 0, 0, 0, 0, t2, -r2, 0, 0, r2, t2, 0, 0, 0, 0, 1), this;
        }, makeRotationY: function(e2) {
          var t2 = Math.cos(e2), r2 = Math.sin(e2);
          return this.set(t2, 0, r2, 0, 0, 1, 0, 0, -r2, 0, t2, 0, 0, 0, 0, 1), this;
        }, makeRotationZ: function(e2) {
          var t2 = Math.cos(e2), r2 = Math.sin(e2);
          return this.set(t2, -r2, 0, 0, r2, t2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
        }, makeRotationAxis: function(e2, t2) {
          var r2 = Math.cos(t2), i2 = Math.sin(t2), n2 = 1 - r2, o2 = e2.x, a2 = e2.y, s2 = e2.z, c2 = n2 * o2, l2 = n2 * a2;
          return this.set(c2 * o2 + r2, c2 * a2 - i2 * s2, c2 * s2 + i2 * a2, 0, c2 * a2 + i2 * s2, l2 * a2 + r2, l2 * s2 - i2 * o2, 0, c2 * s2 - i2 * a2, l2 * s2 + i2 * o2, n2 * s2 * s2 + r2, 0, 0, 0, 0, 1), this;
        }, makeScale: function(e2, t2, r2) {
          return this.set(e2, 0, 0, 0, 0, t2, 0, 0, 0, 0, r2, 0, 0, 0, 0, 1), this;
        }, makeShear: function(e2, t2, r2) {
          return this.set(1, t2, r2, 0, e2, 1, r2, 0, e2, t2, 1, 0, 0, 0, 0, 1), this;
        }, compose: function(e2, t2, r2) {
          return this.makeRotationFromQuaternion(t2), this.scale(r2), this.setPosition(e2), this;
        }, decompose: function() {
          var e2 = new s(), t2 = new o();
          return function(r2, i2, n2) {
            var o2 = this.elements, a2 = e2.set(o2[0], o2[1], o2[2]).length(), s2 = e2.set(o2[4], o2[5], o2[6]).length(), c2 = e2.set(o2[8], o2[9], o2[10]).length();
            this.determinant() < 0 && (a2 = -a2), r2.x = o2[12], r2.y = o2[13], r2.z = o2[14], t2.copy(this);
            var l2 = 1 / a2, u2 = 1 / s2, h2 = 1 / c2;
            return t2.elements[0] *= l2, t2.elements[1] *= l2, t2.elements[2] *= l2, t2.elements[4] *= u2, t2.elements[5] *= u2, t2.elements[6] *= u2, t2.elements[8] *= h2, t2.elements[9] *= h2, t2.elements[10] *= h2, i2.setFromRotationMatrix(t2), n2.x = a2, n2.y = s2, n2.z = c2, this;
          };
        }(), makePerspective: function(e2, t2, r2, i2, n2, o2) {
          void 0 === o2 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
          var a2 = this.elements, s2 = 2 * n2 / (t2 - e2), c2 = 2 * n2 / (r2 - i2), l2 = (t2 + e2) / (t2 - e2), u2 = (r2 + i2) / (r2 - i2), h2 = -(o2 + n2) / (o2 - n2), d2 = -2 * o2 * n2 / (o2 - n2);
          return a2[0] = s2, a2[4] = 0, a2[8] = l2, a2[12] = 0, a2[1] = 0, a2[5] = c2, a2[9] = u2, a2[13] = 0, a2[2] = 0, a2[6] = 0, a2[10] = h2, a2[14] = d2, a2[3] = 0, a2[7] = 0, a2[11] = -1, a2[15] = 0, this;
        }, makeOrthographic: function(e2, t2, r2, i2, n2, o2) {
          var a2 = this.elements, s2 = 1 / (t2 - e2), c2 = 1 / (r2 - i2), l2 = 1 / (o2 - n2), u2 = (t2 + e2) * s2, h2 = (r2 + i2) * c2, d2 = (o2 + n2) * l2;
          return a2[0] = 2 * s2, a2[4] = 0, a2[8] = 0, a2[12] = -u2, a2[1] = 0, a2[5] = 2 * c2, a2[9] = 0, a2[13] = -h2, a2[2] = 0, a2[6] = 0, a2[10] = -2 * l2, a2[14] = -d2, a2[3] = 0, a2[7] = 0, a2[11] = 0, a2[15] = 1, this;
        }, equals: function(e2) {
          for (var t2 = this.elements, r2 = e2.elements, i2 = 0; i2 < 16; i2++)
            if (t2[i2] !== r2[i2])
              return false;
          return true;
        }, fromArray: function(e2, t2) {
          void 0 === t2 && (t2 = 0);
          for (var r2 = 0; r2 < 16; r2++)
            this.elements[r2] = e2[r2 + t2];
          return this;
        }, toArray: function(e2, t2) {
          void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0);
          var r2 = this.elements;
          return e2[t2] = r2[0], e2[t2 + 1] = r2[1], e2[t2 + 2] = r2[2], e2[t2 + 3] = r2[3], e2[t2 + 4] = r2[4], e2[t2 + 5] = r2[5], e2[t2 + 6] = r2[6], e2[t2 + 7] = r2[7], e2[t2 + 8] = r2[8], e2[t2 + 9] = r2[9], e2[t2 + 10] = r2[10], e2[t2 + 11] = r2[11], e2[t2 + 12] = r2[12], e2[t2 + 13] = r2[13], e2[t2 + 14] = r2[14], e2[t2 + 15] = r2[15], e2;
        } }), Object.assign(a, { slerp: function(e2, t2, r2, i2) {
          return r2.copy(e2).slerp(t2, i2);
        }, slerpFlat: function(e2, t2, r2, i2, n2, o2, a2) {
          var s2 = r2[i2 + 0], c2 = r2[i2 + 1], l2 = r2[i2 + 2], u2 = r2[i2 + 3], h2 = n2[o2 + 0], d2 = n2[o2 + 1], p2 = n2[o2 + 2], f2 = n2[o2 + 3];
          if (u2 !== f2 || s2 !== h2 || c2 !== d2 || l2 !== p2) {
            var m2 = 1 - a2, v2 = s2 * h2 + c2 * d2 + l2 * p2 + u2 * f2, g2 = v2 >= 0 ? 1 : -1, y2 = 1 - v2 * v2;
            if (y2 > Number.EPSILON) {
              var x2 = Math.sqrt(y2), _2 = Math.atan2(x2, v2 * g2);
              m2 = Math.sin(m2 * _2) / x2, a2 = Math.sin(a2 * _2) / x2;
            }
            var b2 = a2 * g2;
            if (s2 = s2 * m2 + h2 * b2, c2 = c2 * m2 + d2 * b2, l2 = l2 * m2 + p2 * b2, u2 = u2 * m2 + f2 * b2, m2 === 1 - a2) {
              var w2 = 1 / Math.sqrt(s2 * s2 + c2 * c2 + l2 * l2 + u2 * u2);
              s2 *= w2, c2 *= w2, l2 *= w2, u2 *= w2;
            }
          }
          e2[t2] = s2, e2[t2 + 1] = c2, e2[t2 + 2] = l2, e2[t2 + 3] = u2;
        } }), Object.defineProperties(a.prototype, { x: { get: function() {
          return this._x;
        }, set: function(e2) {
          this._x = e2, this.onChangeCallback();
        } }, y: { get: function() {
          return this._y;
        }, set: function(e2) {
          this._y = e2, this.onChangeCallback();
        } }, z: { get: function() {
          return this._z;
        }, set: function(e2) {
          this._z = e2, this.onChangeCallback();
        } }, w: { get: function() {
          return this._w;
        }, set: function(e2) {
          this._w = e2, this.onChangeCallback();
        } } }), Object.assign(a.prototype, { set: function(e2, t2, r2, i2) {
          return this._x = e2, this._y = t2, this._z = r2, this._w = i2, this.onChangeCallback(), this;
        }, clone: function() {
          return new this.constructor(this._x, this._y, this._z, this._w);
        }, copy: function(e2) {
          return this._x = e2.x, this._y = e2.y, this._z = e2.z, this._w = e2.w, this.onChangeCallback(), this;
        }, setFromEuler: function(e2, t2) {
          if (!e2 || !e2.isEuler)
            throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
          var r2 = e2._x, i2 = e2._y, n2 = e2._z, o2 = e2.order, a2 = Math.cos, s2 = Math.sin, c2 = a2(r2 / 2), l2 = a2(i2 / 2), u2 = a2(n2 / 2), h2 = s2(r2 / 2), d2 = s2(i2 / 2), p2 = s2(n2 / 2);
          return "XYZ" === o2 ? (this._x = h2 * l2 * u2 + c2 * d2 * p2, this._y = c2 * d2 * u2 - h2 * l2 * p2, this._z = c2 * l2 * p2 + h2 * d2 * u2, this._w = c2 * l2 * u2 - h2 * d2 * p2) : "YXZ" === o2 ? (this._x = h2 * l2 * u2 + c2 * d2 * p2, this._y = c2 * d2 * u2 - h2 * l2 * p2, this._z = c2 * l2 * p2 - h2 * d2 * u2, this._w = c2 * l2 * u2 + h2 * d2 * p2) : "ZXY" === o2 ? (this._x = h2 * l2 * u2 - c2 * d2 * p2, this._y = c2 * d2 * u2 + h2 * l2 * p2, this._z = c2 * l2 * p2 + h2 * d2 * u2, this._w = c2 * l2 * u2 - h2 * d2 * p2) : "ZYX" === o2 ? (this._x = h2 * l2 * u2 - c2 * d2 * p2, this._y = c2 * d2 * u2 + h2 * l2 * p2, this._z = c2 * l2 * p2 - h2 * d2 * u2, this._w = c2 * l2 * u2 + h2 * d2 * p2) : "YZX" === o2 ? (this._x = h2 * l2 * u2 + c2 * d2 * p2, this._y = c2 * d2 * u2 + h2 * l2 * p2, this._z = c2 * l2 * p2 - h2 * d2 * u2, this._w = c2 * l2 * u2 - h2 * d2 * p2) : "XZY" === o2 && (this._x = h2 * l2 * u2 - c2 * d2 * p2, this._y = c2 * d2 * u2 - h2 * l2 * p2, this._z = c2 * l2 * p2 + h2 * d2 * u2, this._w = c2 * l2 * u2 + h2 * d2 * p2), false !== t2 && this.onChangeCallback(), this;
        }, setFromAxisAngle: function(e2, t2) {
          var r2 = t2 / 2, i2 = Math.sin(r2);
          return this._x = e2.x * i2, this._y = e2.y * i2, this._z = e2.z * i2, this._w = Math.cos(r2), this.onChangeCallback(), this;
        }, setFromRotationMatrix: function(e2) {
          var t2, r2 = e2.elements, i2 = r2[0], n2 = r2[4], o2 = r2[8], a2 = r2[1], s2 = r2[5], c2 = r2[9], l2 = r2[2], u2 = r2[6], h2 = r2[10], d2 = i2 + s2 + h2;
          return d2 > 0 ? (t2 = 0.5 / Math.sqrt(d2 + 1), this._w = 0.25 / t2, this._x = (u2 - c2) * t2, this._y = (o2 - l2) * t2, this._z = (a2 - n2) * t2) : i2 > s2 && i2 > h2 ? (t2 = 2 * Math.sqrt(1 + i2 - s2 - h2), this._w = (u2 - c2) / t2, this._x = 0.25 * t2, this._y = (n2 + a2) / t2, this._z = (o2 + l2) / t2) : s2 > h2 ? (t2 = 2 * Math.sqrt(1 + s2 - i2 - h2), this._w = (o2 - l2) / t2, this._x = (n2 + a2) / t2, this._y = 0.25 * t2, this._z = (c2 + u2) / t2) : (t2 = 2 * Math.sqrt(1 + h2 - i2 - s2), this._w = (a2 - n2) / t2, this._x = (o2 + l2) / t2, this._y = (c2 + u2) / t2, this._z = 0.25 * t2), this.onChangeCallback(), this;
        }, setFromUnitVectors: function() {
          var e2, t2 = new s();
          return function(r2, i2) {
            return void 0 === t2 && (t2 = new s()), e2 = r2.dot(i2) + 1, e2 < 1e-6 ? (e2 = 0, Math.abs(r2.x) > Math.abs(r2.z) ? t2.set(-r2.y, r2.x, 0) : t2.set(0, -r2.z, r2.y)) : t2.crossVectors(r2, i2), this._x = t2.x, this._y = t2.y, this._z = t2.z, this._w = e2, this.normalize();
          };
        }(), inverse: function() {
          return this.conjugate();
        }, conjugate: function() {
          return this._x *= -1, this._y *= -1, this._z *= -1, this.onChangeCallback(), this;
        }, dot: function(e2) {
          return this._x * e2._x + this._y * e2._y + this._z * e2._z + this._w * e2._w;
        }, lengthSq: function() {
          return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
        }, length: function() {
          return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
        }, normalize: function() {
          var e2 = this.length();
          return 0 === e2 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e2 = 1 / e2, this._x = this._x * e2, this._y = this._y * e2, this._z = this._z * e2, this._w = this._w * e2), this.onChangeCallback(), this;
        }, multiply: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(e2, t2)) : this.multiplyQuaternions(this, e2);
        }, premultiply: function(e2) {
          return this.multiplyQuaternions(e2, this);
        }, multiplyQuaternions: function(e2, t2) {
          var r2 = e2._x, i2 = e2._y, n2 = e2._z, o2 = e2._w, a2 = t2._x, s2 = t2._y, c2 = t2._z, l2 = t2._w;
          return this._x = r2 * l2 + o2 * a2 + i2 * c2 - n2 * s2, this._y = i2 * l2 + o2 * s2 + n2 * a2 - r2 * c2, this._z = n2 * l2 + o2 * c2 + r2 * s2 - i2 * a2, this._w = o2 * l2 - r2 * a2 - i2 * s2 - n2 * c2, this.onChangeCallback(), this;
        }, slerp: function(e2, t2) {
          if (0 === t2)
            return this;
          if (1 === t2)
            return this.copy(e2);
          var r2 = this._x, i2 = this._y, n2 = this._z, o2 = this._w, a2 = o2 * e2._w + r2 * e2._x + i2 * e2._y + n2 * e2._z;
          if (a2 < 0 ? (this._w = -e2._w, this._x = -e2._x, this._y = -e2._y, this._z = -e2._z, a2 = -a2) : this.copy(e2), a2 >= 1)
            return this._w = o2, this._x = r2, this._y = i2, this._z = n2, this;
          var s2 = Math.sqrt(1 - a2 * a2);
          if (Math.abs(s2) < 1e-3)
            return this._w = 0.5 * (o2 + this._w), this._x = 0.5 * (r2 + this._x), this._y = 0.5 * (i2 + this._y), this._z = 0.5 * (n2 + this._z), this;
          var c2 = Math.atan2(s2, a2), l2 = Math.sin((1 - t2) * c2) / s2, u2 = Math.sin(t2 * c2) / s2;
          return this._w = o2 * l2 + this._w * u2, this._x = r2 * l2 + this._x * u2, this._y = i2 * l2 + this._y * u2, this._z = n2 * l2 + this._z * u2, this.onChangeCallback(), this;
        }, equals: function(e2) {
          return e2._x === this._x && e2._y === this._y && e2._z === this._z && e2._w === this._w;
        }, fromArray: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this._x = e2[t2], this._y = e2[t2 + 1], this._z = e2[t2 + 2], this._w = e2[t2 + 3], this.onChangeCallback(), this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this._x, e2[t2 + 1] = this._y, e2[t2 + 2] = this._z, e2[t2 + 3] = this._w, e2;
        }, onChange: function(e2) {
          return this.onChangeCallback = e2, this;
        }, onChangeCallback: function() {
        } }), Object.assign(s.prototype, { isVector3: true, set: function(e2, t2, r2) {
          return this.x = e2, this.y = t2, this.z = r2, this;
        }, setScalar: function(e2) {
          return this.x = e2, this.y = e2, this.z = e2, this;
        }, setX: function(e2) {
          return this.x = e2, this;
        }, setY: function(e2) {
          return this.y = e2, this;
        }, setZ: function(e2) {
          return this.z = e2, this;
        }, setComponent: function(e2, t2) {
          switch (e2) {
            case 0:
              this.x = t2;
              break;
            case 1:
              this.y = t2;
              break;
            case 2:
              this.z = t2;
              break;
            default:
              throw new Error("index is out of range: " + e2);
          }
          return this;
        }, getComponent: function(e2) {
          switch (e2) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            default:
              throw new Error("index is out of range: " + e2);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y, this.z);
        }, copy: function(e2) {
          return this.x = e2.x, this.y = e2.y, this.z = e2.z, this;
        }, add: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this.z += e2.z, this);
        }, addScalar: function(e2) {
          return this.x += e2, this.y += e2, this.z += e2, this;
        }, addVectors: function(e2, t2) {
          return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this.z = e2.z + t2.z, this;
        }, addScaledVector: function(e2, t2) {
          return this.x += e2.x * t2, this.y += e2.y * t2, this.z += e2.z * t2, this;
        }, sub: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this.z -= e2.z, this);
        }, subScalar: function(e2) {
          return this.x -= e2, this.y -= e2, this.z -= e2, this;
        }, subVectors: function(e2, t2) {
          return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this.z = e2.z - t2.z, this;
        }, multiply: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(e2, t2)) : (this.x *= e2.x, this.y *= e2.y, this.z *= e2.z, this);
        }, multiplyScalar: function(e2) {
          return this.x *= e2, this.y *= e2, this.z *= e2, this;
        }, multiplyVectors: function(e2, t2) {
          return this.x = e2.x * t2.x, this.y = e2.y * t2.y, this.z = e2.z * t2.z, this;
        }, applyEuler: function() {
          var e2 = new a();
          return function(t2) {
            return t2 && t2.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(e2.setFromEuler(t2));
          };
        }(), applyAxisAngle: function() {
          var e2 = new a();
          return function(t2, r2) {
            return this.applyQuaternion(e2.setFromAxisAngle(t2, r2));
          };
        }(), applyMatrix3: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = this.z, n2 = e2.elements;
          return this.x = n2[0] * t2 + n2[3] * r2 + n2[6] * i2, this.y = n2[1] * t2 + n2[4] * r2 + n2[7] * i2, this.z = n2[2] * t2 + n2[5] * r2 + n2[8] * i2, this;
        }, applyMatrix4: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = this.z, n2 = e2.elements, o2 = 1 / (n2[3] * t2 + n2[7] * r2 + n2[11] * i2 + n2[15]);
          return this.x = (n2[0] * t2 + n2[4] * r2 + n2[8] * i2 + n2[12]) * o2, this.y = (n2[1] * t2 + n2[5] * r2 + n2[9] * i2 + n2[13]) * o2, this.z = (n2[2] * t2 + n2[6] * r2 + n2[10] * i2 + n2[14]) * o2, this;
        }, applyQuaternion: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = this.z, n2 = e2.x, o2 = e2.y, a2 = e2.z, s2 = e2.w, c2 = s2 * t2 + o2 * i2 - a2 * r2, l2 = s2 * r2 + a2 * t2 - n2 * i2, u2 = s2 * i2 + n2 * r2 - o2 * t2, h2 = -n2 * t2 - o2 * r2 - a2 * i2;
          return this.x = c2 * s2 + h2 * -n2 + l2 * -a2 - u2 * -o2, this.y = l2 * s2 + h2 * -o2 + u2 * -n2 - c2 * -a2, this.z = u2 * s2 + h2 * -a2 + c2 * -o2 - l2 * -n2, this;
        }, project: function() {
          var e2 = new o();
          return function(t2) {
            return e2.multiplyMatrices(t2.projectionMatrix, e2.getInverse(t2.matrixWorld)), this.applyMatrix4(e2);
          };
        }(), unproject: function() {
          var e2 = new o();
          return function(t2) {
            return e2.multiplyMatrices(t2.matrixWorld, e2.getInverse(t2.projectionMatrix)), this.applyMatrix4(e2);
          };
        }(), transformDirection: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = this.z, n2 = e2.elements;
          return this.x = n2[0] * t2 + n2[4] * r2 + n2[8] * i2, this.y = n2[1] * t2 + n2[5] * r2 + n2[9] * i2, this.z = n2[2] * t2 + n2[6] * r2 + n2[10] * i2, this.normalize();
        }, divide: function(e2) {
          return this.x /= e2.x, this.y /= e2.y, this.z /= e2.z, this;
        }, divideScalar: function(e2) {
          return this.multiplyScalar(1 / e2);
        }, min: function(e2) {
          return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this.z = Math.min(this.z, e2.z), this;
        }, max: function(e2) {
          return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this.z = Math.max(this.z, e2.z), this;
        }, clamp: function(e2, t2) {
          return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this.z = Math.max(e2.z, Math.min(t2.z, this.z)), this;
        }, clampScalar: function() {
          var e2 = new s(), t2 = new s();
          return function(r2, i2) {
            return e2.set(r2, r2, r2), t2.set(i2, i2, i2), this.clamp(e2, t2);
          };
        }(), clampLength: function(e2, t2) {
          var r2 = this.length();
          return this.divideScalar(r2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, r2)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
        }, dot: function(e2) {
          return this.x * e2.x + this.y * e2.y + this.z * e2.z;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, setLength: function(e2) {
          return this.normalize().multiplyScalar(e2);
        }, lerp: function(e2, t2) {
          return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this.z += (e2.z - this.z) * t2, this;
        }, lerpVectors: function(e2, t2, r2) {
          return this.subVectors(t2, e2).multiplyScalar(r2).add(e2);
        }, cross: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(e2, t2)) : this.crossVectors(this, e2);
        }, crossVectors: function(e2, t2) {
          var r2 = e2.x, i2 = e2.y, n2 = e2.z, o2 = t2.x, a2 = t2.y, s2 = t2.z;
          return this.x = i2 * s2 - n2 * a2, this.y = n2 * o2 - r2 * s2, this.z = r2 * a2 - i2 * o2, this;
        }, projectOnVector: function(e2) {
          var t2 = e2.dot(this) / e2.lengthSq();
          return this.copy(e2).multiplyScalar(t2);
        }, projectOnPlane: function() {
          var e2 = new s();
          return function(t2) {
            return e2.copy(this).projectOnVector(t2), this.sub(e2);
          };
        }(), reflect: function() {
          var e2 = new s();
          return function(t2) {
            return this.sub(e2.copy(t2).multiplyScalar(2 * this.dot(t2)));
          };
        }(), angleTo: function(e2) {
          var t2 = this.dot(e2) / Math.sqrt(this.lengthSq() * e2.lengthSq());
          return Math.acos(zs.clamp(t2, -1, 1));
        }, distanceTo: function(e2) {
          return Math.sqrt(this.distanceToSquared(e2));
        }, distanceToSquared: function(e2) {
          var t2 = this.x - e2.x, r2 = this.y - e2.y, i2 = this.z - e2.z;
          return t2 * t2 + r2 * r2 + i2 * i2;
        }, manhattanDistanceTo: function(e2) {
          return Math.abs(this.x - e2.x) + Math.abs(this.y - e2.y) + Math.abs(this.z - e2.z);
        }, setFromSpherical: function(e2) {
          var t2 = Math.sin(e2.phi) * e2.radius;
          return this.x = t2 * Math.sin(e2.theta), this.y = Math.cos(e2.phi) * e2.radius, this.z = t2 * Math.cos(e2.theta), this;
        }, setFromCylindrical: function(e2) {
          return this.x = e2.radius * Math.sin(e2.theta), this.y = e2.y, this.z = e2.radius * Math.cos(e2.theta), this;
        }, setFromMatrixPosition: function(e2) {
          var t2 = e2.elements;
          return this.x = t2[12], this.y = t2[13], this.z = t2[14], this;
        }, setFromMatrixScale: function(e2) {
          var t2 = this.setFromMatrixColumn(e2, 0).length(), r2 = this.setFromMatrixColumn(e2, 1).length(), i2 = this.setFromMatrixColumn(e2, 2).length();
          return this.x = t2, this.y = r2, this.z = i2, this;
        }, setFromMatrixColumn: function(e2, t2) {
          return this.fromArray(e2.elements, 4 * t2);
        }, equals: function(e2) {
          return e2.x === this.x && e2.y === this.y && e2.z === this.z;
        }, fromArray: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this.z = e2[t2 + 2], this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2[t2 + 2] = this.z, e2;
        }, fromBufferAttribute: function(e2, t2, r2) {
          return void 0 !== r2 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this.z = e2.getZ(t2), this;
        } }), Object.assign(c.prototype, { isMatrix3: true, set: function(e2, t2, r2, i2, n2, o2, a2, s2, c2) {
          var l2 = this.elements;
          return l2[0] = e2, l2[1] = i2, l2[2] = a2, l2[3] = t2, l2[4] = n2, l2[5] = s2, l2[6] = r2, l2[7] = o2, l2[8] = c2, this;
        }, identity: function() {
          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
        }, clone: function() {
          return new this.constructor().fromArray(this.elements);
        }, copy: function(e2) {
          var t2 = this.elements, r2 = e2.elements;
          return t2[0] = r2[0], t2[1] = r2[1], t2[2] = r2[2], t2[3] = r2[3], t2[4] = r2[4], t2[5] = r2[5], t2[6] = r2[6], t2[7] = r2[7], t2[8] = r2[8], this;
        }, setFromMatrix4: function(e2) {
          var t2 = e2.elements;
          return this.set(t2[0], t2[4], t2[8], t2[1], t2[5], t2[9], t2[2], t2[6], t2[10]), this;
        }, applyToBufferAttribute: function() {
          var e2 = new s();
          return function(t2) {
            for (var r2 = 0, i2 = t2.count; r2 < i2; r2++)
              e2.x = t2.getX(r2), e2.y = t2.getY(r2), e2.z = t2.getZ(r2), e2.applyMatrix3(this), t2.setXYZ(r2, e2.x, e2.y, e2.z);
            return t2;
          };
        }(), multiply: function(e2) {
          return this.multiplyMatrices(this, e2);
        }, premultiply: function(e2) {
          return this.multiplyMatrices(e2, this);
        }, multiplyMatrices: function(e2, t2) {
          var r2 = e2.elements, i2 = t2.elements, n2 = this.elements, o2 = r2[0], a2 = r2[3], s2 = r2[6], c2 = r2[1], l2 = r2[4], u2 = r2[7], h2 = r2[2], d2 = r2[5], p2 = r2[8], f2 = i2[0], m2 = i2[3], v2 = i2[6], g2 = i2[1], y2 = i2[4], x2 = i2[7], _2 = i2[2], b2 = i2[5], w2 = i2[8];
          return n2[0] = o2 * f2 + a2 * g2 + s2 * _2, n2[3] = o2 * m2 + a2 * y2 + s2 * b2, n2[6] = o2 * v2 + a2 * x2 + s2 * w2, n2[1] = c2 * f2 + l2 * g2 + u2 * _2, n2[4] = c2 * m2 + l2 * y2 + u2 * b2, n2[7] = c2 * v2 + l2 * x2 + u2 * w2, n2[2] = h2 * f2 + d2 * g2 + p2 * _2, n2[5] = h2 * m2 + d2 * y2 + p2 * b2, n2[8] = h2 * v2 + d2 * x2 + p2 * w2, this;
        }, multiplyScalar: function(e2) {
          var t2 = this.elements;
          return t2[0] *= e2, t2[3] *= e2, t2[6] *= e2, t2[1] *= e2, t2[4] *= e2, t2[7] *= e2, t2[2] *= e2, t2[5] *= e2, t2[8] *= e2, this;
        }, determinant: function() {
          var e2 = this.elements, t2 = e2[0], r2 = e2[1], i2 = e2[2], n2 = e2[3], o2 = e2[4], a2 = e2[5], s2 = e2[6], c2 = e2[7], l2 = e2[8];
          return t2 * o2 * l2 - t2 * a2 * c2 - r2 * n2 * l2 + r2 * a2 * s2 + i2 * n2 * c2 - i2 * o2 * s2;
        }, getInverse: function(e2, t2) {
          e2 && e2.isMatrix4 && console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");
          var r2 = e2.elements, i2 = this.elements, n2 = r2[0], o2 = r2[1], a2 = r2[2], s2 = r2[3], c2 = r2[4], l2 = r2[5], u2 = r2[6], h2 = r2[7], d2 = r2[8], p2 = d2 * c2 - l2 * h2, f2 = l2 * u2 - d2 * s2, m2 = h2 * s2 - c2 * u2, v2 = n2 * p2 + o2 * f2 + a2 * m2;
          if (0 === v2) {
            var g2 = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
            if (true === t2)
              throw new Error(g2);
            return console.warn(g2), this.identity();
          }
          var y2 = 1 / v2;
          return i2[0] = p2 * y2, i2[1] = (a2 * h2 - d2 * o2) * y2, i2[2] = (l2 * o2 - a2 * c2) * y2, i2[3] = f2 * y2, i2[4] = (d2 * n2 - a2 * u2) * y2, i2[5] = (a2 * s2 - l2 * n2) * y2, i2[6] = m2 * y2, i2[7] = (o2 * u2 - h2 * n2) * y2, i2[8] = (c2 * n2 - o2 * s2) * y2, this;
        }, transpose: function() {
          var e2, t2 = this.elements;
          return e2 = t2[1], t2[1] = t2[3], t2[3] = e2, e2 = t2[2], t2[2] = t2[6], t2[6] = e2, e2 = t2[5], t2[5] = t2[7], t2[7] = e2, this;
        }, getNormalMatrix: function(e2) {
          return this.setFromMatrix4(e2).getInverse(this).transpose();
        }, transposeIntoArray: function(e2) {
          var t2 = this.elements;
          return e2[0] = t2[0], e2[1] = t2[3], e2[2] = t2[6], e2[3] = t2[1], e2[4] = t2[4], e2[5] = t2[7], e2[6] = t2[2], e2[7] = t2[5], e2[8] = t2[8], this;
        }, setUvTransform: function(e2, t2, r2, i2, n2, o2, a2) {
          var s2 = Math.cos(n2), c2 = Math.sin(n2);
          this.set(r2 * s2, r2 * c2, -r2 * (s2 * o2 + c2 * a2) + o2 + e2, -i2 * c2, i2 * s2, -i2 * (-c2 * o2 + s2 * a2) + a2 + t2, 0, 0, 1);
        }, scale: function(e2, t2) {
          var r2 = this.elements;
          return r2[0] *= e2, r2[3] *= e2, r2[6] *= e2, r2[1] *= t2, r2[4] *= t2, r2[7] *= t2, this;
        }, rotate: function(e2) {
          var t2 = Math.cos(e2), r2 = Math.sin(e2), i2 = this.elements, n2 = i2[0], o2 = i2[3], a2 = i2[6], s2 = i2[1], c2 = i2[4], l2 = i2[7];
          return i2[0] = t2 * n2 + r2 * s2, i2[3] = t2 * o2 + r2 * c2, i2[6] = t2 * a2 + r2 * l2, i2[1] = -r2 * n2 + t2 * s2, i2[4] = -r2 * o2 + t2 * c2, i2[7] = -r2 * a2 + t2 * l2, this;
        }, translate: function(e2, t2) {
          var r2 = this.elements;
          return r2[0] += e2 * r2[2], r2[3] += e2 * r2[5], r2[6] += e2 * r2[8], r2[1] += t2 * r2[2], r2[4] += t2 * r2[5], r2[7] += t2 * r2[8], this;
        }, equals: function(e2) {
          for (var t2 = this.elements, r2 = e2.elements, i2 = 0; i2 < 9; i2++)
            if (t2[i2] !== r2[i2])
              return false;
          return true;
        }, fromArray: function(e2, t2) {
          void 0 === t2 && (t2 = 0);
          for (var r2 = 0; r2 < 9; r2++)
            this.elements[r2] = e2[r2 + t2];
          return this;
        }, toArray: function(e2, t2) {
          void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0);
          var r2 = this.elements;
          return e2[t2] = r2[0], e2[t2 + 1] = r2[1], e2[t2 + 2] = r2[2], e2[t2 + 3] = r2[3], e2[t2 + 4] = r2[4], e2[t2 + 5] = r2[5], e2[t2 + 6] = r2[6], e2[t2 + 7] = r2[7], e2[t2 + 8] = r2[8], e2;
        } });
        var Bs = 0;
        l.DEFAULT_IMAGE = void 0, l.DEFAULT_MAPPING = 300, l.prototype = Object.assign(Object.create(i.prototype), { constructor: l, isTexture: true, updateMatrix: function() {
          this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.name = e2.name, this.image = e2.image, this.mipmaps = e2.mipmaps.slice(0), this.mapping = e2.mapping, this.wrapS = e2.wrapS, this.wrapT = e2.wrapT, this.magFilter = e2.magFilter, this.minFilter = e2.minFilter, this.anisotropy = e2.anisotropy, this.format = e2.format, this.type = e2.type, this.offset.copy(e2.offset), this.repeat.copy(e2.repeat), this.center.copy(e2.center), this.rotation = e2.rotation, this.matrixAutoUpdate = e2.matrixAutoUpdate, this.matrix.copy(e2.matrix), this.generateMipmaps = e2.generateMipmaps, this.premultiplyAlpha = e2.premultiplyAlpha, this.flipY = e2.flipY, this.unpackAlignment = e2.unpackAlignment, this.encoding = e2.encoding, this;
        }, toJSON: function(e2) {
          var t2 = void 0 === e2 || "string" == typeof e2;
          if (!t2 && void 0 !== e2.textures[this.uuid])
            return e2.textures[this.uuid];
          var r2 = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY };
          if (void 0 !== this.image) {
            var i2 = this.image;
            void 0 === i2.uuid && (i2.uuid = zs.generateUUID()), t2 || void 0 !== e2.images[i2.uuid] || (e2.images[i2.uuid] = { uuid: i2.uuid, url: function(e3) {
              var t3;
              if (e3 instanceof HTMLCanvasElement)
                t3 = e3;
              else {
                t3 = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"), t3.width = e3.width, t3.height = e3.height;
                var r3 = t3.getContext("2d");
                e3 instanceof ImageData ? r3.putImageData(e3, 0, 0) : r3.drawImage(e3, 0, 0, e3.width, e3.height);
              }
              return t3.width > 2048 || t3.height > 2048 ? t3.toDataURL("image/jpeg", 0.6) : t3.toDataURL("image/png");
            }(i2) }), r2.image = i2.uuid;
          }
          return t2 || (e2.textures[this.uuid] = r2), r2;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        }, transformUv: function(e2) {
          if (300 === this.mapping) {
            if (e2.applyMatrix3(this.matrix), e2.x < 0 || e2.x > 1)
              switch (this.wrapS) {
                case Aa:
                  e2.x = e2.x - Math.floor(e2.x);
                  break;
                case La:
                  e2.x = e2.x < 0 ? 0 : 1;
                  break;
                case Ca:
                  1 === Math.abs(Math.floor(e2.x) % 2) ? e2.x = Math.ceil(e2.x) - e2.x : e2.x = e2.x - Math.floor(e2.x);
              }
            if (e2.y < 0 || e2.y > 1)
              switch (this.wrapT) {
                case Aa:
                  e2.y = e2.y - Math.floor(e2.y);
                  break;
                case La:
                  e2.y = e2.y < 0 ? 0 : 1;
                  break;
                case Ca:
                  1 === Math.abs(Math.floor(e2.y) % 2) ? e2.y = Math.ceil(e2.y) - e2.y : e2.y = e2.y - Math.floor(e2.y);
              }
            this.flipY && (e2.y = 1 - e2.y);
          }
        } }), Object.defineProperty(l.prototype, "needsUpdate", { set: function(e2) {
          true === e2 && this.version++;
        } }), Object.assign(u.prototype, { isVector4: true, set: function(e2, t2, r2, i2) {
          return this.x = e2, this.y = t2, this.z = r2, this.w = i2, this;
        }, setScalar: function(e2) {
          return this.x = e2, this.y = e2, this.z = e2, this.w = e2, this;
        }, setX: function(e2) {
          return this.x = e2, this;
        }, setY: function(e2) {
          return this.y = e2, this;
        }, setZ: function(e2) {
          return this.z = e2, this;
        }, setW: function(e2) {
          return this.w = e2, this;
        }, setComponent: function(e2, t2) {
          switch (e2) {
            case 0:
              this.x = t2;
              break;
            case 1:
              this.y = t2;
              break;
            case 2:
              this.z = t2;
              break;
            case 3:
              this.w = t2;
              break;
            default:
              throw new Error("index is out of range: " + e2);
          }
          return this;
        }, getComponent: function(e2) {
          switch (e2) {
            case 0:
              return this.x;
            case 1:
              return this.y;
            case 2:
              return this.z;
            case 3:
              return this.w;
            default:
              throw new Error("index is out of range: " + e2);
          }
        }, clone: function() {
          return new this.constructor(this.x, this.y, this.z, this.w);
        }, copy: function(e2) {
          return this.x = e2.x, this.y = e2.y, this.z = e2.z, this.w = void 0 !== e2.w ? e2.w : 1, this;
        }, add: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e2, t2)) : (this.x += e2.x, this.y += e2.y, this.z += e2.z, this.w += e2.w, this);
        }, addScalar: function(e2) {
          return this.x += e2, this.y += e2, this.z += e2, this.w += e2, this;
        }, addVectors: function(e2, t2) {
          return this.x = e2.x + t2.x, this.y = e2.y + t2.y, this.z = e2.z + t2.z, this.w = e2.w + t2.w, this;
        }, addScaledVector: function(e2, t2) {
          return this.x += e2.x * t2, this.y += e2.y * t2, this.z += e2.z * t2, this.w += e2.w * t2, this;
        }, sub: function(e2, t2) {
          return void 0 !== t2 ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e2, t2)) : (this.x -= e2.x, this.y -= e2.y, this.z -= e2.z, this.w -= e2.w, this);
        }, subScalar: function(e2) {
          return this.x -= e2, this.y -= e2, this.z -= e2, this.w -= e2, this;
        }, subVectors: function(e2, t2) {
          return this.x = e2.x - t2.x, this.y = e2.y - t2.y, this.z = e2.z - t2.z, this.w = e2.w - t2.w, this;
        }, multiplyScalar: function(e2) {
          return this.x *= e2, this.y *= e2, this.z *= e2, this.w *= e2, this;
        }, applyMatrix4: function(e2) {
          var t2 = this.x, r2 = this.y, i2 = this.z, n2 = this.w, o2 = e2.elements;
          return this.x = o2[0] * t2 + o2[4] * r2 + o2[8] * i2 + o2[12] * n2, this.y = o2[1] * t2 + o2[5] * r2 + o2[9] * i2 + o2[13] * n2, this.z = o2[2] * t2 + o2[6] * r2 + o2[10] * i2 + o2[14] * n2, this.w = o2[3] * t2 + o2[7] * r2 + o2[11] * i2 + o2[15] * n2, this;
        }, divideScalar: function(e2) {
          return this.multiplyScalar(1 / e2);
        }, setAxisAngleFromQuaternion: function(e2) {
          this.w = 2 * Math.acos(e2.w);
          var t2 = Math.sqrt(1 - e2.w * e2.w);
          return t2 < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e2.x / t2, this.y = e2.y / t2, this.z = e2.z / t2), this;
        }, setAxisAngleFromRotationMatrix: function(e2) {
          var t2, r2, i2, n2, o2 = e2.elements, a2 = o2[0], s2 = o2[4], c2 = o2[8], l2 = o2[1], u2 = o2[5], h2 = o2[9], d2 = o2[2], p2 = o2[6], f2 = o2[10];
          if (Math.abs(s2 - l2) < 0.01 && Math.abs(c2 - d2) < 0.01 && Math.abs(h2 - p2) < 0.01) {
            if (Math.abs(s2 + l2) < 0.1 && Math.abs(c2 + d2) < 0.1 && Math.abs(h2 + p2) < 0.1 && Math.abs(a2 + u2 + f2 - 3) < 0.1)
              return this.set(1, 0, 0, 0), this;
            t2 = Math.PI;
            var m2 = (a2 + 1) / 2, v2 = (u2 + 1) / 2, g2 = (f2 + 1) / 2, y2 = (s2 + l2) / 4, x2 = (c2 + d2) / 4, _2 = (h2 + p2) / 4;
            return m2 > v2 && m2 > g2 ? m2 < 0.01 ? (r2 = 0, i2 = 0.707106781, n2 = 0.707106781) : (r2 = Math.sqrt(m2), i2 = y2 / r2, n2 = x2 / r2) : v2 > g2 ? v2 < 0.01 ? (r2 = 0.707106781, i2 = 0, n2 = 0.707106781) : (i2 = Math.sqrt(v2), r2 = y2 / i2, n2 = _2 / i2) : g2 < 0.01 ? (r2 = 0.707106781, i2 = 0.707106781, n2 = 0) : (n2 = Math.sqrt(g2), r2 = x2 / n2, i2 = _2 / n2), this.set(r2, i2, n2, t2), this;
          }
          var b2 = Math.sqrt((p2 - h2) * (p2 - h2) + (c2 - d2) * (c2 - d2) + (l2 - s2) * (l2 - s2));
          return Math.abs(b2) < 1e-3 && (b2 = 1), this.x = (p2 - h2) / b2, this.y = (c2 - d2) / b2, this.z = (l2 - s2) / b2, this.w = Math.acos((a2 + u2 + f2 - 1) / 2), this;
        }, min: function(e2) {
          return this.x = Math.min(this.x, e2.x), this.y = Math.min(this.y, e2.y), this.z = Math.min(this.z, e2.z), this.w = Math.min(this.w, e2.w), this;
        }, max: function(e2) {
          return this.x = Math.max(this.x, e2.x), this.y = Math.max(this.y, e2.y), this.z = Math.max(this.z, e2.z), this.w = Math.max(this.w, e2.w), this;
        }, clamp: function(e2, t2) {
          return this.x = Math.max(e2.x, Math.min(t2.x, this.x)), this.y = Math.max(e2.y, Math.min(t2.y, this.y)), this.z = Math.max(e2.z, Math.min(t2.z, this.z)), this.w = Math.max(e2.w, Math.min(t2.w, this.w)), this;
        }, clampScalar: function() {
          var e2, t2;
          return function(r2, i2) {
            return void 0 === e2 && (e2 = new u(), t2 = new u()), e2.set(r2, r2, r2, r2), t2.set(i2, i2, i2, i2), this.clamp(e2, t2);
          };
        }(), clampLength: function(e2, t2) {
          var r2 = this.length();
          return this.divideScalar(r2 || 1).multiplyScalar(Math.max(e2, Math.min(t2, r2)));
        }, floor: function() {
          return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
        }, ceil: function() {
          return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
        }, round: function() {
          return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
        }, roundToZero: function() {
          return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this;
        }, negate: function() {
          return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
        }, dot: function(e2) {
          return this.x * e2.x + this.y * e2.y + this.z * e2.z + this.w * e2.w;
        }, lengthSq: function() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, length: function() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, manhattanLength: function() {
          return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
        }, normalize: function() {
          return this.divideScalar(this.length() || 1);
        }, setLength: function(e2) {
          return this.normalize().multiplyScalar(e2);
        }, lerp: function(e2, t2) {
          return this.x += (e2.x - this.x) * t2, this.y += (e2.y - this.y) * t2, this.z += (e2.z - this.z) * t2, this.w += (e2.w - this.w) * t2, this;
        }, lerpVectors: function(e2, t2, r2) {
          return this.subVectors(t2, e2).multiplyScalar(r2).add(e2);
        }, equals: function(e2) {
          return e2.x === this.x && e2.y === this.y && e2.z === this.z && e2.w === this.w;
        }, fromArray: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.x = e2[t2], this.y = e2[t2 + 1], this.z = e2[t2 + 2], this.w = e2[t2 + 3], this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.x, e2[t2 + 1] = this.y, e2[t2 + 2] = this.z, e2[t2 + 3] = this.w, e2;
        }, fromBufferAttribute: function(e2, t2, r2) {
          return void 0 !== r2 && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = e2.getX(t2), this.y = e2.getY(t2), this.z = e2.getZ(t2), this.w = e2.getW(t2), this;
        } }), h.prototype = Object.assign(Object.create(i.prototype), { constructor: h, isWebGLRenderTarget: true, setSize: function(e2, t2) {
          this.width === e2 && this.height === t2 || (this.width = e2, this.height = t2, this.dispose()), this.viewport.set(0, 0, e2, t2), this.scissor.set(0, 0, e2, t2);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.width = e2.width, this.height = e2.height, this.viewport.copy(e2.viewport), this.texture = e2.texture.clone(), this.depthBuffer = e2.depthBuffer, this.stencilBuffer = e2.stencilBuffer, this.depthTexture = e2.depthTexture, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), d.prototype = Object.create(h.prototype), d.prototype.constructor = d, d.prototype.isWebGLRenderTargetCube = true, p.prototype = Object.create(l.prototype), p.prototype.constructor = p, p.prototype.isDataTexture = true, Object.assign(f.prototype, { isBox3: true, set: function(e2, t2) {
          return this.min.copy(e2), this.max.copy(t2), this;
        }, setFromArray: function(e2) {
          for (var t2 = 1 / 0, r2 = 1 / 0, i2 = 1 / 0, n2 = -1 / 0, o2 = -1 / 0, a2 = -1 / 0, s2 = 0, c2 = e2.length; s2 < c2; s2 += 3) {
            var l2 = e2[s2], u2 = e2[s2 + 1], h2 = e2[s2 + 2];
            l2 < t2 && (t2 = l2), u2 < r2 && (r2 = u2), h2 < i2 && (i2 = h2), l2 > n2 && (n2 = l2), u2 > o2 && (o2 = u2), h2 > a2 && (a2 = h2);
          }
          return this.min.set(t2, r2, i2), this.max.set(n2, o2, a2), this;
        }, setFromBufferAttribute: function(e2) {
          for (var t2 = 1 / 0, r2 = 1 / 0, i2 = 1 / 0, n2 = -1 / 0, o2 = -1 / 0, a2 = -1 / 0, s2 = 0, c2 = e2.count; s2 < c2; s2++) {
            var l2 = e2.getX(s2), u2 = e2.getY(s2), h2 = e2.getZ(s2);
            l2 < t2 && (t2 = l2), u2 < r2 && (r2 = u2), h2 < i2 && (i2 = h2), l2 > n2 && (n2 = l2), u2 > o2 && (o2 = u2), h2 > a2 && (a2 = h2);
          }
          return this.min.set(t2, r2, i2), this.max.set(n2, o2, a2), this;
        }, setFromPoints: function(e2) {
          this.makeEmpty();
          for (var t2 = 0, r2 = e2.length; t2 < r2; t2++)
            this.expandByPoint(e2[t2]);
          return this;
        }, setFromCenterAndSize: function() {
          var e2 = new s();
          return function(t2, r2) {
            var i2 = e2.copy(r2).multiplyScalar(0.5);
            return this.min.copy(t2).sub(i2), this.max.copy(t2).add(i2), this;
          };
        }(), setFromObject: function(e2) {
          return this.makeEmpty(), this.expandByObject(e2);
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.min.copy(e2.min), this.max.copy(e2.max), this;
        }, makeEmpty: function() {
          return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
        }, isEmpty: function() {
          return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
        }, getCenter: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Box3: .getCenter() target is now required"), e2 = new s()), this.isEmpty() ? e2.set(0, 0, 0) : e2.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, getSize: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Box3: .getSize() target is now required"), e2 = new s()), this.isEmpty() ? e2.set(0, 0, 0) : e2.subVectors(this.max, this.min);
        }, expandByPoint: function(e2) {
          return this.min.min(e2), this.max.max(e2), this;
        }, expandByVector: function(e2) {
          return this.min.sub(e2), this.max.add(e2), this;
        }, expandByScalar: function(e2) {
          return this.min.addScalar(-e2), this.max.addScalar(e2), this;
        }, expandByObject: function() {
          function e2(e3) {
            var o2 = e3.geometry;
            if (void 0 !== o2) {
              if (o2.isGeometry) {
                var a2 = o2.vertices;
                for (r2 = 0, i2 = a2.length; r2 < i2; r2++)
                  n2.copy(a2[r2]), n2.applyMatrix4(e3.matrixWorld), t2.expandByPoint(n2);
              } else if (o2.isBufferGeometry) {
                var s2 = o2.attributes.position;
                if (void 0 !== s2)
                  for (r2 = 0, i2 = s2.count; r2 < i2; r2++)
                    n2.fromBufferAttribute(s2, r2).applyMatrix4(e3.matrixWorld), t2.expandByPoint(n2);
              }
            }
          }
          var t2, r2, i2, n2 = new s();
          return function(r3) {
            return t2 = this, r3.updateMatrixWorld(true), r3.traverse(e2), this;
          };
        }(), containsPoint: function(e2) {
          return !(e2.x < this.min.x || e2.x > this.max.x || e2.y < this.min.y || e2.y > this.max.y || e2.z < this.min.z || e2.z > this.max.z);
        }, containsBox: function(e2) {
          return this.min.x <= e2.min.x && e2.max.x <= this.max.x && this.min.y <= e2.min.y && e2.max.y <= this.max.y && this.min.z <= e2.min.z && e2.max.z <= this.max.z;
        }, getParameter: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Box3: .getParameter() target is now required"), t2 = new s()), t2.set((e2.x - this.min.x) / (this.max.x - this.min.x), (e2.y - this.min.y) / (this.max.y - this.min.y), (e2.z - this.min.z) / (this.max.z - this.min.z));
        }, intersectsBox: function(e2) {
          return !(e2.max.x < this.min.x || e2.min.x > this.max.x || e2.max.y < this.min.y || e2.min.y > this.max.y || e2.max.z < this.min.z || e2.min.z > this.max.z);
        }, intersectsSphere: function() {
          var e2 = new s();
          return function(t2) {
            return this.clampPoint(t2.center, e2), e2.distanceToSquared(t2.center) <= t2.radius * t2.radius;
          };
        }(), intersectsPlane: function(e2) {
          var t2, r2;
          return e2.normal.x > 0 ? (t2 = e2.normal.x * this.min.x, r2 = e2.normal.x * this.max.x) : (t2 = e2.normal.x * this.max.x, r2 = e2.normal.x * this.min.x), e2.normal.y > 0 ? (t2 += e2.normal.y * this.min.y, r2 += e2.normal.y * this.max.y) : (t2 += e2.normal.y * this.max.y, r2 += e2.normal.y * this.min.y), e2.normal.z > 0 ? (t2 += e2.normal.z * this.min.z, r2 += e2.normal.z * this.max.z) : (t2 += e2.normal.z * this.max.z, r2 += e2.normal.z * this.min.z), t2 <= e2.constant && r2 >= e2.constant;
        }, intersectsTriangle: function() {
          function e2(e3) {
            var n3, o3;
            for (n3 = 0, o3 = e3.length - 3; n3 <= o3; n3 += 3) {
              c2.fromArray(e3, n3);
              var a3 = u2.x * Math.abs(c2.x) + u2.y * Math.abs(c2.y) + u2.z * Math.abs(c2.z), s2 = t2.dot(c2), l3 = r2.dot(c2), h3 = i2.dot(c2);
              if (Math.max(-Math.max(s2, l3, h3), Math.min(s2, l3, h3)) > a3)
                return false;
            }
            return true;
          }
          var t2 = new s(), r2 = new s(), i2 = new s(), n2 = new s(), o2 = new s(), a2 = new s(), c2 = new s(), l2 = new s(), u2 = new s(), h2 = new s();
          return function(s2) {
            if (this.isEmpty())
              return false;
            this.getCenter(l2), u2.subVectors(this.max, l2), t2.subVectors(s2.a, l2), r2.subVectors(s2.b, l2), i2.subVectors(s2.c, l2), n2.subVectors(r2, t2), o2.subVectors(i2, r2), a2.subVectors(t2, i2);
            var c3 = [0, -n2.z, n2.y, 0, -o2.z, o2.y, 0, -a2.z, a2.y, n2.z, 0, -n2.x, o2.z, 0, -o2.x, a2.z, 0, -a2.x, -n2.y, n2.x, 0, -o2.y, o2.x, 0, -a2.y, a2.x, 0];
            return !!e2(c3) && (c3 = [1, 0, 0, 0, 1, 0, 0, 0, 1], !!e2(c3) && (h2.crossVectors(n2, o2), c3 = [h2.x, h2.y, h2.z], e2(c3)));
          };
        }(), clampPoint: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Box3: .clampPoint() target is now required"), t2 = new s()), t2.copy(e2).clamp(this.min, this.max);
        }, distanceToPoint: function() {
          var e2 = new s();
          return function(t2) {
            return e2.copy(t2).clamp(this.min, this.max).sub(t2).length();
          };
        }(), getBoundingSphere: function() {
          var e2 = new s();
          return function(t2) {
            return void 0 === t2 && (console.warn("THREE.Box3: .getBoundingSphere() target is now required"), t2 = new m()), this.getCenter(t2.center), t2.radius = 0.5 * this.getSize(e2).length(), t2;
          };
        }(), intersect: function(e2) {
          return this.min.max(e2.min), this.max.min(e2.max), this.isEmpty() && this.makeEmpty(), this;
        }, union: function(e2) {
          return this.min.min(e2.min), this.max.max(e2.max), this;
        }, applyMatrix4: function() {
          var e2 = [new s(), new s(), new s(), new s(), new s(), new s(), new s(), new s()];
          return function(t2) {
            return this.isEmpty() ? this : (e2[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t2), e2[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t2), e2[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t2), e2[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t2), e2[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t2), e2[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t2), e2[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t2), e2[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t2), this.setFromPoints(e2), this);
          };
        }(), translate: function(e2) {
          return this.min.add(e2), this.max.add(e2), this;
        }, equals: function(e2) {
          return e2.min.equals(this.min) && e2.max.equals(this.max);
        } }), Object.assign(m.prototype, { set: function(e2, t2) {
          return this.center.copy(e2), this.radius = t2, this;
        }, setFromPoints: function() {
          var e2 = new f();
          return function(t2, r2) {
            var i2 = this.center;
            void 0 !== r2 ? i2.copy(r2) : e2.setFromPoints(t2).getCenter(i2);
            for (var n2 = 0, o2 = 0, a2 = t2.length; o2 < a2; o2++)
              n2 = Math.max(n2, i2.distanceToSquared(t2[o2]));
            return this.radius = Math.sqrt(n2), this;
          };
        }(), clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.center.copy(e2.center), this.radius = e2.radius, this;
        }, empty: function() {
          return this.radius <= 0;
        }, containsPoint: function(e2) {
          return e2.distanceToSquared(this.center) <= this.radius * this.radius;
        }, distanceToPoint: function(e2) {
          return e2.distanceTo(this.center) - this.radius;
        }, intersectsSphere: function(e2) {
          var t2 = this.radius + e2.radius;
          return e2.center.distanceToSquared(this.center) <= t2 * t2;
        }, intersectsBox: function(e2) {
          return e2.intersectsSphere(this);
        }, intersectsPlane: function(e2) {
          return Math.abs(e2.distanceToPoint(this.center)) <= this.radius;
        }, clampPoint: function(e2, t2) {
          var r2 = this.center.distanceToSquared(e2);
          return void 0 === t2 && (console.warn("THREE.Sphere: .clampPoint() target is now required"), t2 = new s()), t2.copy(e2), r2 > this.radius * this.radius && (t2.sub(this.center).normalize(), t2.multiplyScalar(this.radius).add(this.center)), t2;
        }, getBoundingBox: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Sphere: .getBoundingBox() target is now required"), e2 = new f()), e2.set(this.center, this.center), e2.expandByScalar(this.radius), e2;
        }, applyMatrix4: function(e2) {
          return this.center.applyMatrix4(e2), this.radius = this.radius * e2.getMaxScaleOnAxis(), this;
        }, translate: function(e2) {
          return this.center.add(e2), this;
        }, equals: function(e2) {
          return e2.center.equals(this.center) && e2.radius === this.radius;
        } }), Object.assign(v.prototype, { set: function(e2, t2) {
          return this.normal.copy(e2), this.constant = t2, this;
        }, setComponents: function(e2, t2, r2, i2) {
          return this.normal.set(e2, t2, r2), this.constant = i2, this;
        }, setFromNormalAndCoplanarPoint: function(e2, t2) {
          return this.normal.copy(e2), this.constant = -t2.dot(this.normal), this;
        }, setFromCoplanarPoints: function() {
          var e2 = new s(), t2 = new s();
          return function(r2, i2, n2) {
            var o2 = e2.subVectors(n2, i2).cross(t2.subVectors(r2, i2)).normalize();
            return this.setFromNormalAndCoplanarPoint(o2, r2), this;
          };
        }(), clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.normal.copy(e2.normal), this.constant = e2.constant, this;
        }, normalize: function() {
          var e2 = 1 / this.normal.length();
          return this.normal.multiplyScalar(e2), this.constant *= e2, this;
        }, negate: function() {
          return this.constant *= -1, this.normal.negate(), this;
        }, distanceToPoint: function(e2) {
          return this.normal.dot(e2) + this.constant;
        }, distanceToSphere: function(e2) {
          return this.distanceToPoint(e2.center) - e2.radius;
        }, projectPoint: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Plane: .projectPoint() target is now required"), t2 = new s()), t2.copy(this.normal).multiplyScalar(-this.distanceToPoint(e2)).add(e2);
        }, intersectLine: function() {
          var e2 = new s();
          return function(t2, r2) {
            void 0 === r2 && (console.warn("THREE.Plane: .intersectLine() target is now required"), r2 = new s());
            var i2 = t2.delta(e2), n2 = this.normal.dot(i2);
            if (0 !== n2) {
              var o2 = -(t2.start.dot(this.normal) + this.constant) / n2;
              if (!(o2 < 0 || o2 > 1))
                return r2.copy(i2).multiplyScalar(o2).add(t2.start);
            } else if (0 === this.distanceToPoint(t2.start))
              return r2.copy(t2.start);
          };
        }(), intersectsLine: function(e2) {
          var t2 = this.distanceToPoint(e2.start), r2 = this.distanceToPoint(e2.end);
          return t2 < 0 && r2 > 0 || r2 < 0 && t2 > 0;
        }, intersectsBox: function(e2) {
          return e2.intersectsPlane(this);
        }, intersectsSphere: function(e2) {
          return e2.intersectsPlane(this);
        }, coplanarPoint: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Plane: .coplanarPoint() target is now required"), e2 = new s()), e2.copy(this.normal).multiplyScalar(-this.constant);
        }, applyMatrix4: function() {
          var e2 = new s(), t2 = new c();
          return function(r2, i2) {
            var n2 = i2 || t2.getNormalMatrix(r2), o2 = this.coplanarPoint(e2).applyMatrix4(r2), a2 = this.normal.applyMatrix3(n2).normalize();
            return this.constant = -o2.dot(a2), this;
          };
        }(), translate: function(e2) {
          return this.constant -= e2.dot(this.normal), this;
        }, equals: function(e2) {
          return e2.normal.equals(this.normal) && e2.constant === this.constant;
        } }), Object.assign(g.prototype, { set: function(e2, t2, r2, i2, n2, o2) {
          var a2 = this.planes;
          return a2[0].copy(e2), a2[1].copy(t2), a2[2].copy(r2), a2[3].copy(i2), a2[4].copy(n2), a2[5].copy(o2), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          for (var t2 = this.planes, r2 = 0; r2 < 6; r2++)
            t2[r2].copy(e2.planes[r2]);
          return this;
        }, setFromMatrix: function(e2) {
          var t2 = this.planes, r2 = e2.elements, i2 = r2[0], n2 = r2[1], o2 = r2[2], a2 = r2[3], s2 = r2[4], c2 = r2[5], l2 = r2[6], u2 = r2[7], h2 = r2[8], d2 = r2[9], p2 = r2[10], f2 = r2[11], m2 = r2[12], v2 = r2[13], g2 = r2[14], y2 = r2[15];
          return t2[0].setComponents(a2 - i2, u2 - s2, f2 - h2, y2 - m2).normalize(), t2[1].setComponents(a2 + i2, u2 + s2, f2 + h2, y2 + m2).normalize(), t2[2].setComponents(a2 + n2, u2 + c2, f2 + d2, y2 + v2).normalize(), t2[3].setComponents(a2 - n2, u2 - c2, f2 - d2, y2 - v2).normalize(), t2[4].setComponents(a2 - o2, u2 - l2, f2 - p2, y2 - g2).normalize(), t2[5].setComponents(a2 + o2, u2 + l2, f2 + p2, y2 + g2).normalize(), this;
        }, intersectsObject: function() {
          var e2 = new m();
          return function(t2) {
            var r2 = t2.geometry;
            return null === r2.boundingSphere && r2.computeBoundingSphere(), e2.copy(r2.boundingSphere).applyMatrix4(t2.matrixWorld), this.intersectsSphere(e2);
          };
        }(), intersectsSprite: function() {
          var e2 = new m();
          return function(t2) {
            return e2.center.set(0, 0, 0), e2.radius = 0.7071067811865476, e2.applyMatrix4(t2.matrixWorld), this.intersectsSphere(e2);
          };
        }(), intersectsSphere: function(e2) {
          for (var t2 = this.planes, r2 = e2.center, i2 = -e2.radius, n2 = 0; n2 < 6; n2++) {
            if (t2[n2].distanceToPoint(r2) < i2)
              return false;
          }
          return true;
        }, intersectsBox: function() {
          var e2 = new s(), t2 = new s();
          return function(r2) {
            for (var i2 = this.planes, n2 = 0; n2 < 6; n2++) {
              var o2 = i2[n2];
              e2.x = o2.normal.x > 0 ? r2.min.x : r2.max.x, t2.x = o2.normal.x > 0 ? r2.max.x : r2.min.x, e2.y = o2.normal.y > 0 ? r2.min.y : r2.max.y, t2.y = o2.normal.y > 0 ? r2.max.y : r2.min.y, e2.z = o2.normal.z > 0 ? r2.min.z : r2.max.z, t2.z = o2.normal.z > 0 ? r2.max.z : r2.min.z;
              var a2 = o2.distanceToPoint(e2), s2 = o2.distanceToPoint(t2);
              if (a2 < 0 && s2 < 0)
                return false;
            }
            return true;
          };
        }(), containsPoint: function(e2) {
          for (var t2 = this.planes, r2 = 0; r2 < 6; r2++)
            if (t2[r2].distanceToPoint(e2) < 0)
              return false;
          return true;
        } });
        var Gs = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n", alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n", alphatest_fragment: "#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n", aomap_fragment: "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n", aomap_pars_fragment: "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif", begin_vertex: "\nvec3 transformed = vec3( position );\n", beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n", bsdfs: "float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		return distanceFalloff * maxDistanceCutoffFactor;\n#else\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n	}\n	return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE  = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS  = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n", bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n", clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#pragma unroll_loop\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n		plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		#pragma unroll_loop\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			clipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		if ( clipped ) discard;\n	#endif\n#endif\n", clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n", color_fragment: "#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n", color_pars_vertex: "#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif", color_vertex: "#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif", common: "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n	return dot( weights, color.rgb );\n}\n", cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n", defaultnormal_vertex: "vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n", emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n", emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n", encodings_fragment: "  gl_FragColor = linearToOutputTexel( gl_FragColor );\n", encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M            = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float D      = max( maxRange / maxRGB, 1.0 );\n	D            = min( floor( D ) / 255.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n	vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n	Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract(Le);\n	vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n	return vec4( max(vRGB, 0.0), 1.0 );\n}\n", envmap_fragment: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		reflectVec = normalize( reflectVec );\n		sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n		sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		reflectVec = normalize( reflectVec );\n		vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n", envmap_pars_fragment: "#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	uniform int maxMipLevel;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n", envmap_pars_vertex: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n", envmap_vertex: "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n", fog_vertex: "\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif", fog_pars_vertex: "#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n", fog_fragment: "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n", fog_pars_fragment: "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif\n", gradientmap_pars_fragment: "#ifdef TOON\n	uniform sampler2D gradientMap;\n	vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n		float dotNL = dot( normal, lightDirection );\n		vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n		#ifdef USE_GRADIENTMAP\n			return texture2D( gradientMap, coord ).rgb;\n		#else\n			return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n		#endif\n	}\n#endif\n", lightmap_fragment: "#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n", lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif", lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n", lights_pars_begin: "uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n		float shadowCameraNear;\n		float shadowCameraFar;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n", lights_pars_maps: "#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n			sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n", lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n", lights_phong_pars_fragment: "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifdef TOON\n		vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#else\n		float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n		vec3 irradiance = dotNL * directLight.color;\n	#endif\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n", lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n	material.clearCoat = saturate( clearCoat );	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n", lights_physical_pars_fragment: "struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n		float clearCoat;\n		float clearCoatRoughness;\n	#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos - halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifndef STANDARD\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n	reflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	#ifndef STANDARD\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifndef STANDARD\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		float dotNL = dotNV;\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n	#ifndef STANDARD\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n", lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearCoatRadiance = vec3( 0.0 );\n#endif\n", lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n		irradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	radiance += getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), maxMipLevel );\n	#ifndef STANDARD\n		clearCoatRadiance += getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), maxMipLevel );\n	#endif\n#endif\n", lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n", logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n	gl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n", logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n		gl_Position.z *= gl_Position.w;\n	#endif\n#endif\n", map_fragment: "#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n", map_pars_fragment: "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n", map_particle_fragment: "#ifdef USE_MAP\n	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	vec4 mapTexel = texture2D( map, uv );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n", map_particle_pars_fragment: "#ifdef USE_MAP\n	uniform mat3 uvTransform;\n	uniform sampler2D map;\n#endif\n", metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif\n", metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n", morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif", morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n", normal_fragment_begin: "#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#endif\n#endif\n", normal_fragment_maps: "#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n", normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		float scale = sign( st1.t * st0.s - st0.t * st1.s );		scale *= float( gl_FrontFacing ) * 2.0 - 1.0;\n		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n", packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n", premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n", project_vertex: "vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n", dithering_fragment: "#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n", dithering_pars_fragment: "#if defined( DITHERING )\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif\n", roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif\n", roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;\n		vec3 bd3D = normalize( lightToPosition );\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n", shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n", shadowmap_vertex: "#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n", shadowmask_pars_fragment: "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	#pragma unroll_loop\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n", skinbase_vertex: "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n", skinning_vertex: "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n", skinnormal_vertex: "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n", specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n", tonemapping_pars_fragment: "#ifndef saturate\n	#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n", uv_pars_fragment: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif", uv_pars_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\n", uv_vertex: "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif", uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n", cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	gl_FragColor.a *= opacity;\n}\n", cube_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}\n", depth_frag: "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n", depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n", distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}\n", distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}\n", equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n}\n", equirect_vert: "varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n", linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}\n", meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}\n", meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", meshphysical_frag: "#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n	uniform float clearCoat;\n	uniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars_begin>\n#include <lights_pars_maps>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n", meshphysical_vert: "#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", normal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n", normal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}\n", points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n", points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n", shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <fog_fragment>\n}\n", shadow_vert: "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n" }, Hs = { merge: function(e2) {
          for (var t2 = {}, r2 = 0; r2 < e2.length; r2++) {
            var i2 = this.clone(e2[r2]);
            for (var n2 in i2)
              t2[n2] = i2[n2];
          }
          return t2;
        }, clone: function(e2) {
          var t2 = {};
          for (var r2 in e2) {
            t2[r2] = {};
            for (var i2 in e2[r2]) {
              var n2 = e2[r2][i2];
              n2 && (n2.isColor || n2.isMatrix3 || n2.isMatrix4 || n2.isVector2 || n2.isVector3 || n2.isVector4 || n2.isTexture) ? t2[r2][i2] = n2.clone() : Array.isArray(n2) ? t2[r2][i2] = n2.slice() : t2[r2][i2] = n2;
            }
          }
          return t2;
        } }, js = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };
        Object.assign(y.prototype, { isColor: true, r: 1, g: 1, b: 1, set: function(e2) {
          return e2 && e2.isColor ? this.copy(e2) : "number" == typeof e2 ? this.setHex(e2) : "string" == typeof e2 && this.setStyle(e2), this;
        }, setScalar: function(e2) {
          return this.r = e2, this.g = e2, this.b = e2, this;
        }, setHex: function(e2) {
          return e2 = Math.floor(e2), this.r = (e2 >> 16 & 255) / 255, this.g = (e2 >> 8 & 255) / 255, this.b = (255 & e2) / 255, this;
        }, setRGB: function(e2, t2, r2) {
          return this.r = e2, this.g = t2, this.b = r2, this;
        }, setHSL: function() {
          function e2(e3, t2, r2) {
            return r2 < 0 && (r2 += 1), r2 > 1 && (r2 -= 1), r2 < 1 / 6 ? e3 + 6 * (t2 - e3) * r2 : r2 < 0.5 ? t2 : r2 < 2 / 3 ? e3 + 6 * (t2 - e3) * (2 / 3 - r2) : e3;
          }
          return function(t2, r2, i2) {
            if (t2 = zs.euclideanModulo(t2, 1), r2 = zs.clamp(r2, 0, 1), i2 = zs.clamp(i2, 0, 1), 0 === r2)
              this.r = this.g = this.b = i2;
            else {
              var n2 = i2 <= 0.5 ? i2 * (1 + r2) : i2 + r2 - i2 * r2, o2 = 2 * i2 - n2;
              this.r = e2(o2, n2, t2 + 1 / 3), this.g = e2(o2, n2, t2), this.b = e2(o2, n2, t2 - 1 / 3);
            }
            return this;
          };
        }(), setStyle: function(e2) {
          function t2(t3) {
            void 0 !== t3 && parseFloat(t3) < 1 && console.warn("THREE.Color: Alpha component of " + e2 + " will be ignored.");
          }
          var r2;
          if (r2 = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e2)) {
            var i2, n2 = r2[1], o2 = r2[2];
            switch (n2) {
              case "rgb":
              case "rgba":
                if (i2 = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o2))
                  return this.r = Math.min(255, parseInt(i2[1], 10)) / 255, this.g = Math.min(255, parseInt(i2[2], 10)) / 255, this.b = Math.min(255, parseInt(i2[3], 10)) / 255, t2(i2[5]), this;
                if (i2 = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o2))
                  return this.r = Math.min(100, parseInt(i2[1], 10)) / 100, this.g = Math.min(100, parseInt(i2[2], 10)) / 100, this.b = Math.min(100, parseInt(i2[3], 10)) / 100, t2(i2[5]), this;
                break;
              case "hsl":
              case "hsla":
                if (i2 = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o2)) {
                  var a2 = parseFloat(i2[1]) / 360, s2 = parseInt(i2[2], 10) / 100, c2 = parseInt(i2[3], 10) / 100;
                  return t2(i2[5]), this.setHSL(a2, s2, c2);
                }
            }
          } else if (r2 = /^\#([A-Fa-f0-9]+)$/.exec(e2)) {
            var l2 = r2[1], u2 = l2.length;
            if (3 === u2)
              return this.r = parseInt(l2.charAt(0) + l2.charAt(0), 16) / 255, this.g = parseInt(l2.charAt(1) + l2.charAt(1), 16) / 255, this.b = parseInt(l2.charAt(2) + l2.charAt(2), 16) / 255, this;
            if (6 === u2)
              return this.r = parseInt(l2.charAt(0) + l2.charAt(1), 16) / 255, this.g = parseInt(l2.charAt(2) + l2.charAt(3), 16) / 255, this.b = parseInt(l2.charAt(4) + l2.charAt(5), 16) / 255, this;
          }
          if (e2 && e2.length > 0) {
            var l2 = js[e2];
            void 0 !== l2 ? this.setHex(l2) : console.warn("THREE.Color: Unknown color " + e2);
          }
          return this;
        }, clone: function() {
          return new this.constructor(this.r, this.g, this.b);
        }, copy: function(e2) {
          return this.r = e2.r, this.g = e2.g, this.b = e2.b, this;
        }, copyGammaToLinear: function(e2, t2) {
          return void 0 === t2 && (t2 = 2), this.r = Math.pow(e2.r, t2), this.g = Math.pow(e2.g, t2), this.b = Math.pow(e2.b, t2), this;
        }, copyLinearToGamma: function(e2, t2) {
          void 0 === t2 && (t2 = 2);
          var r2 = t2 > 0 ? 1 / t2 : 1;
          return this.r = Math.pow(e2.r, r2), this.g = Math.pow(e2.g, r2), this.b = Math.pow(e2.b, r2), this;
        }, convertGammaToLinear: function() {
          var e2 = this.r, t2 = this.g, r2 = this.b;
          return this.r = e2 * e2, this.g = t2 * t2, this.b = r2 * r2, this;
        }, convertLinearToGamma: function() {
          return this.r = Math.sqrt(this.r), this.g = Math.sqrt(this.g), this.b = Math.sqrt(this.b), this;
        }, getHex: function() {
          return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0;
        }, getHexString: function() {
          return ("000000" + this.getHex().toString(16)).slice(-6);
        }, getHSL: function(e2) {
          void 0 === e2 && (console.warn("THREE.Color: .getHSL() target is now required"), e2 = { h: 0, s: 0, l: 0 });
          var t2, r2, i2 = this.r, n2 = this.g, o2 = this.b, a2 = Math.max(i2, n2, o2), s2 = Math.min(i2, n2, o2), c2 = (s2 + a2) / 2;
          if (s2 === a2)
            t2 = 0, r2 = 0;
          else {
            var l2 = a2 - s2;
            switch (r2 = c2 <= 0.5 ? l2 / (a2 + s2) : l2 / (2 - a2 - s2), a2) {
              case i2:
                t2 = (n2 - o2) / l2 + (n2 < o2 ? 6 : 0);
                break;
              case n2:
                t2 = (o2 - i2) / l2 + 2;
                break;
              case o2:
                t2 = (i2 - n2) / l2 + 4;
            }
            t2 /= 6;
          }
          return e2.h = t2, e2.s = r2, e2.l = c2, e2;
        }, getStyle: function() {
          return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")";
        }, offsetHSL: function() {
          var e2 = {};
          return function(t2, r2, i2) {
            return this.getHSL(e2), e2.h += t2, e2.s += r2, e2.l += i2, this.setHSL(e2.h, e2.s, e2.l), this;
          };
        }(), add: function(e2) {
          return this.r += e2.r, this.g += e2.g, this.b += e2.b, this;
        }, addColors: function(e2, t2) {
          return this.r = e2.r + t2.r, this.g = e2.g + t2.g, this.b = e2.b + t2.b, this;
        }, addScalar: function(e2) {
          return this.r += e2, this.g += e2, this.b += e2, this;
        }, sub: function(e2) {
          return this.r = Math.max(0, this.r - e2.r), this.g = Math.max(0, this.g - e2.g), this.b = Math.max(0, this.b - e2.b), this;
        }, multiply: function(e2) {
          return this.r *= e2.r, this.g *= e2.g, this.b *= e2.b, this;
        }, multiplyScalar: function(e2) {
          return this.r *= e2, this.g *= e2, this.b *= e2, this;
        }, lerp: function(e2, t2) {
          return this.r += (e2.r - this.r) * t2, this.g += (e2.g - this.g) * t2, this.b += (e2.b - this.b) * t2, this;
        }, equals: function(e2) {
          return e2.r === this.r && e2.g === this.g && e2.b === this.b;
        }, fromArray: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.r = e2[t2], this.g = e2[t2 + 1], this.b = e2[t2 + 2], this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this.r, e2[t2 + 1] = this.g, e2[t2 + 2] = this.b, e2;
        }, toJSON: function() {
          return this.getHex();
        } });
        var Vs = { common: { diffuse: { value: new y(15658734) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new c() }, alphaMap: { value: null } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, refractionRatio: { value: 0.98 }, maxMipLevel: { value: 0 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new n(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new y(16777215) } }, lights: { ambientLightColor: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] }, spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {}, shadow: {}, shadowBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } } }, points: { diffuse: { value: new y(15658734) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, uvTransform: { value: new c() } } }, ks = { basic: { uniforms: Hs.merge([Vs.common, Vs.specularmap, Vs.envmap, Vs.aomap, Vs.lightmap, Vs.fog]), vertexShader: Gs.meshbasic_vert, fragmentShader: Gs.meshbasic_frag }, lambert: { uniforms: Hs.merge([Vs.common, Vs.specularmap, Vs.envmap, Vs.aomap, Vs.lightmap, Vs.emissivemap, Vs.fog, Vs.lights, { emissive: { value: new y(0) } }]), vertexShader: Gs.meshlambert_vert, fragmentShader: Gs.meshlambert_frag }, phong: { uniforms: Hs.merge([Vs.common, Vs.specularmap, Vs.envmap, Vs.aomap, Vs.lightmap, Vs.emissivemap, Vs.bumpmap, Vs.normalmap, Vs.displacementmap, Vs.gradientmap, Vs.fog, Vs.lights, { emissive: { value: new y(0) }, specular: { value: new y(1118481) }, shininess: { value: 30 } }]), vertexShader: Gs.meshphong_vert, fragmentShader: Gs.meshphong_frag }, standard: { uniforms: Hs.merge([Vs.common, Vs.envmap, Vs.aomap, Vs.lightmap, Vs.emissivemap, Vs.bumpmap, Vs.normalmap, Vs.displacementmap, Vs.roughnessmap, Vs.metalnessmap, Vs.fog, Vs.lights, { emissive: { value: new y(0) }, roughness: { value: 0.5 }, metalness: { value: 0.5 }, envMapIntensity: { value: 1 } }]), vertexShader: Gs.meshphysical_vert, fragmentShader: Gs.meshphysical_frag }, points: { uniforms: Hs.merge([Vs.points, Vs.fog]), vertexShader: Gs.points_vert, fragmentShader: Gs.points_frag }, dashed: { uniforms: Hs.merge([Vs.common, Vs.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Gs.linedashed_vert, fragmentShader: Gs.linedashed_frag }, depth: { uniforms: Hs.merge([Vs.common, Vs.displacementmap]), vertexShader: Gs.depth_vert, fragmentShader: Gs.depth_frag }, normal: { uniforms: Hs.merge([Vs.common, Vs.bumpmap, Vs.normalmap, Vs.displacementmap, { opacity: { value: 1 } }]), vertexShader: Gs.normal_vert, fragmentShader: Gs.normal_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: Gs.cube_vert, fragmentShader: Gs.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Gs.equirect_vert, fragmentShader: Gs.equirect_frag }, distanceRGBA: { uniforms: Hs.merge([Vs.common, Vs.displacementmap, { referencePosition: { value: new s() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: Gs.distanceRGBA_vert, fragmentShader: Gs.distanceRGBA_frag }, shadow: { uniforms: Hs.merge([Vs.lights, Vs.fog, { color: { value: new y(0) }, opacity: { value: 1 } }]), vertexShader: Gs.shadow_vert, fragmentShader: Gs.shadow_frag } };
        ks.physical = { uniforms: Hs.merge([ks.standard.uniforms, { clearCoat: { value: 0 }, clearCoatRoughness: { value: 0 } }]), vertexShader: Gs.meshphysical_vert, fragmentShader: Gs.meshphysical_frag }, _.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"], _.DefaultOrder = "XYZ", Object.defineProperties(_.prototype, { x: { get: function() {
          return this._x;
        }, set: function(e2) {
          this._x = e2, this.onChangeCallback();
        } }, y: { get: function() {
          return this._y;
        }, set: function(e2) {
          this._y = e2, this.onChangeCallback();
        } }, z: { get: function() {
          return this._z;
        }, set: function(e2) {
          this._z = e2, this.onChangeCallback();
        } }, order: { get: function() {
          return this._order;
        }, set: function(e2) {
          this._order = e2, this.onChangeCallback();
        } } }), Object.assign(_.prototype, { isEuler: true, set: function(e2, t2, r2, i2) {
          return this._x = e2, this._y = t2, this._z = r2, this._order = i2 || this._order, this.onChangeCallback(), this;
        }, clone: function() {
          return new this.constructor(this._x, this._y, this._z, this._order);
        }, copy: function(e2) {
          return this._x = e2._x, this._y = e2._y, this._z = e2._z, this._order = e2._order, this.onChangeCallback(), this;
        }, setFromRotationMatrix: function(e2, t2, r2) {
          var i2 = zs.clamp, n2 = e2.elements, o2 = n2[0], a2 = n2[4], s2 = n2[8], c2 = n2[1], l2 = n2[5], u2 = n2[9], h2 = n2[2], d2 = n2[6], p2 = n2[10];
          return t2 = t2 || this._order, "XYZ" === t2 ? (this._y = Math.asin(i2(s2, -1, 1)), Math.abs(s2) < 0.99999 ? (this._x = Math.atan2(-u2, p2), this._z = Math.atan2(-a2, o2)) : (this._x = Math.atan2(d2, l2), this._z = 0)) : "YXZ" === t2 ? (this._x = Math.asin(-i2(u2, -1, 1)), Math.abs(u2) < 0.99999 ? (this._y = Math.atan2(s2, p2), this._z = Math.atan2(c2, l2)) : (this._y = Math.atan2(-h2, o2), this._z = 0)) : "ZXY" === t2 ? (this._x = Math.asin(i2(d2, -1, 1)), Math.abs(d2) < 0.99999 ? (this._y = Math.atan2(-h2, p2), this._z = Math.atan2(-a2, l2)) : (this._y = 0, this._z = Math.atan2(c2, o2))) : "ZYX" === t2 ? (this._y = Math.asin(-i2(h2, -1, 1)), Math.abs(h2) < 0.99999 ? (this._x = Math.atan2(d2, p2), this._z = Math.atan2(c2, o2)) : (this._x = 0, this._z = Math.atan2(-a2, l2))) : "YZX" === t2 ? (this._z = Math.asin(i2(c2, -1, 1)), Math.abs(c2) < 0.99999 ? (this._x = Math.atan2(-u2, l2), this._y = Math.atan2(-h2, o2)) : (this._x = 0, this._y = Math.atan2(s2, p2))) : "XZY" === t2 ? (this._z = Math.asin(-i2(a2, -1, 1)), Math.abs(a2) < 0.99999 ? (this._x = Math.atan2(d2, l2), this._y = Math.atan2(s2, o2)) : (this._x = Math.atan2(-u2, p2), this._y = 0)) : console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: " + t2), this._order = t2, false !== r2 && this.onChangeCallback(), this;
        }, setFromQuaternion: function() {
          var e2 = new o();
          return function(t2, r2, i2) {
            return e2.makeRotationFromQuaternion(t2), this.setFromRotationMatrix(e2, r2, i2);
          };
        }(), setFromVector3: function(e2, t2) {
          return this.set(e2.x, e2.y, e2.z, t2 || this._order);
        }, reorder: function() {
          var e2 = new a();
          return function(t2) {
            return e2.setFromEuler(this), this.setFromQuaternion(e2, t2);
          };
        }(), equals: function(e2) {
          return e2._x === this._x && e2._y === this._y && e2._z === this._z && e2._order === this._order;
        }, fromArray: function(e2) {
          return this._x = e2[0], this._y = e2[1], this._z = e2[2], void 0 !== e2[3] && (this._order = e2[3]), this.onChangeCallback(), this;
        }, toArray: function(e2, t2) {
          return void 0 === e2 && (e2 = []), void 0 === t2 && (t2 = 0), e2[t2] = this._x, e2[t2 + 1] = this._y, e2[t2 + 2] = this._z, e2[t2 + 3] = this._order, e2;
        }, toVector3: function(e2) {
          return e2 ? e2.set(this._x, this._y, this._z) : new s(this._x, this._y, this._z);
        }, onChange: function(e2) {
          return this.onChangeCallback = e2, this;
        }, onChangeCallback: function() {
        } }), Object.assign(b.prototype, { set: function(e2) {
          this.mask = 1 << e2 | 0;
        }, enable: function(e2) {
          this.mask |= 1 << e2 | 0;
        }, toggle: function(e2) {
          this.mask ^= 1 << e2 | 0;
        }, disable: function(e2) {
          this.mask &= ~(1 << e2 | 0);
        }, test: function(e2) {
          return 0 != (this.mask & e2.mask);
        } });
        var Ws = 0;
        w.DefaultUp = new s(0, 1, 0), w.DefaultMatrixAutoUpdate = true, w.prototype = Object.assign(Object.create(i.prototype), { constructor: w, isObject3D: true, onBeforeRender: function() {
        }, onAfterRender: function() {
        }, applyMatrix: function(e2) {
          this.matrix.multiplyMatrices(e2, this.matrix), this.matrix.decompose(this.position, this.quaternion, this.scale);
        }, applyQuaternion: function(e2) {
          return this.quaternion.premultiply(e2), this;
        }, setRotationFromAxisAngle: function(e2, t2) {
          this.quaternion.setFromAxisAngle(e2, t2);
        }, setRotationFromEuler: function(e2) {
          this.quaternion.setFromEuler(e2, true);
        }, setRotationFromMatrix: function(e2) {
          this.quaternion.setFromRotationMatrix(e2);
        }, setRotationFromQuaternion: function(e2) {
          this.quaternion.copy(e2);
        }, rotateOnAxis: function() {
          var e2 = new a();
          return function(t2, r2) {
            return e2.setFromAxisAngle(t2, r2), this.quaternion.multiply(e2), this;
          };
        }(), rotateOnWorldAxis: function() {
          var e2 = new a();
          return function(t2, r2) {
            return e2.setFromAxisAngle(t2, r2), this.quaternion.premultiply(e2), this;
          };
        }(), rotateX: function() {
          var e2 = new s(1, 0, 0);
          return function(t2) {
            return this.rotateOnAxis(e2, t2);
          };
        }(), rotateY: function() {
          var e2 = new s(0, 1, 0);
          return function(t2) {
            return this.rotateOnAxis(e2, t2);
          };
        }(), rotateZ: function() {
          var e2 = new s(0, 0, 1);
          return function(t2) {
            return this.rotateOnAxis(e2, t2);
          };
        }(), translateOnAxis: function() {
          var e2 = new s();
          return function(t2, r2) {
            return e2.copy(t2).applyQuaternion(this.quaternion), this.position.add(e2.multiplyScalar(r2)), this;
          };
        }(), translateX: function() {
          var e2 = new s(1, 0, 0);
          return function(t2) {
            return this.translateOnAxis(e2, t2);
          };
        }(), translateY: function() {
          var e2 = new s(0, 1, 0);
          return function(t2) {
            return this.translateOnAxis(e2, t2);
          };
        }(), translateZ: function() {
          var e2 = new s(0, 0, 1);
          return function(t2) {
            return this.translateOnAxis(e2, t2);
          };
        }(), localToWorld: function(e2) {
          return e2.applyMatrix4(this.matrixWorld);
        }, worldToLocal: function() {
          var e2 = new o();
          return function(t2) {
            return t2.applyMatrix4(e2.getInverse(this.matrixWorld));
          };
        }(), lookAt: function() {
          var e2 = new o(), t2 = new s();
          return function(r2, i2, n2) {
            r2.isVector3 ? t2.copy(r2) : t2.set(r2, i2, n2), this.isCamera ? e2.lookAt(this.position, t2, this.up) : e2.lookAt(t2, this.position, this.up), this.quaternion.setFromRotationMatrix(e2);
          };
        }(), add: function(e2) {
          if (arguments.length > 1) {
            for (var t2 = 0; t2 < arguments.length; t2++)
              this.add(arguments[t2]);
            return this;
          }
          return e2 === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e2), this) : (e2 && e2.isObject3D ? (null !== e2.parent && e2.parent.remove(e2), e2.parent = this, e2.dispatchEvent({ type: "added" }), this.children.push(e2)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e2), this);
        }, remove: function(e2) {
          if (arguments.length > 1) {
            for (var t2 = 0; t2 < arguments.length; t2++)
              this.remove(arguments[t2]);
            return this;
          }
          var r2 = this.children.indexOf(e2);
          return -1 !== r2 && (e2.parent = null, e2.dispatchEvent({ type: "removed" }), this.children.splice(r2, 1)), this;
        }, getObjectById: function(e2) {
          return this.getObjectByProperty("id", e2);
        }, getObjectByName: function(e2) {
          return this.getObjectByProperty("name", e2);
        }, getObjectByProperty: function(e2, t2) {
          if (this[e2] === t2)
            return this;
          for (var r2 = 0, i2 = this.children.length; r2 < i2; r2++) {
            var n2 = this.children[r2], o2 = n2.getObjectByProperty(e2, t2);
            if (void 0 !== o2)
              return o2;
          }
        }, getWorldPosition: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Object3D: .getWorldPosition() target is now required"), e2 = new s()), this.updateMatrixWorld(true), e2.setFromMatrixPosition(this.matrixWorld);
        }, getWorldQuaternion: function() {
          var e2 = new s(), t2 = new s();
          return function(r2) {
            return void 0 === r2 && (console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"), r2 = new a()), this.updateMatrixWorld(true), this.matrixWorld.decompose(e2, r2, t2), r2;
          };
        }(), getWorldScale: function() {
          var e2 = new s(), t2 = new a();
          return function(r2) {
            return void 0 === r2 && (console.warn("THREE.Object3D: .getWorldScale() target is now required"), r2 = new s()), this.updateMatrixWorld(true), this.matrixWorld.decompose(e2, t2, r2), r2;
          };
        }(), getWorldDirection: function() {
          var e2 = new a();
          return function(t2) {
            return void 0 === t2 && (console.warn("THREE.Object3D: .getWorldDirection() target is now required"), t2 = new s()), this.getWorldQuaternion(e2), t2.set(0, 0, 1).applyQuaternion(e2);
          };
        }(), raycast: function() {
        }, traverse: function(e2) {
          e2(this);
          for (var t2 = this.children, r2 = 0, i2 = t2.length; r2 < i2; r2++)
            t2[r2].traverse(e2);
        }, traverseVisible: function(e2) {
          if (false !== this.visible) {
            e2(this);
            for (var t2 = this.children, r2 = 0, i2 = t2.length; r2 < i2; r2++)
              t2[r2].traverseVisible(e2);
          }
        }, traverseAncestors: function(e2) {
          var t2 = this.parent;
          null !== t2 && (e2(t2), t2.traverseAncestors(e2));
        }, updateMatrix: function() {
          this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
        }, updateMatrixWorld: function(e2) {
          this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e2) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = false, e2 = true);
          for (var t2 = this.children, r2 = 0, i2 = t2.length; r2 < i2; r2++)
            t2[r2].updateMatrixWorld(e2);
        }, toJSON: function(e2) {
          function t2(t3, r3) {
            return void 0 === t3[r3.uuid] && (t3[r3.uuid] = r3.toJSON(e2)), r3.uuid;
          }
          function r2(e3) {
            var t3 = [];
            for (var r3 in e3) {
              var i3 = e3[r3];
              delete i3.metadata, t3.push(i3);
            }
            return t3;
          }
          var i2 = void 0 === e2 || "string" == typeof e2, n2 = {};
          i2 && (e2 = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {} }, n2.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" });
          var o2 = {};
          if (o2.uuid = this.uuid, o2.type = this.type, "" !== this.name && (o2.name = this.name), true === this.castShadow && (o2.castShadow = true), true === this.receiveShadow && (o2.receiveShadow = true), false === this.visible && (o2.visible = false), false === this.frustumCulled && (o2.frustumCulled = false), 0 !== this.renderOrder && (o2.renderOrder = this.renderOrder), "{}" !== JSON.stringify(this.userData) && (o2.userData = this.userData), o2.matrix = this.matrix.toArray(), false === this.matrixAutoUpdate && (o2.matrixAutoUpdate = false), void 0 !== this.geometry) {
            o2.geometry = t2(e2.geometries, this.geometry);
            var a2 = this.geometry.parameters;
            if (void 0 !== a2 && void 0 !== a2.shapes) {
              var s2 = a2.shapes;
              if (Array.isArray(s2))
                for (var c2 = 0, l2 = s2.length; c2 < l2; c2++) {
                  var u2 = s2[c2];
                  t2(e2.shapes, u2);
                }
              else
                t2(e2.shapes, s2);
            }
          }
          if (void 0 !== this.material)
            if (Array.isArray(this.material)) {
              for (var h2 = [], c2 = 0, l2 = this.material.length; c2 < l2; c2++)
                h2.push(t2(e2.materials, this.material[c2]));
              o2.material = h2;
            } else
              o2.material = t2(e2.materials, this.material);
          if (this.children.length > 0) {
            o2.children = [];
            for (var c2 = 0; c2 < this.children.length; c2++)
              o2.children.push(this.children[c2].toJSON(e2).object);
          }
          if (i2) {
            var d2 = r2(e2.geometries), p2 = r2(e2.materials), f2 = r2(e2.textures), m2 = r2(e2.images), s2 = r2(e2.shapes);
            d2.length > 0 && (n2.geometries = d2), p2.length > 0 && (n2.materials = p2), f2.length > 0 && (n2.textures = f2), m2.length > 0 && (n2.images = m2), s2.length > 0 && (n2.shapes = s2);
          }
          return n2.object = o2, n2;
        }, clone: function(e2) {
          return new this.constructor().copy(this, e2);
        }, copy: function(e2, t2) {
          if (void 0 === t2 && (t2 = true), this.name = e2.name, this.up.copy(e2.up), this.position.copy(e2.position), this.quaternion.copy(e2.quaternion), this.scale.copy(e2.scale), this.matrix.copy(e2.matrix), this.matrixWorld.copy(e2.matrixWorld), this.matrixAutoUpdate = e2.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e2.matrixWorldNeedsUpdate, this.layers.mask = e2.layers.mask, this.visible = e2.visible, this.castShadow = e2.castShadow, this.receiveShadow = e2.receiveShadow, this.frustumCulled = e2.frustumCulled, this.renderOrder = e2.renderOrder, this.userData = JSON.parse(JSON.stringify(e2.userData)), true === t2)
            for (var r2 = 0; r2 < e2.children.length; r2++) {
              var i2 = e2.children[r2];
              this.add(i2.clone());
            }
          return this;
        } }), M.prototype = Object.assign(Object.create(w.prototype), { constructor: M, isCamera: true, copy: function(e2, t2) {
          return w.prototype.copy.call(this, e2, t2), this.matrixWorldInverse.copy(e2.matrixWorldInverse), this.projectionMatrix.copy(e2.projectionMatrix), this;
        }, getWorldDirection: function() {
          var e2 = new a();
          return function(t2) {
            return void 0 === t2 && (console.warn("THREE.Camera: .getWorldDirection() target is now required"), t2 = new s()), this.getWorldQuaternion(e2), t2.set(0, 0, -1).applyQuaternion(e2);
          };
        }(), updateMatrixWorld: function(e2) {
          w.prototype.updateMatrixWorld.call(this, e2), this.matrixWorldInverse.getInverse(this.matrixWorld);
        }, clone: function() {
          return new this.constructor().copy(this);
        } }), E.prototype = Object.assign(Object.create(M.prototype), { constructor: E, isOrthographicCamera: true, copy: function(e2, t2) {
          return M.prototype.copy.call(this, e2, t2), this.left = e2.left, this.right = e2.right, this.top = e2.top, this.bottom = e2.bottom, this.near = e2.near, this.far = e2.far, this.zoom = e2.zoom, this.view = null === e2.view ? null : Object.assign({}, e2.view), this;
        }, setViewOffset: function(e2, t2, r2, i2, n2, o2) {
          null === this.view && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = e2, this.view.fullHeight = t2, this.view.offsetX = r2, this.view.offsetY = i2, this.view.width = n2, this.view.height = o2, this.updateProjectionMatrix();
        }, clearViewOffset: function() {
          null !== this.view && (this.view.enabled = false), this.updateProjectionMatrix();
        }, updateProjectionMatrix: function() {
          var e2 = (this.right - this.left) / (2 * this.zoom), t2 = (this.top - this.bottom) / (2 * this.zoom), r2 = (this.right + this.left) / 2, i2 = (this.top + this.bottom) / 2, n2 = r2 - e2, o2 = r2 + e2, a2 = i2 + t2, s2 = i2 - t2;
          if (null !== this.view && this.view.enabled) {
            var c2 = this.zoom / (this.view.width / this.view.fullWidth), l2 = this.zoom / (this.view.height / this.view.fullHeight), u2 = (this.right - this.left) / this.view.width, h2 = (this.top - this.bottom) / this.view.height;
            n2 += u2 * (this.view.offsetX / c2), o2 = n2 + u2 * (this.view.width / c2), a2 -= h2 * (this.view.offsetY / l2), s2 = a2 - h2 * (this.view.height / l2);
          }
          this.projectionMatrix.makeOrthographic(n2, o2, a2, s2, this.near, this.far);
        }, toJSON: function(e2) {
          var t2 = w.prototype.toJSON.call(this, e2);
          return t2.object.zoom = this.zoom, t2.object.left = this.left, t2.object.right = this.right, t2.object.top = this.top, t2.object.bottom = this.bottom, t2.object.near = this.near, t2.object.far = this.far, null !== this.view && (t2.object.view = Object.assign({}, this.view)), t2;
        } }), Object.assign(S.prototype, { clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          this.a = e2.a, this.b = e2.b, this.c = e2.c, this.normal.copy(e2.normal), this.color.copy(e2.color), this.materialIndex = e2.materialIndex;
          for (var t2 = 0, r2 = e2.vertexNormals.length; t2 < r2; t2++)
            this.vertexNormals[t2] = e2.vertexNormals[t2].clone();
          for (var t2 = 0, r2 = e2.vertexColors.length; t2 < r2; t2++)
            this.vertexColors[t2] = e2.vertexColors[t2].clone();
          return this;
        } });
        var Xs = 0;
        T.prototype = Object.assign(Object.create(i.prototype), { constructor: T, isGeometry: true, applyMatrix: function(e2) {
          for (var t2 = new c().getNormalMatrix(e2), r2 = 0, i2 = this.vertices.length; r2 < i2; r2++) {
            this.vertices[r2].applyMatrix4(e2);
          }
          for (var r2 = 0, i2 = this.faces.length; r2 < i2; r2++) {
            var n2 = this.faces[r2];
            n2.normal.applyMatrix3(t2).normalize();
            for (var o2 = 0, a2 = n2.vertexNormals.length; o2 < a2; o2++)
              n2.vertexNormals[o2].applyMatrix3(t2).normalize();
          }
          return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this.verticesNeedUpdate = true, this.normalsNeedUpdate = true, this;
        }, rotateX: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationX(t2), this.applyMatrix(e2), this;
          };
        }(), rotateY: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationY(t2), this.applyMatrix(e2), this;
          };
        }(), rotateZ: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationZ(t2), this.applyMatrix(e2), this;
          };
        }(), translate: function() {
          var e2 = new o();
          return function(t2, r2, i2) {
            return e2.makeTranslation(t2, r2, i2), this.applyMatrix(e2), this;
          };
        }(), scale: function() {
          var e2 = new o();
          return function(t2, r2, i2) {
            return e2.makeScale(t2, r2, i2), this.applyMatrix(e2), this;
          };
        }(), lookAt: function() {
          var e2 = new w();
          return function(t2) {
            e2.lookAt(t2), e2.updateMatrix(), this.applyMatrix(e2.matrix);
          };
        }(), fromBufferGeometry: function(e2) {
          function t2(e3, t3, i3, n2) {
            var o3 = void 0 !== c2 ? [d2[e3].clone(), d2[t3].clone(), d2[i3].clone()] : [], a3 = void 0 !== l2 ? [r2.colors[e3].clone(), r2.colors[t3].clone(), r2.colors[i3].clone()] : [], s2 = new S(e3, t3, i3, o3, a3, n2);
            r2.faces.push(s2), void 0 !== u2 && r2.faceVertexUvs[0].push([p2[e3].clone(), p2[t3].clone(), p2[i3].clone()]), void 0 !== h2 && r2.faceVertexUvs[1].push([f2[e3].clone(), f2[t3].clone(), f2[i3].clone()]);
          }
          var r2 = this, i2 = null !== e2.index ? e2.index.array : void 0, o2 = e2.attributes, a2 = o2.position.array, c2 = void 0 !== o2.normal ? o2.normal.array : void 0, l2 = void 0 !== o2.color ? o2.color.array : void 0, u2 = void 0 !== o2.uv ? o2.uv.array : void 0, h2 = void 0 !== o2.uv2 ? o2.uv2.array : void 0;
          void 0 !== h2 && (this.faceVertexUvs[1] = []);
          for (var d2 = [], p2 = [], f2 = [], m2 = 0, v2 = 0; m2 < a2.length; m2 += 3, v2 += 2)
            r2.vertices.push(new s(a2[m2], a2[m2 + 1], a2[m2 + 2])), void 0 !== c2 && d2.push(new s(c2[m2], c2[m2 + 1], c2[m2 + 2])), void 0 !== l2 && r2.colors.push(new y(l2[m2], l2[m2 + 1], l2[m2 + 2])), void 0 !== u2 && p2.push(new n(u2[v2], u2[v2 + 1])), void 0 !== h2 && f2.push(new n(h2[v2], h2[v2 + 1]));
          var g2 = e2.groups;
          if (g2.length > 0)
            for (var m2 = 0; m2 < g2.length; m2++)
              for (var x2 = g2[m2], _2 = x2.start, b2 = x2.count, v2 = _2, w2 = _2 + b2; v2 < w2; v2 += 3)
                void 0 !== i2 ? t2(i2[v2], i2[v2 + 1], i2[v2 + 2], x2.materialIndex) : t2(v2, v2 + 1, v2 + 2, x2.materialIndex);
          else if (void 0 !== i2)
            for (var m2 = 0; m2 < i2.length; m2 += 3)
              t2(i2[m2], i2[m2 + 1], i2[m2 + 2]);
          else
            for (var m2 = 0; m2 < a2.length / 3; m2 += 3)
              t2(m2, m2 + 1, m2 + 2);
          return this.computeFaceNormals(), null !== e2.boundingBox && (this.boundingBox = e2.boundingBox.clone()), null !== e2.boundingSphere && (this.boundingSphere = e2.boundingSphere.clone()), this;
        }, center: function() {
          var e2 = new s();
          return function() {
            return this.computeBoundingBox(), this.boundingBox.getCenter(e2).negate(), this.translate(e2.x, e2.y, e2.z), this;
          };
        }(), normalize: function() {
          this.computeBoundingSphere();
          var e2 = this.boundingSphere.center, t2 = this.boundingSphere.radius, r2 = 0 === t2 ? 1 : 1 / t2, i2 = new o();
          return i2.set(r2, 0, 0, -r2 * e2.x, 0, r2, 0, -r2 * e2.y, 0, 0, r2, -r2 * e2.z, 0, 0, 0, 1), this.applyMatrix(i2), this;
        }, computeFaceNormals: function() {
          for (var e2 = new s(), t2 = new s(), r2 = 0, i2 = this.faces.length; r2 < i2; r2++) {
            var n2 = this.faces[r2], o2 = this.vertices[n2.a], a2 = this.vertices[n2.b], c2 = this.vertices[n2.c];
            e2.subVectors(c2, a2), t2.subVectors(o2, a2), e2.cross(t2), e2.normalize(), n2.normal.copy(e2);
          }
        }, computeVertexNormals: function(e2) {
          void 0 === e2 && (e2 = true);
          var t2, r2, i2, n2, o2, a2;
          for (a2 = new Array(this.vertices.length), t2 = 0, r2 = this.vertices.length; t2 < r2; t2++)
            a2[t2] = new s();
          if (e2) {
            var c2, l2, u2, h2 = new s(), d2 = new s();
            for (i2 = 0, n2 = this.faces.length; i2 < n2; i2++)
              o2 = this.faces[i2], c2 = this.vertices[o2.a], l2 = this.vertices[o2.b], u2 = this.vertices[o2.c], h2.subVectors(u2, l2), d2.subVectors(c2, l2), h2.cross(d2), a2[o2.a].add(h2), a2[o2.b].add(h2), a2[o2.c].add(h2);
          } else
            for (this.computeFaceNormals(), i2 = 0, n2 = this.faces.length; i2 < n2; i2++)
              o2 = this.faces[i2], a2[o2.a].add(o2.normal), a2[o2.b].add(o2.normal), a2[o2.c].add(o2.normal);
          for (t2 = 0, r2 = this.vertices.length; t2 < r2; t2++)
            a2[t2].normalize();
          for (i2 = 0, n2 = this.faces.length; i2 < n2; i2++) {
            o2 = this.faces[i2];
            var p2 = o2.vertexNormals;
            3 === p2.length ? (p2[0].copy(a2[o2.a]), p2[1].copy(a2[o2.b]), p2[2].copy(a2[o2.c])) : (p2[0] = a2[o2.a].clone(), p2[1] = a2[o2.b].clone(), p2[2] = a2[o2.c].clone());
          }
          this.faces.length > 0 && (this.normalsNeedUpdate = true);
        }, computeFlatVertexNormals: function() {
          var e2, t2, r2;
          for (this.computeFaceNormals(), e2 = 0, t2 = this.faces.length; e2 < t2; e2++) {
            r2 = this.faces[e2];
            var i2 = r2.vertexNormals;
            3 === i2.length ? (i2[0].copy(r2.normal), i2[1].copy(r2.normal), i2[2].copy(r2.normal)) : (i2[0] = r2.normal.clone(), i2[1] = r2.normal.clone(), i2[2] = r2.normal.clone());
          }
          this.faces.length > 0 && (this.normalsNeedUpdate = true);
        }, computeMorphNormals: function() {
          var e2, t2, r2, i2, n2;
          for (r2 = 0, i2 = this.faces.length; r2 < i2; r2++)
            for (n2 = this.faces[r2], n2.__originalFaceNormal ? n2.__originalFaceNormal.copy(n2.normal) : n2.__originalFaceNormal = n2.normal.clone(), n2.__originalVertexNormals || (n2.__originalVertexNormals = []), e2 = 0, t2 = n2.vertexNormals.length; e2 < t2; e2++)
              n2.__originalVertexNormals[e2] ? n2.__originalVertexNormals[e2].copy(n2.vertexNormals[e2]) : n2.__originalVertexNormals[e2] = n2.vertexNormals[e2].clone();
          var o2 = new T();
          for (o2.faces = this.faces, e2 = 0, t2 = this.morphTargets.length; e2 < t2; e2++) {
            if (!this.morphNormals[e2]) {
              this.morphNormals[e2] = {}, this.morphNormals[e2].faceNormals = [], this.morphNormals[e2].vertexNormals = [];
              var a2, c2, l2 = this.morphNormals[e2].faceNormals, u2 = this.morphNormals[e2].vertexNormals;
              for (r2 = 0, i2 = this.faces.length; r2 < i2; r2++)
                a2 = new s(), c2 = { a: new s(), b: new s(), c: new s() }, l2.push(a2), u2.push(c2);
            }
            var h2 = this.morphNormals[e2];
            o2.vertices = this.morphTargets[e2].vertices, o2.computeFaceNormals(), o2.computeVertexNormals();
            var a2, c2;
            for (r2 = 0, i2 = this.faces.length; r2 < i2; r2++)
              n2 = this.faces[r2], a2 = h2.faceNormals[r2], c2 = h2.vertexNormals[r2], a2.copy(n2.normal), c2.a.copy(n2.vertexNormals[0]), c2.b.copy(n2.vertexNormals[1]), c2.c.copy(n2.vertexNormals[2]);
          }
          for (r2 = 0, i2 = this.faces.length; r2 < i2; r2++)
            n2 = this.faces[r2], n2.normal = n2.__originalFaceNormal, n2.vertexNormals = n2.__originalVertexNormals;
        }, computeBoundingBox: function() {
          null === this.boundingBox && (this.boundingBox = new f()), this.boundingBox.setFromPoints(this.vertices);
        }, computeBoundingSphere: function() {
          null === this.boundingSphere && (this.boundingSphere = new m()), this.boundingSphere.setFromPoints(this.vertices);
        }, merge: function(e2, t2, r2) {
          if (!e2 || !e2.isGeometry)
            return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.", e2);
          var i2, n2 = this.vertices.length, o2 = this.vertices, a2 = e2.vertices, s2 = this.faces, l2 = e2.faces, u2 = this.faceVertexUvs[0], h2 = e2.faceVertexUvs[0], d2 = this.colors, p2 = e2.colors;
          void 0 === r2 && (r2 = 0), void 0 !== t2 && (i2 = new c().getNormalMatrix(t2));
          for (var f2 = 0, m2 = a2.length; f2 < m2; f2++) {
            var v2 = a2[f2], g2 = v2.clone();
            void 0 !== t2 && g2.applyMatrix4(t2), o2.push(g2);
          }
          for (var f2 = 0, m2 = p2.length; f2 < m2; f2++)
            d2.push(p2[f2].clone());
          for (f2 = 0, m2 = l2.length; f2 < m2; f2++) {
            var y2, x2, _2, b2 = l2[f2], w2 = b2.vertexNormals, M2 = b2.vertexColors;
            y2 = new S(b2.a + n2, b2.b + n2, b2.c + n2), y2.normal.copy(b2.normal), void 0 !== i2 && y2.normal.applyMatrix3(i2).normalize();
            for (var E2 = 0, T2 = w2.length; E2 < T2; E2++)
              x2 = w2[E2].clone(), void 0 !== i2 && x2.applyMatrix3(i2).normalize(), y2.vertexNormals.push(x2);
            y2.color.copy(b2.color);
            for (var E2 = 0, T2 = M2.length; E2 < T2; E2++)
              _2 = M2[E2], y2.vertexColors.push(_2.clone());
            y2.materialIndex = b2.materialIndex + r2, s2.push(y2);
          }
          for (f2 = 0, m2 = h2.length; f2 < m2; f2++) {
            var A2 = h2[f2], L2 = [];
            if (void 0 !== A2) {
              for (var E2 = 0, T2 = A2.length; E2 < T2; E2++)
                L2.push(A2[E2].clone());
              u2.push(L2);
            }
          }
        }, mergeMesh: function(e2) {
          if (!e2 || !e2.isMesh)
            return void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.", e2);
          e2.matrixAutoUpdate && e2.updateMatrix(), this.merge(e2.geometry, e2.matrix);
        }, mergeVertices: function() {
          var e2, t2, r2, i2, n2, o2, a2, s2, c2 = {}, l2 = [], u2 = [], h2 = Math.pow(10, 4);
          for (r2 = 0, i2 = this.vertices.length; r2 < i2; r2++)
            e2 = this.vertices[r2], t2 = Math.round(e2.x * h2) + "_" + Math.round(e2.y * h2) + "_" + Math.round(e2.z * h2), void 0 === c2[t2] ? (c2[t2] = r2, l2.push(this.vertices[r2]), u2[r2] = l2.length - 1) : u2[r2] = u2[c2[t2]];
          var d2 = [];
          for (r2 = 0, i2 = this.faces.length; r2 < i2; r2++) {
            n2 = this.faces[r2], n2.a = u2[n2.a], n2.b = u2[n2.b], n2.c = u2[n2.c], o2 = [n2.a, n2.b, n2.c];
            for (var p2 = 0; p2 < 3; p2++)
              if (o2[p2] === o2[(p2 + 1) % 3]) {
                d2.push(r2);
                break;
              }
          }
          for (r2 = d2.length - 1; r2 >= 0; r2--) {
            var f2 = d2[r2];
            for (this.faces.splice(f2, 1), a2 = 0, s2 = this.faceVertexUvs.length; a2 < s2; a2++)
              this.faceVertexUvs[a2].splice(f2, 1);
          }
          var m2 = this.vertices.length - l2.length;
          return this.vertices = l2, m2;
        }, setFromPoints: function(e2) {
          this.vertices = [];
          for (var t2 = 0, r2 = e2.length; t2 < r2; t2++) {
            var i2 = e2[t2];
            this.vertices.push(new s(i2.x, i2.y, i2.z || 0));
          }
          return this;
        }, sortFacesByMaterialIndex: function() {
          function e2(e3, t3) {
            return e3.materialIndex - t3.materialIndex;
          }
          for (var t2 = this.faces, r2 = t2.length, i2 = 0; i2 < r2; i2++)
            t2[i2]._id = i2;
          t2.sort(e2);
          var n2, o2, a2 = this.faceVertexUvs[0], s2 = this.faceVertexUvs[1];
          a2 && a2.length === r2 && (n2 = []), s2 && s2.length === r2 && (o2 = []);
          for (var i2 = 0; i2 < r2; i2++) {
            var c2 = t2[i2]._id;
            n2 && n2.push(a2[c2]), o2 && o2.push(s2[c2]);
          }
          n2 && (this.faceVertexUvs[0] = n2), o2 && (this.faceVertexUvs[1] = o2);
        }, toJSON: function() {
          function e2(e3, t3, r3) {
            return r3 ? e3 | 1 << t3 : e3 & ~(1 << t3);
          }
          function t2(e3) {
            var t3 = e3.x.toString() + e3.y.toString() + e3.z.toString();
            return void 0 !== d2[t3] ? d2[t3] : (d2[t3] = h2.length / 3, h2.push(e3.x, e3.y, e3.z), d2[t3]);
          }
          function r2(e3) {
            var t3 = e3.r.toString() + e3.g.toString() + e3.b.toString();
            return void 0 !== f2[t3] ? f2[t3] : (f2[t3] = p2.length, p2.push(e3.getHex()), f2[t3]);
          }
          function i2(e3) {
            var t3 = e3.x.toString() + e3.y.toString();
            return void 0 !== v2[t3] ? v2[t3] : (v2[t3] = m2.length / 2, m2.push(e3.x, e3.y), v2[t3]);
          }
          var n2 = { metadata: { version: 4.5, type: "Geometry", generator: "Geometry.toJSON" } };
          if (n2.uuid = this.uuid, n2.type = this.type, "" !== this.name && (n2.name = this.name), void 0 !== this.parameters) {
            var o2 = this.parameters;
            for (var a2 in o2)
              void 0 !== o2[a2] && (n2[a2] = o2[a2]);
            return n2;
          }
          for (var s2 = [], c2 = 0; c2 < this.vertices.length; c2++) {
            var l2 = this.vertices[c2];
            s2.push(l2.x, l2.y, l2.z);
          }
          for (var u2 = [], h2 = [], d2 = {}, p2 = [], f2 = {}, m2 = [], v2 = {}, c2 = 0; c2 < this.faces.length; c2++) {
            var g2 = this.faces[c2], y2 = void 0 !== this.faceVertexUvs[0][c2], x2 = g2.normal.length() > 0, _2 = g2.vertexNormals.length > 0, b2 = 1 !== g2.color.r || 1 !== g2.color.g || 1 !== g2.color.b, w2 = g2.vertexColors.length > 0, M2 = 0;
            if (M2 = e2(M2, 0, 0), M2 = e2(M2, 1, true), M2 = e2(M2, 2, false), M2 = e2(M2, 3, y2), M2 = e2(M2, 4, x2), M2 = e2(M2, 5, _2), M2 = e2(M2, 6, b2), M2 = e2(M2, 7, w2), u2.push(M2), u2.push(g2.a, g2.b, g2.c), u2.push(g2.materialIndex), y2) {
              var E2 = this.faceVertexUvs[0][c2];
              u2.push(i2(E2[0]), i2(E2[1]), i2(E2[2]));
            }
            if (x2 && u2.push(t2(g2.normal)), _2) {
              var S2 = g2.vertexNormals;
              u2.push(t2(S2[0]), t2(S2[1]), t2(S2[2]));
            }
            if (b2 && u2.push(r2(g2.color)), w2) {
              var T2 = g2.vertexColors;
              u2.push(r2(T2[0]), r2(T2[1]), r2(T2[2]));
            }
          }
          return n2.data = {}, n2.data.vertices = s2, n2.data.normals = h2, p2.length > 0 && (n2.data.colors = p2), m2.length > 0 && (n2.data.uvs = [m2]), n2.data.faces = u2, n2;
        }, clone: function() {
          return new T().copy(this);
        }, copy: function(e2) {
          var t2, r2, i2, n2, o2, a2;
          this.vertices = [], this.colors = [], this.faces = [], this.faceVertexUvs = [[]], this.morphTargets = [], this.morphNormals = [], this.skinWeights = [], this.skinIndices = [], this.lineDistances = [], this.boundingBox = null, this.boundingSphere = null, this.name = e2.name;
          var s2 = e2.vertices;
          for (t2 = 0, r2 = s2.length; t2 < r2; t2++)
            this.vertices.push(s2[t2].clone());
          var c2 = e2.colors;
          for (t2 = 0, r2 = c2.length; t2 < r2; t2++)
            this.colors.push(c2[t2].clone());
          var l2 = e2.faces;
          for (t2 = 0, r2 = l2.length; t2 < r2; t2++)
            this.faces.push(l2[t2].clone());
          for (t2 = 0, r2 = e2.faceVertexUvs.length; t2 < r2; t2++) {
            var u2 = e2.faceVertexUvs[t2];
            for (void 0 === this.faceVertexUvs[t2] && (this.faceVertexUvs[t2] = []), i2 = 0, n2 = u2.length; i2 < n2; i2++) {
              var h2 = u2[i2], d2 = [];
              for (o2 = 0, a2 = h2.length; o2 < a2; o2++) {
                var p2 = h2[o2];
                d2.push(p2.clone());
              }
              this.faceVertexUvs[t2].push(d2);
            }
          }
          var f2 = e2.morphTargets;
          for (t2 = 0, r2 = f2.length; t2 < r2; t2++) {
            var m2 = {};
            if (m2.name = f2[t2].name, void 0 !== f2[t2].vertices)
              for (m2.vertices = [], i2 = 0, n2 = f2[t2].vertices.length; i2 < n2; i2++)
                m2.vertices.push(f2[t2].vertices[i2].clone());
            if (void 0 !== f2[t2].normals)
              for (m2.normals = [], i2 = 0, n2 = f2[t2].normals.length; i2 < n2; i2++)
                m2.normals.push(f2[t2].normals[i2].clone());
            this.morphTargets.push(m2);
          }
          var v2 = e2.morphNormals;
          for (t2 = 0, r2 = v2.length; t2 < r2; t2++) {
            var g2 = {};
            if (void 0 !== v2[t2].vertexNormals)
              for (g2.vertexNormals = [], i2 = 0, n2 = v2[t2].vertexNormals.length; i2 < n2; i2++) {
                var y2 = v2[t2].vertexNormals[i2], x2 = {};
                x2.a = y2.a.clone(), x2.b = y2.b.clone(), x2.c = y2.c.clone(), g2.vertexNormals.push(x2);
              }
            if (void 0 !== v2[t2].faceNormals)
              for (g2.faceNormals = [], i2 = 0, n2 = v2[t2].faceNormals.length; i2 < n2; i2++)
                g2.faceNormals.push(v2[t2].faceNormals[i2].clone());
            this.morphNormals.push(g2);
          }
          var _2 = e2.skinWeights;
          for (t2 = 0, r2 = _2.length; t2 < r2; t2++)
            this.skinWeights.push(_2[t2].clone());
          var b2 = e2.skinIndices;
          for (t2 = 0, r2 = b2.length; t2 < r2; t2++)
            this.skinIndices.push(b2[t2].clone());
          var w2 = e2.lineDistances;
          for (t2 = 0, r2 = w2.length; t2 < r2; t2++)
            this.lineDistances.push(w2[t2]);
          var M2 = e2.boundingBox;
          null !== M2 && (this.boundingBox = M2.clone());
          var E2 = e2.boundingSphere;
          return null !== E2 && (this.boundingSphere = E2.clone()), this.elementsNeedUpdate = e2.elementsNeedUpdate, this.verticesNeedUpdate = e2.verticesNeedUpdate, this.uvsNeedUpdate = e2.uvsNeedUpdate, this.normalsNeedUpdate = e2.normalsNeedUpdate, this.colorsNeedUpdate = e2.colorsNeedUpdate, this.lineDistancesNeedUpdate = e2.lineDistancesNeedUpdate, this.groupsNeedUpdate = e2.groupsNeedUpdate, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), Object.defineProperty(A.prototype, "needsUpdate", { set: function(e2) {
          true === e2 && this.version++;
        } }), Object.assign(A.prototype, { isBufferAttribute: true, onUploadCallback: function() {
        }, setArray: function(e2) {
          if (Array.isArray(e2))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          return this.count = void 0 !== e2 ? e2.length / this.itemSize : 0, this.array = e2, this;
        }, setDynamic: function(e2) {
          return this.dynamic = e2, this;
        }, copy: function(e2) {
          return this.name = e2.name, this.array = new e2.array.constructor(e2.array), this.itemSize = e2.itemSize, this.count = e2.count, this.normalized = e2.normalized, this.dynamic = e2.dynamic, this;
        }, copyAt: function(e2, t2, r2) {
          e2 *= this.itemSize, r2 *= t2.itemSize;
          for (var i2 = 0, n2 = this.itemSize; i2 < n2; i2++)
            this.array[e2 + i2] = t2.array[r2 + i2];
          return this;
        }, copyArray: function(e2) {
          return this.array.set(e2), this;
        }, copyColorsArray: function(e2) {
          for (var t2 = this.array, r2 = 0, i2 = 0, n2 = e2.length; i2 < n2; i2++) {
            var o2 = e2[i2];
            void 0 === o2 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i2), o2 = new y()), t2[r2++] = o2.r, t2[r2++] = o2.g, t2[r2++] = o2.b;
          }
          return this;
        }, copyVector2sArray: function(e2) {
          for (var t2 = this.array, r2 = 0, i2 = 0, o2 = e2.length; i2 < o2; i2++) {
            var a2 = e2[i2];
            void 0 === a2 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i2), a2 = new n()), t2[r2++] = a2.x, t2[r2++] = a2.y;
          }
          return this;
        }, copyVector3sArray: function(e2) {
          for (var t2 = this.array, r2 = 0, i2 = 0, n2 = e2.length; i2 < n2; i2++) {
            var o2 = e2[i2];
            void 0 === o2 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i2), o2 = new s()), t2[r2++] = o2.x, t2[r2++] = o2.y, t2[r2++] = o2.z;
          }
          return this;
        }, copyVector4sArray: function(e2) {
          for (var t2 = this.array, r2 = 0, i2 = 0, n2 = e2.length; i2 < n2; i2++) {
            var o2 = e2[i2];
            void 0 === o2 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i2), o2 = new u()), t2[r2++] = o2.x, t2[r2++] = o2.y, t2[r2++] = o2.z, t2[r2++] = o2.w;
          }
          return this;
        }, set: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.array.set(e2, t2), this;
        }, getX: function(e2) {
          return this.array[e2 * this.itemSize];
        }, setX: function(e2, t2) {
          return this.array[e2 * this.itemSize] = t2, this;
        }, getY: function(e2) {
          return this.array[e2 * this.itemSize + 1];
        }, setY: function(e2, t2) {
          return this.array[e2 * this.itemSize + 1] = t2, this;
        }, getZ: function(e2) {
          return this.array[e2 * this.itemSize + 2];
        }, setZ: function(e2, t2) {
          return this.array[e2 * this.itemSize + 2] = t2, this;
        }, getW: function(e2) {
          return this.array[e2 * this.itemSize + 3];
        }, setW: function(e2, t2) {
          return this.array[e2 * this.itemSize + 3] = t2, this;
        }, setXY: function(e2, t2, r2) {
          return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = r2, this;
        }, setXYZ: function(e2, t2, r2, i2) {
          return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = r2, this.array[e2 + 2] = i2, this;
        }, setXYZW: function(e2, t2, r2, i2, n2) {
          return e2 *= this.itemSize, this.array[e2 + 0] = t2, this.array[e2 + 1] = r2, this.array[e2 + 2] = i2, this.array[e2 + 3] = n2, this;
        }, onUpload: function(e2) {
          return this.onUploadCallback = e2, this;
        }, clone: function() {
          return new this.constructor(this.array, this.itemSize).copy(this);
        } }), L.prototype = Object.create(A.prototype), L.prototype.constructor = L, C.prototype = Object.create(A.prototype), C.prototype.constructor = C, R.prototype = Object.create(A.prototype), R.prototype.constructor = R, P.prototype = Object.create(A.prototype), P.prototype.constructor = P, D.prototype = Object.create(A.prototype), D.prototype.constructor = D, U.prototype = Object.create(A.prototype), U.prototype.constructor = U, I.prototype = Object.create(A.prototype), I.prototype.constructor = I, O.prototype = Object.create(A.prototype), O.prototype.constructor = O, N.prototype = Object.create(A.prototype), N.prototype.constructor = N, Object.assign(F.prototype, { computeGroups: function(e2) {
          for (var t2, r2 = [], i2 = void 0, n2 = e2.faces, o2 = 0; o2 < n2.length; o2++) {
            var a2 = n2[o2];
            a2.materialIndex !== i2 && (i2 = a2.materialIndex, void 0 !== t2 && (t2.count = 3 * o2 - t2.start, r2.push(t2)), t2 = { start: 3 * o2, materialIndex: i2 });
          }
          void 0 !== t2 && (t2.count = 3 * o2 - t2.start, r2.push(t2)), this.groups = r2;
        }, fromGeometry: function(e2) {
          var t2, r2 = e2.faces, i2 = e2.vertices, o2 = e2.faceVertexUvs, a2 = o2[0] && o2[0].length > 0, s2 = o2[1] && o2[1].length > 0, c2 = e2.morphTargets, l2 = c2.length;
          if (l2 > 0) {
            t2 = [];
            for (var u2 = 0; u2 < l2; u2++)
              t2[u2] = [];
            this.morphTargets.position = t2;
          }
          var h2, d2 = e2.morphNormals, p2 = d2.length;
          if (p2 > 0) {
            h2 = [];
            for (var u2 = 0; u2 < p2; u2++)
              h2[u2] = [];
            this.morphTargets.normal = h2;
          }
          for (var f2 = e2.skinIndices, m2 = e2.skinWeights, v2 = f2.length === i2.length, g2 = m2.length === i2.length, u2 = 0; u2 < r2.length; u2++) {
            var y2 = r2[u2];
            this.vertices.push(i2[y2.a], i2[y2.b], i2[y2.c]);
            var x2 = y2.vertexNormals;
            if (3 === x2.length)
              this.normals.push(x2[0], x2[1], x2[2]);
            else {
              var _2 = y2.normal;
              this.normals.push(_2, _2, _2);
            }
            var b2 = y2.vertexColors;
            if (3 === b2.length)
              this.colors.push(b2[0], b2[1], b2[2]);
            else {
              var w2 = y2.color;
              this.colors.push(w2, w2, w2);
            }
            if (true === a2) {
              var M2 = o2[0][u2];
              void 0 !== M2 ? this.uvs.push(M2[0], M2[1], M2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ", u2), this.uvs.push(new n(), new n(), new n()));
            }
            if (true === s2) {
              var M2 = o2[1][u2];
              void 0 !== M2 ? this.uvs2.push(M2[0], M2[1], M2[2]) : (console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ", u2), this.uvs2.push(new n(), new n(), new n()));
            }
            for (var E2 = 0; E2 < l2; E2++) {
              var S2 = c2[E2].vertices;
              t2[E2].push(S2[y2.a], S2[y2.b], S2[y2.c]);
            }
            for (var E2 = 0; E2 < p2; E2++) {
              var T2 = d2[E2].vertexNormals[u2];
              h2[E2].push(T2.a, T2.b, T2.c);
            }
            v2 && this.skinIndices.push(f2[y2.a], f2[y2.b], f2[y2.c]), g2 && this.skinWeights.push(m2[y2.a], m2[y2.b], m2[y2.c]);
          }
          return this.computeGroups(e2), this.verticesNeedUpdate = e2.verticesNeedUpdate, this.normalsNeedUpdate = e2.normalsNeedUpdate, this.colorsNeedUpdate = e2.colorsNeedUpdate, this.uvsNeedUpdate = e2.uvsNeedUpdate, this.groupsNeedUpdate = e2.groupsNeedUpdate, this;
        } });
        var qs = 1;
        B.prototype = Object.assign(Object.create(i.prototype), { constructor: B, isBufferGeometry: true, getIndex: function() {
          return this.index;
        }, setIndex: function(e2) {
          Array.isArray(e2) ? this.index = new (z(e2) > 65535 ? I : D)(e2, 1) : this.index = e2;
        }, addAttribute: function(e2, t2) {
          return t2 && t2.isBufferAttribute || t2 && t2.isInterleavedBufferAttribute ? "index" === e2 ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), void this.setIndex(t2)) : (this.attributes[e2] = t2, this) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), void this.addAttribute(e2, new A(arguments[1], arguments[2])));
        }, getAttribute: function(e2) {
          return this.attributes[e2];
        }, removeAttribute: function(e2) {
          return delete this.attributes[e2], this;
        }, addGroup: function(e2, t2, r2) {
          this.groups.push({ start: e2, count: t2, materialIndex: void 0 !== r2 ? r2 : 0 });
        }, clearGroups: function() {
          this.groups = [];
        }, setDrawRange: function(e2, t2) {
          this.drawRange.start = e2, this.drawRange.count = t2;
        }, applyMatrix: function(e2) {
          var t2 = this.attributes.position;
          void 0 !== t2 && (e2.applyToBufferAttribute(t2), t2.needsUpdate = true);
          var r2 = this.attributes.normal;
          if (void 0 !== r2) {
            new c().getNormalMatrix(e2).applyToBufferAttribute(r2), r2.needsUpdate = true;
          }
          return null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this;
        }, rotateX: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationX(t2), this.applyMatrix(e2), this;
          };
        }(), rotateY: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationY(t2), this.applyMatrix(e2), this;
          };
        }(), rotateZ: function() {
          var e2 = new o();
          return function(t2) {
            return e2.makeRotationZ(t2), this.applyMatrix(e2), this;
          };
        }(), translate: function() {
          var e2 = new o();
          return function(t2, r2, i2) {
            return e2.makeTranslation(t2, r2, i2), this.applyMatrix(e2), this;
          };
        }(), scale: function() {
          var e2 = new o();
          return function(t2, r2, i2) {
            return e2.makeScale(t2, r2, i2), this.applyMatrix(e2), this;
          };
        }(), lookAt: function() {
          var e2 = new w();
          return function(t2) {
            e2.lookAt(t2), e2.updateMatrix(), this.applyMatrix(e2.matrix);
          };
        }(), center: function() {
          var e2 = new s();
          return function() {
            return this.computeBoundingBox(), this.boundingBox.getCenter(e2).negate(), this.translate(e2.x, e2.y, e2.z), this;
          };
        }(), setFromObject: function(e2) {
          var t2 = e2.geometry;
          if (e2.isPoints || e2.isLine) {
            var r2 = new O(3 * t2.vertices.length, 3), i2 = new O(3 * t2.colors.length, 3);
            if (this.addAttribute("position", r2.copyVector3sArray(t2.vertices)), this.addAttribute("color", i2.copyColorsArray(t2.colors)), t2.lineDistances && t2.lineDistances.length === t2.vertices.length) {
              var n2 = new O(t2.lineDistances.length, 1);
              this.addAttribute("lineDistance", n2.copyArray(t2.lineDistances));
            }
            null !== t2.boundingSphere && (this.boundingSphere = t2.boundingSphere.clone()), null !== t2.boundingBox && (this.boundingBox = t2.boundingBox.clone());
          } else
            e2.isMesh && t2 && t2.isGeometry && this.fromGeometry(t2);
          return this;
        }, setFromPoints: function(e2) {
          for (var t2 = [], r2 = 0, i2 = e2.length; r2 < i2; r2++) {
            var n2 = e2[r2];
            t2.push(n2.x, n2.y, n2.z || 0);
          }
          return this.addAttribute("position", new O(t2, 3)), this;
        }, updateFromObject: function(e2) {
          var t2 = e2.geometry;
          if (e2.isMesh) {
            var r2 = t2.__directGeometry;
            if (true === t2.elementsNeedUpdate && (r2 = void 0, t2.elementsNeedUpdate = false), void 0 === r2)
              return this.fromGeometry(t2);
            r2.verticesNeedUpdate = t2.verticesNeedUpdate, r2.normalsNeedUpdate = t2.normalsNeedUpdate, r2.colorsNeedUpdate = t2.colorsNeedUpdate, r2.uvsNeedUpdate = t2.uvsNeedUpdate, r2.groupsNeedUpdate = t2.groupsNeedUpdate, t2.verticesNeedUpdate = false, t2.normalsNeedUpdate = false, t2.colorsNeedUpdate = false, t2.uvsNeedUpdate = false, t2.groupsNeedUpdate = false, t2 = r2;
          }
          var i2;
          return true === t2.verticesNeedUpdate && (i2 = this.attributes.position, void 0 !== i2 && (i2.copyVector3sArray(t2.vertices), i2.needsUpdate = true), t2.verticesNeedUpdate = false), true === t2.normalsNeedUpdate && (i2 = this.attributes.normal, void 0 !== i2 && (i2.copyVector3sArray(t2.normals), i2.needsUpdate = true), t2.normalsNeedUpdate = false), true === t2.colorsNeedUpdate && (i2 = this.attributes.color, void 0 !== i2 && (i2.copyColorsArray(t2.colors), i2.needsUpdate = true), t2.colorsNeedUpdate = false), t2.uvsNeedUpdate && (i2 = this.attributes.uv, void 0 !== i2 && (i2.copyVector2sArray(t2.uvs), i2.needsUpdate = true), t2.uvsNeedUpdate = false), t2.lineDistancesNeedUpdate && (i2 = this.attributes.lineDistance, void 0 !== i2 && (i2.copyArray(t2.lineDistances), i2.needsUpdate = true), t2.lineDistancesNeedUpdate = false), t2.groupsNeedUpdate && (t2.computeGroups(e2.geometry), this.groups = t2.groups, t2.groupsNeedUpdate = false), this;
        }, fromGeometry: function(e2) {
          return e2.__directGeometry = new F().fromGeometry(e2), this.fromDirectGeometry(e2.__directGeometry);
        }, fromDirectGeometry: function(e2) {
          var t2 = new Float32Array(3 * e2.vertices.length);
          if (this.addAttribute("position", new A(t2, 3).copyVector3sArray(e2.vertices)), e2.normals.length > 0) {
            var r2 = new Float32Array(3 * e2.normals.length);
            this.addAttribute("normal", new A(r2, 3).copyVector3sArray(e2.normals));
          }
          if (e2.colors.length > 0) {
            var i2 = new Float32Array(3 * e2.colors.length);
            this.addAttribute("color", new A(i2, 3).copyColorsArray(e2.colors));
          }
          if (e2.uvs.length > 0) {
            var n2 = new Float32Array(2 * e2.uvs.length);
            this.addAttribute("uv", new A(n2, 2).copyVector2sArray(e2.uvs));
          }
          if (e2.uvs2.length > 0) {
            var o2 = new Float32Array(2 * e2.uvs2.length);
            this.addAttribute("uv2", new A(o2, 2).copyVector2sArray(e2.uvs2));
          }
          this.groups = e2.groups;
          for (var a2 in e2.morphTargets) {
            for (var s2 = [], c2 = e2.morphTargets[a2], l2 = 0, u2 = c2.length; l2 < u2; l2++) {
              var h2 = c2[l2], d2 = new O(3 * h2.length, 3);
              s2.push(d2.copyVector3sArray(h2));
            }
            this.morphAttributes[a2] = s2;
          }
          if (e2.skinIndices.length > 0) {
            var p2 = new O(4 * e2.skinIndices.length, 4);
            this.addAttribute("skinIndex", p2.copyVector4sArray(e2.skinIndices));
          }
          if (e2.skinWeights.length > 0) {
            var f2 = new O(4 * e2.skinWeights.length, 4);
            this.addAttribute("skinWeight", f2.copyVector4sArray(e2.skinWeights));
          }
          return null !== e2.boundingSphere && (this.boundingSphere = e2.boundingSphere.clone()), null !== e2.boundingBox && (this.boundingBox = e2.boundingBox.clone()), this;
        }, computeBoundingBox: function() {
          null === this.boundingBox && (this.boundingBox = new f());
          var e2 = this.attributes.position;
          void 0 !== e2 ? this.boundingBox.setFromBufferAttribute(e2) : this.boundingBox.makeEmpty(), (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
        }, computeBoundingSphere: function() {
          var e2 = new f(), t2 = new s();
          return function() {
            null === this.boundingSphere && (this.boundingSphere = new m());
            var r2 = this.attributes.position;
            if (r2) {
              var i2 = this.boundingSphere.center;
              e2.setFromBufferAttribute(r2), e2.getCenter(i2);
              for (var n2 = 0, o2 = 0, a2 = r2.count; o2 < a2; o2++)
                t2.x = r2.getX(o2), t2.y = r2.getY(o2), t2.z = r2.getZ(o2), n2 = Math.max(n2, i2.distanceToSquared(t2));
              this.boundingSphere.radius = Math.sqrt(n2), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
            }
          };
        }(), computeFaceNormals: function() {
        }, computeVertexNormals: function() {
          var e2 = this.index, t2 = this.attributes, r2 = this.groups;
          if (t2.position) {
            var i2 = t2.position.array;
            if (void 0 === t2.normal)
              this.addAttribute("normal", new A(new Float32Array(i2.length), 3));
            else
              for (var n2 = t2.normal.array, o2 = 0, a2 = n2.length; o2 < a2; o2++)
                n2[o2] = 0;
            var c2, l2, u2, h2 = t2.normal.array, d2 = new s(), p2 = new s(), f2 = new s(), m2 = new s(), v2 = new s();
            if (e2) {
              var g2 = e2.array;
              0 === r2.length && this.addGroup(0, g2.length);
              for (var y2 = 0, x2 = r2.length; y2 < x2; ++y2)
                for (var _2 = r2[y2], b2 = _2.start, w2 = _2.count, o2 = b2, a2 = b2 + w2; o2 < a2; o2 += 3)
                  c2 = 3 * g2[o2 + 0], l2 = 3 * g2[o2 + 1], u2 = 3 * g2[o2 + 2], d2.fromArray(i2, c2), p2.fromArray(i2, l2), f2.fromArray(i2, u2), m2.subVectors(f2, p2), v2.subVectors(d2, p2), m2.cross(v2), h2[c2] += m2.x, h2[c2 + 1] += m2.y, h2[c2 + 2] += m2.z, h2[l2] += m2.x, h2[l2 + 1] += m2.y, h2[l2 + 2] += m2.z, h2[u2] += m2.x, h2[u2 + 1] += m2.y, h2[u2 + 2] += m2.z;
            } else
              for (var o2 = 0, a2 = i2.length; o2 < a2; o2 += 9)
                d2.fromArray(i2, o2), p2.fromArray(i2, o2 + 3), f2.fromArray(i2, o2 + 6), m2.subVectors(f2, p2), v2.subVectors(d2, p2), m2.cross(v2), h2[o2] = m2.x, h2[o2 + 1] = m2.y, h2[o2 + 2] = m2.z, h2[o2 + 3] = m2.x, h2[o2 + 4] = m2.y, h2[o2 + 5] = m2.z, h2[o2 + 6] = m2.x, h2[o2 + 7] = m2.y, h2[o2 + 8] = m2.z;
            this.normalizeNormals(), t2.normal.needsUpdate = true;
          }
        }, merge: function(e2, t2) {
          if (!e2 || !e2.isBufferGeometry)
            return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", e2);
          void 0 === t2 && (t2 = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
          var r2 = this.attributes;
          for (var i2 in r2)
            if (void 0 !== e2.attributes[i2])
              for (var n2 = r2[i2], o2 = n2.array, a2 = e2.attributes[i2], s2 = a2.array, c2 = a2.itemSize, l2 = 0, u2 = c2 * t2; l2 < s2.length; l2++, u2++)
                o2[u2] = s2[l2];
          return this;
        }, normalizeNormals: function() {
          var e2 = new s();
          return function() {
            for (var t2 = this.attributes.normal, r2 = 0, i2 = t2.count; r2 < i2; r2++)
              e2.x = t2.getX(r2), e2.y = t2.getY(r2), e2.z = t2.getZ(r2), e2.normalize(), t2.setXYZ(r2, e2.x, e2.y, e2.z);
          };
        }(), toNonIndexed: function() {
          if (null === this.index)
            return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."), this;
          var e2 = new B(), t2 = this.index.array, r2 = this.attributes;
          for (var i2 in r2) {
            for (var n2 = r2[i2], o2 = n2.array, a2 = n2.itemSize, s2 = new o2.constructor(t2.length * a2), c2 = 0, l2 = 0, u2 = 0, h2 = t2.length; u2 < h2; u2++) {
              c2 = t2[u2] * a2;
              for (var d2 = 0; d2 < a2; d2++)
                s2[l2++] = o2[c2++];
            }
            e2.addAttribute(i2, new A(s2, a2));
          }
          for (var p2 = this.groups, u2 = 0, h2 = p2.length; u2 < h2; u2++) {
            var f2 = p2[u2];
            e2.addGroup(f2.start, f2.count, f2.materialIndex);
          }
          return e2;
        }, toJSON: function() {
          var e2 = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
          if (e2.uuid = this.uuid, e2.type = this.type, "" !== this.name && (e2.name = this.name), void 0 !== this.parameters) {
            var t2 = this.parameters;
            for (var r2 in t2)
              void 0 !== t2[r2] && (e2[r2] = t2[r2]);
            return e2;
          }
          e2.data = { attributes: {} };
          var i2 = this.index;
          if (null !== i2) {
            var n2 = Array.prototype.slice.call(i2.array);
            e2.data.index = { type: i2.array.constructor.name, array: n2 };
          }
          var o2 = this.attributes;
          for (var r2 in o2) {
            var a2 = o2[r2], n2 = Array.prototype.slice.call(a2.array);
            e2.data.attributes[r2] = { itemSize: a2.itemSize, type: a2.array.constructor.name, array: n2, normalized: a2.normalized };
          }
          var s2 = this.groups;
          s2.length > 0 && (e2.data.groups = JSON.parse(JSON.stringify(s2)));
          var c2 = this.boundingSphere;
          return null !== c2 && (e2.data.boundingSphere = { center: c2.center.toArray(), radius: c2.radius }), e2;
        }, clone: function() {
          return new B().copy(this);
        }, copy: function(e2) {
          var t2, r2, i2;
          this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.name = e2.name;
          var n2 = e2.index;
          null !== n2 && this.setIndex(n2.clone());
          var o2 = e2.attributes;
          for (t2 in o2) {
            var a2 = o2[t2];
            this.addAttribute(t2, a2.clone());
          }
          var s2 = e2.morphAttributes;
          for (t2 in s2) {
            var c2 = [], l2 = s2[t2];
            for (r2 = 0, i2 = l2.length; r2 < i2; r2++)
              c2.push(l2[r2].clone());
            this.morphAttributes[t2] = c2;
          }
          var u2 = e2.groups;
          for (r2 = 0, i2 = u2.length; r2 < i2; r2++) {
            var h2 = u2[r2];
            this.addGroup(h2.start, h2.count, h2.materialIndex);
          }
          var d2 = e2.boundingBox;
          null !== d2 && (this.boundingBox = d2.clone());
          var p2 = e2.boundingSphere;
          return null !== p2 && (this.boundingSphere = p2.clone()), this.drawRange.start = e2.drawRange.start, this.drawRange.count = e2.drawRange.count, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), G.prototype = Object.create(T.prototype), G.prototype.constructor = G, H.prototype = Object.create(B.prototype), H.prototype.constructor = H, j.prototype = Object.create(T.prototype), j.prototype.constructor = j, V.prototype = Object.create(B.prototype), V.prototype.constructor = V;
        var Ys = 0;
        k.prototype = Object.assign(Object.create(i.prototype), { constructor: k, isMaterial: true, onBeforeCompile: function() {
        }, setValues: function(e2) {
          if (void 0 !== e2)
            for (var t2 in e2) {
              var r2 = e2[t2];
              if (void 0 !== r2)
                if ("shading" !== t2) {
                  var i2 = this[t2];
                  void 0 !== i2 ? i2 && i2.isColor ? i2.set(r2) : i2 && i2.isVector3 && r2 && r2.isVector3 ? i2.copy(r2) : this[t2] = "overdraw" === t2 ? Number(r2) : r2 : console.warn("THREE." + this.type + ": '" + t2 + "' is not a property of this material.");
                } else
                  console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === r2;
              else
                console.warn("THREE.Material: '" + t2 + "' parameter is undefined.");
            }
        }, toJSON: function(e2) {
          function t2(e3) {
            var t3 = [];
            for (var r3 in e3) {
              var i3 = e3[r3];
              delete i3.metadata, t3.push(i3);
            }
            return t3;
          }
          var r2 = void 0 === e2 || "string" == typeof e2;
          r2 && (e2 = { textures: {}, images: {} });
          var i2 = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } };
          if (i2.uuid = this.uuid, i2.type = this.type, "" !== this.name && (i2.name = this.name), this.color && this.color.isColor && (i2.color = this.color.getHex()), void 0 !== this.roughness && (i2.roughness = this.roughness), void 0 !== this.metalness && (i2.metalness = this.metalness), this.emissive && this.emissive.isColor && (i2.emissive = this.emissive.getHex()), 1 !== this.emissiveIntensity && (i2.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i2.specular = this.specular.getHex()), void 0 !== this.shininess && (i2.shininess = this.shininess), void 0 !== this.clearCoat && (i2.clearCoat = this.clearCoat), void 0 !== this.clearCoatRoughness && (i2.clearCoatRoughness = this.clearCoatRoughness), this.map && this.map.isTexture && (i2.map = this.map.toJSON(e2).uuid), this.alphaMap && this.alphaMap.isTexture && (i2.alphaMap = this.alphaMap.toJSON(e2).uuid), this.lightMap && this.lightMap.isTexture && (i2.lightMap = this.lightMap.toJSON(e2).uuid), this.bumpMap && this.bumpMap.isTexture && (i2.bumpMap = this.bumpMap.toJSON(e2).uuid, i2.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i2.normalMap = this.normalMap.toJSON(e2).uuid, i2.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i2.displacementMap = this.displacementMap.toJSON(e2).uuid, i2.displacementScale = this.displacementScale, i2.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i2.roughnessMap = this.roughnessMap.toJSON(e2).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i2.metalnessMap = this.metalnessMap.toJSON(e2).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i2.emissiveMap = this.emissiveMap.toJSON(e2).uuid), this.specularMap && this.specularMap.isTexture && (i2.specularMap = this.specularMap.toJSON(e2).uuid), this.envMap && this.envMap.isTexture && (i2.envMap = this.envMap.toJSON(e2).uuid, i2.reflectivity = this.reflectivity), this.gradientMap && this.gradientMap.isTexture && (i2.gradientMap = this.gradientMap.toJSON(e2).uuid), void 0 !== this.size && (i2.size = this.size), void 0 !== this.sizeAttenuation && (i2.sizeAttenuation = this.sizeAttenuation), this.blending !== Fo && (i2.blending = this.blending), true === this.flatShading && (i2.flatShading = this.flatShading), this.side !== Ro && (i2.side = this.side), this.vertexColors !== Uo && (i2.vertexColors = this.vertexColors), this.opacity < 1 && (i2.opacity = this.opacity), true === this.transparent && (i2.transparent = this.transparent), i2.depthFunc = this.depthFunc, i2.depthTest = this.depthTest, i2.depthWrite = this.depthWrite, 0 !== this.rotation && (i2.rotation = this.rotation), 1 !== this.linewidth && (i2.linewidth = this.linewidth), void 0 !== this.dashSize && (i2.dashSize = this.dashSize), void 0 !== this.gapSize && (i2.gapSize = this.gapSize), void 0 !== this.scale && (i2.scale = this.scale), true === this.dithering && (i2.dithering = true), this.alphaTest > 0 && (i2.alphaTest = this.alphaTest), true === this.premultipliedAlpha && (i2.premultipliedAlpha = this.premultipliedAlpha), true === this.wireframe && (i2.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (i2.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (i2.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (i2.wireframeLinejoin = this.wireframeLinejoin), true === this.morphTargets && (i2.morphTargets = true), true === this.skinning && (i2.skinning = true), false === this.visible && (i2.visible = false), "{}" !== JSON.stringify(this.userData) && (i2.userData = this.userData), r2) {
            var n2 = t2(e2.textures), o2 = t2(e2.images);
            n2.length > 0 && (i2.textures = n2), o2.length > 0 && (i2.images = o2);
          }
          return i2;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          this.name = e2.name, this.fog = e2.fog, this.lights = e2.lights, this.blending = e2.blending, this.side = e2.side, this.flatShading = e2.flatShading, this.vertexColors = e2.vertexColors, this.opacity = e2.opacity, this.transparent = e2.transparent, this.blendSrc = e2.blendSrc, this.blendDst = e2.blendDst, this.blendEquation = e2.blendEquation, this.blendSrcAlpha = e2.blendSrcAlpha, this.blendDstAlpha = e2.blendDstAlpha, this.blendEquationAlpha = e2.blendEquationAlpha, this.depthFunc = e2.depthFunc, this.depthTest = e2.depthTest, this.depthWrite = e2.depthWrite, this.colorWrite = e2.colorWrite, this.precision = e2.precision, this.polygonOffset = e2.polygonOffset, this.polygonOffsetFactor = e2.polygonOffsetFactor, this.polygonOffsetUnits = e2.polygonOffsetUnits, this.dithering = e2.dithering, this.alphaTest = e2.alphaTest, this.premultipliedAlpha = e2.premultipliedAlpha, this.overdraw = e2.overdraw, this.visible = e2.visible, this.userData = JSON.parse(JSON.stringify(e2.userData)), this.clipShadows = e2.clipShadows, this.clipIntersection = e2.clipIntersection;
          var t2 = e2.clippingPlanes, r2 = null;
          if (null !== t2) {
            var i2 = t2.length;
            r2 = new Array(i2);
            for (var n2 = 0; n2 !== i2; ++n2)
              r2[n2] = t2[n2].clone();
          }
          return this.clippingPlanes = r2, this.shadowSide = e2.shadowSide, this;
        }, dispose: function() {
          this.dispatchEvent({ type: "dispose" });
        } }), W.prototype = Object.create(k.prototype), W.prototype.constructor = W, W.prototype.isMeshBasicMaterial = true, W.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this;
        }, X.prototype = Object.create(k.prototype), X.prototype.constructor = X, X.prototype.isShaderMaterial = true, X.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.fragmentShader = e2.fragmentShader, this.vertexShader = e2.vertexShader, this.uniforms = Hs.clone(e2.uniforms), this.defines = Object.assign({}, e2.defines), this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.lights = e2.lights, this.clipping = e2.clipping, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this.extensions = e2.extensions, this;
        }, X.prototype.toJSON = function(e2) {
          var t2 = k.prototype.toJSON.call(this, e2);
          return t2.uniforms = this.uniforms, t2.vertexShader = this.vertexShader, t2.fragmentShader = this.fragmentShader, t2;
        }, Object.assign(q.prototype, { set: function(e2, t2) {
          return this.origin.copy(e2), this.direction.copy(t2), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.origin.copy(e2.origin), this.direction.copy(e2.direction), this;
        }, at: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Ray: .at() target is now required"), t2 = new s()), t2.copy(this.direction).multiplyScalar(e2).add(this.origin);
        }, lookAt: function(e2) {
          return this.direction.copy(e2).sub(this.origin).normalize(), this;
        }, recast: function() {
          var e2 = new s();
          return function(t2) {
            return this.origin.copy(this.at(t2, e2)), this;
          };
        }(), closestPointToPoint: function(e2, t2) {
          void 0 === t2 && (console.warn("THREE.Ray: .closestPointToPoint() target is now required"), t2 = new s()), t2.subVectors(e2, this.origin);
          var r2 = t2.dot(this.direction);
          return r2 < 0 ? t2.copy(this.origin) : t2.copy(this.direction).multiplyScalar(r2).add(this.origin);
        }, distanceToPoint: function(e2) {
          return Math.sqrt(this.distanceSqToPoint(e2));
        }, distanceSqToPoint: function() {
          var e2 = new s();
          return function(t2) {
            var r2 = e2.subVectors(t2, this.origin).dot(this.direction);
            return r2 < 0 ? this.origin.distanceToSquared(t2) : (e2.copy(this.direction).multiplyScalar(r2).add(this.origin), e2.distanceToSquared(t2));
          };
        }(), distanceSqToSegment: function() {
          var e2 = new s(), t2 = new s(), r2 = new s();
          return function(i2, n2, o2, a2) {
            e2.copy(i2).add(n2).multiplyScalar(0.5), t2.copy(n2).sub(i2).normalize(), r2.copy(this.origin).sub(e2);
            var s2, c2, l2, u2, h2 = 0.5 * i2.distanceTo(n2), d2 = -this.direction.dot(t2), p2 = r2.dot(this.direction), f2 = -r2.dot(t2), m2 = r2.lengthSq(), v2 = Math.abs(1 - d2 * d2);
            if (v2 > 0)
              if (s2 = d2 * f2 - p2, c2 = d2 * p2 - f2, u2 = h2 * v2, s2 >= 0)
                if (c2 >= -u2)
                  if (c2 <= u2) {
                    var g2 = 1 / v2;
                    s2 *= g2, c2 *= g2, l2 = s2 * (s2 + d2 * c2 + 2 * p2) + c2 * (d2 * s2 + c2 + 2 * f2) + m2;
                  } else
                    c2 = h2, s2 = Math.max(0, -(d2 * c2 + p2)), l2 = -s2 * s2 + c2 * (c2 + 2 * f2) + m2;
                else
                  c2 = -h2, s2 = Math.max(0, -(d2 * c2 + p2)), l2 = -s2 * s2 + c2 * (c2 + 2 * f2) + m2;
              else
                c2 <= -u2 ? (s2 = Math.max(0, -(-d2 * h2 + p2)), c2 = s2 > 0 ? -h2 : Math.min(Math.max(-h2, -f2), h2), l2 = -s2 * s2 + c2 * (c2 + 2 * f2) + m2) : c2 <= u2 ? (s2 = 0, c2 = Math.min(Math.max(-h2, -f2), h2), l2 = c2 * (c2 + 2 * f2) + m2) : (s2 = Math.max(0, -(d2 * h2 + p2)), c2 = s2 > 0 ? h2 : Math.min(Math.max(-h2, -f2), h2), l2 = -s2 * s2 + c2 * (c2 + 2 * f2) + m2);
            else
              c2 = d2 > 0 ? -h2 : h2, s2 = Math.max(0, -(d2 * c2 + p2)), l2 = -s2 * s2 + c2 * (c2 + 2 * f2) + m2;
            return o2 && o2.copy(this.direction).multiplyScalar(s2).add(this.origin), a2 && a2.copy(t2).multiplyScalar(c2).add(e2), l2;
          };
        }(), intersectSphere: function() {
          var e2 = new s();
          return function(t2, r2) {
            e2.subVectors(t2.center, this.origin);
            var i2 = e2.dot(this.direction), n2 = e2.dot(e2) - i2 * i2, o2 = t2.radius * t2.radius;
            if (n2 > o2)
              return null;
            var a2 = Math.sqrt(o2 - n2), s2 = i2 - a2, c2 = i2 + a2;
            return s2 < 0 && c2 < 0 ? null : s2 < 0 ? this.at(c2, r2) : this.at(s2, r2);
          };
        }(), intersectsSphere: function(e2) {
          return this.distanceToPoint(e2.center) <= e2.radius;
        }, distanceToPlane: function(e2) {
          var t2 = e2.normal.dot(this.direction);
          if (0 === t2)
            return 0 === e2.distanceToPoint(this.origin) ? 0 : null;
          var r2 = -(this.origin.dot(e2.normal) + e2.constant) / t2;
          return r2 >= 0 ? r2 : null;
        }, intersectPlane: function(e2, t2) {
          var r2 = this.distanceToPlane(e2);
          return null === r2 ? null : this.at(r2, t2);
        }, intersectsPlane: function(e2) {
          var t2 = e2.distanceToPoint(this.origin);
          return 0 === t2 || e2.normal.dot(this.direction) * t2 < 0;
        }, intersectBox: function(e2, t2) {
          var r2, i2, n2, o2, a2, s2, c2 = 1 / this.direction.x, l2 = 1 / this.direction.y, u2 = 1 / this.direction.z, h2 = this.origin;
          return c2 >= 0 ? (r2 = (e2.min.x - h2.x) * c2, i2 = (e2.max.x - h2.x) * c2) : (r2 = (e2.max.x - h2.x) * c2, i2 = (e2.min.x - h2.x) * c2), l2 >= 0 ? (n2 = (e2.min.y - h2.y) * l2, o2 = (e2.max.y - h2.y) * l2) : (n2 = (e2.max.y - h2.y) * l2, o2 = (e2.min.y - h2.y) * l2), r2 > o2 || n2 > i2 ? null : ((n2 > r2 || r2 !== r2) && (r2 = n2), (o2 < i2 || i2 !== i2) && (i2 = o2), u2 >= 0 ? (a2 = (e2.min.z - h2.z) * u2, s2 = (e2.max.z - h2.z) * u2) : (a2 = (e2.max.z - h2.z) * u2, s2 = (e2.min.z - h2.z) * u2), r2 > s2 || a2 > i2 ? null : ((a2 > r2 || r2 !== r2) && (r2 = a2), (s2 < i2 || i2 !== i2) && (i2 = s2), i2 < 0 ? null : this.at(r2 >= 0 ? r2 : i2, t2)));
        }, intersectsBox: function() {
          var e2 = new s();
          return function(t2) {
            return null !== this.intersectBox(t2, e2);
          };
        }(), intersectTriangle: function() {
          var e2 = new s(), t2 = new s(), r2 = new s(), i2 = new s();
          return function(n2, o2, a2, s2, c2) {
            t2.subVectors(o2, n2), r2.subVectors(a2, n2), i2.crossVectors(t2, r2);
            var l2, u2 = this.direction.dot(i2);
            if (u2 > 0) {
              if (s2)
                return null;
              l2 = 1;
            } else {
              if (!(u2 < 0))
                return null;
              l2 = -1, u2 = -u2;
            }
            e2.subVectors(this.origin, n2);
            var h2 = l2 * this.direction.dot(r2.crossVectors(e2, r2));
            if (h2 < 0)
              return null;
            var d2 = l2 * this.direction.dot(t2.cross(e2));
            if (d2 < 0)
              return null;
            if (h2 + d2 > u2)
              return null;
            var p2 = -l2 * e2.dot(i2);
            return p2 < 0 ? null : this.at(p2 / u2, c2);
          };
        }(), applyMatrix4: function(e2) {
          return this.origin.applyMatrix4(e2), this.direction.transformDirection(e2), this;
        }, equals: function(e2) {
          return e2.origin.equals(this.origin) && e2.direction.equals(this.direction);
        } }), Object.assign(Y.prototype, { set: function(e2, t2) {
          return this.start.copy(e2), this.end.copy(t2), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.start.copy(e2.start), this.end.copy(e2.end), this;
        }, getCenter: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Line3: .getCenter() target is now required"), e2 = new s()), e2.addVectors(this.start, this.end).multiplyScalar(0.5);
        }, delta: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Line3: .delta() target is now required"), e2 = new s()), e2.subVectors(this.end, this.start);
        }, distanceSq: function() {
          return this.start.distanceToSquared(this.end);
        }, distance: function() {
          return this.start.distanceTo(this.end);
        }, at: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Line3: .at() target is now required"), t2 = new s()), this.delta(t2).multiplyScalar(e2).add(this.start);
        }, closestPointToPointParameter: function() {
          var e2 = new s(), t2 = new s();
          return function(r2, i2) {
            e2.subVectors(r2, this.start), t2.subVectors(this.end, this.start);
            var n2 = t2.dot(t2), o2 = t2.dot(e2), a2 = o2 / n2;
            return i2 && (a2 = zs.clamp(a2, 0, 1)), a2;
          };
        }(), closestPointToPoint: function(e2, t2, r2) {
          var i2 = this.closestPointToPointParameter(e2, t2);
          return void 0 === r2 && (console.warn("THREE.Line3: .closestPointToPoint() target is now required"), r2 = new s()), this.delta(r2).multiplyScalar(i2).add(this.start);
        }, applyMatrix4: function(e2) {
          return this.start.applyMatrix4(e2), this.end.applyMatrix4(e2), this;
        }, equals: function(e2) {
          return e2.start.equals(this.start) && e2.end.equals(this.end);
        } }), Object.assign(Z, { getNormal: function() {
          var e2 = new s();
          return function(t2, r2, i2, n2) {
            void 0 === n2 && (console.warn("THREE.Triangle: .getNormal() target is now required"), n2 = new s()), n2.subVectors(i2, r2), e2.subVectors(t2, r2), n2.cross(e2);
            var o2 = n2.lengthSq();
            return o2 > 0 ? n2.multiplyScalar(1 / Math.sqrt(o2)) : n2.set(0, 0, 0);
          };
        }(), getBarycoord: function() {
          var e2 = new s(), t2 = new s(), r2 = new s();
          return function(i2, n2, o2, a2, c2) {
            e2.subVectors(a2, n2), t2.subVectors(o2, n2), r2.subVectors(i2, n2);
            var l2 = e2.dot(e2), u2 = e2.dot(t2), h2 = e2.dot(r2), d2 = t2.dot(t2), p2 = t2.dot(r2), f2 = l2 * d2 - u2 * u2;
            if (void 0 === c2 && (console.warn("THREE.Triangle: .getBarycoord() target is now required"), c2 = new s()), 0 === f2)
              return c2.set(-2, -1, -1);
            var m2 = 1 / f2, v2 = (d2 * h2 - u2 * p2) * m2, g2 = (l2 * p2 - u2 * h2) * m2;
            return c2.set(1 - v2 - g2, g2, v2);
          };
        }(), containsPoint: function() {
          var e2 = new s();
          return function(t2, r2, i2, n2) {
            return Z.getBarycoord(t2, r2, i2, n2, e2), e2.x >= 0 && e2.y >= 0 && e2.x + e2.y <= 1;
          };
        }() }), Object.assign(Z.prototype, { set: function(e2, t2, r2) {
          return this.a.copy(e2), this.b.copy(t2), this.c.copy(r2), this;
        }, setFromPointsAndIndices: function(e2, t2, r2, i2) {
          return this.a.copy(e2[t2]), this.b.copy(e2[r2]), this.c.copy(e2[i2]), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.a.copy(e2.a), this.b.copy(e2.b), this.c.copy(e2.c), this;
        }, getArea: function() {
          var e2 = new s(), t2 = new s();
          return function() {
            return e2.subVectors(this.c, this.b), t2.subVectors(this.a, this.b), 0.5 * e2.cross(t2).length();
          };
        }(), getMidpoint: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Triangle: .getMidpoint() target is now required"), e2 = new s()), e2.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
        }, getNormal: function(e2) {
          return Z.getNormal(this.a, this.b, this.c, e2);
        }, getPlane: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Triangle: .getPlane() target is now required"), e2 = new s()), e2.setFromCoplanarPoints(this.a, this.b, this.c);
        }, getBarycoord: function(e2, t2) {
          return Z.getBarycoord(e2, this.a, this.b, this.c, t2);
        }, containsPoint: function(e2) {
          return Z.containsPoint(e2, this.a, this.b, this.c);
        }, intersectsBox: function(e2) {
          return e2.intersectsTriangle(this);
        }, closestPointToPoint: function() {
          var e2 = new v(), t2 = [new Y(), new Y(), new Y()], r2 = new s(), i2 = new s();
          return function(n2, o2) {
            void 0 === o2 && (console.warn("THREE.Triangle: .closestPointToPoint() target is now required"), o2 = new s());
            var a2 = 1 / 0;
            if (e2.setFromCoplanarPoints(this.a, this.b, this.c), e2.projectPoint(n2, r2), true === this.containsPoint(r2))
              o2.copy(r2);
            else {
              t2[0].set(this.a, this.b), t2[1].set(this.b, this.c), t2[2].set(this.c, this.a);
              for (var c2 = 0; c2 < t2.length; c2++) {
                t2[c2].closestPointToPoint(r2, true, i2);
                var l2 = r2.distanceToSquared(i2);
                l2 < a2 && (a2 = l2, o2.copy(i2));
              }
            }
            return o2;
          };
        }(), equals: function(e2) {
          return e2.a.equals(this.a) && e2.b.equals(this.b) && e2.c.equals(this.c);
        } }), J.prototype = Object.assign(Object.create(w.prototype), { constructor: J, isMesh: true, setDrawMode: function(e2) {
          this.drawMode = e2;
        }, copy: function(e2) {
          return w.prototype.copy.call(this, e2), this.drawMode = e2.drawMode, void 0 !== e2.morphTargetInfluences && (this.morphTargetInfluences = e2.morphTargetInfluences.slice()), void 0 !== e2.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, e2.morphTargetDictionary)), this;
        }, updateMorphTargets: function() {
          var e2, t2, r2, i2 = this.geometry;
          if (i2.isBufferGeometry) {
            var n2 = i2.morphAttributes, o2 = Object.keys(n2);
            if (o2.length > 0) {
              var a2 = n2[o2[0]];
              if (void 0 !== a2)
                for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e2 = 0, t2 = a2.length; e2 < t2; e2++)
                  r2 = a2[e2].name || String(e2), this.morphTargetInfluences.push(0), this.morphTargetDictionary[r2] = e2;
            }
          } else {
            var s2 = i2.morphTargets;
            if (void 0 !== s2 && s2.length > 0)
              for (this.morphTargetInfluences = [], this.morphTargetDictionary = {}, e2 = 0, t2 = s2.length; e2 < t2; e2++)
                r2 = s2[e2].name || String(e2), this.morphTargetInfluences.push(0), this.morphTargetDictionary[r2] = e2;
          }
        }, raycast: function() {
          function e2(e3, t3, r3, i3, n2, o2, a3) {
            return Z.getBarycoord(e3, t3, r3, i3, x2), n2.multiplyScalar(x2.x), o2.multiplyScalar(x2.y), a3.multiplyScalar(x2.z), n2.add(o2).add(a3), n2.clone();
          }
          function t2(e3, t3, r3, i3, n2, o2, a3, s2) {
            if (null === (t3.side === Po ? i3.intersectTriangle(a3, o2, n2, true, s2) : i3.intersectTriangle(n2, o2, a3, t3.side !== Do, s2)))
              return null;
            b2.copy(s2), b2.applyMatrix4(e3.matrixWorld);
            var c3 = r3.ray.origin.distanceTo(b2);
            return c3 < r3.near || c3 > r3.far ? null : { distance: c3, point: b2.clone(), object: e3 };
          }
          function r2(r3, i3, n2, o2, a3, s2, c3, d3) {
            l2.fromBufferAttribute(o2, s2), u2.fromBufferAttribute(o2, c3), h2.fromBufferAttribute(o2, d3);
            var p3 = t2(r3, r3.material, i3, n2, l2, u2, h2, _2);
            if (p3) {
              a3 && (v2.fromBufferAttribute(a3, s2), g2.fromBufferAttribute(a3, c3), y2.fromBufferAttribute(a3, d3), p3.uv = e2(_2, l2, u2, h2, v2, g2, y2));
              var f3 = new S(s2, c3, d3);
              Z.getNormal(l2, u2, h2, f3.normal), p3.face = f3, p3.faceIndex = s2;
            }
            return p3;
          }
          var i2 = new o(), a2 = new q(), c2 = new m(), l2 = new s(), u2 = new s(), h2 = new s(), d2 = new s(), p2 = new s(), f2 = new s(), v2 = new n(), g2 = new n(), y2 = new n(), x2 = new s(), _2 = new s(), b2 = new s();
          return function(n2, o2) {
            var s2 = this.geometry, m2 = this.material, x3 = this.matrixWorld;
            if (void 0 !== m2 && (null === s2.boundingSphere && s2.computeBoundingSphere(), c2.copy(s2.boundingSphere), c2.applyMatrix4(x3), false !== n2.ray.intersectsSphere(c2) && (i2.getInverse(x3), a2.copy(n2.ray).applyMatrix4(i2), null === s2.boundingBox || false !== a2.intersectsBox(s2.boundingBox)))) {
              var b3;
              if (s2.isBufferGeometry) {
                var w2, M2, E2, S2, T2, A2 = s2.index, L2 = s2.attributes.position, C2 = s2.attributes.uv;
                if (null !== A2)
                  for (S2 = 0, T2 = A2.count; S2 < T2; S2 += 3)
                    w2 = A2.getX(S2), M2 = A2.getX(S2 + 1), E2 = A2.getX(S2 + 2), (b3 = r2(this, n2, a2, L2, C2, w2, M2, E2)) && (b3.faceIndex = Math.floor(S2 / 3), o2.push(b3));
                else if (void 0 !== L2)
                  for (S2 = 0, T2 = L2.count; S2 < T2; S2 += 3)
                    w2 = S2, M2 = S2 + 1, E2 = S2 + 2, (b3 = r2(this, n2, a2, L2, C2, w2, M2, E2)) && o2.push(b3);
              } else if (s2.isGeometry) {
                var R2, P2, D2, U2, I2 = Array.isArray(m2), O2 = s2.vertices, N2 = s2.faces, F2 = s2.faceVertexUvs[0];
                F2.length > 0 && (U2 = F2);
                for (var z2 = 0, B2 = N2.length; z2 < B2; z2++) {
                  var G2 = N2[z2], H2 = I2 ? m2[G2.materialIndex] : m2;
                  if (void 0 !== H2) {
                    if (R2 = O2[G2.a], P2 = O2[G2.b], D2 = O2[G2.c], true === H2.morphTargets) {
                      var j2 = s2.morphTargets, V2 = this.morphTargetInfluences;
                      l2.set(0, 0, 0), u2.set(0, 0, 0), h2.set(0, 0, 0);
                      for (var k2 = 0, W2 = j2.length; k2 < W2; k2++) {
                        var X2 = V2[k2];
                        if (0 !== X2) {
                          var q2 = j2[k2].vertices;
                          l2.addScaledVector(d2.subVectors(q2[G2.a], R2), X2), u2.addScaledVector(p2.subVectors(q2[G2.b], P2), X2), h2.addScaledVector(f2.subVectors(q2[G2.c], D2), X2);
                        }
                      }
                      l2.add(R2), u2.add(P2), h2.add(D2), R2 = l2, P2 = u2, D2 = h2;
                    }
                    if (b3 = t2(this, H2, n2, a2, R2, P2, D2, _2)) {
                      if (U2 && U2[z2]) {
                        var Y2 = U2[z2];
                        v2.copy(Y2[0]), g2.copy(Y2[1]), y2.copy(Y2[2]), b3.uv = e2(_2, R2, P2, D2, v2, g2, y2);
                      }
                      b3.face = G2, b3.faceIndex = z2, o2.push(b3);
                    }
                  }
                }
              }
            }
          };
        }(), clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } }), ce.prototype = Object.create(l.prototype), ce.prototype.constructor = ce, ce.prototype.isCubeTexture = true, Object.defineProperty(ce.prototype, "images", { get: function() {
          return this.image;
        }, set: function(e2) {
          this.image = e2;
        } });
        var Zs = new l(), Js = new ce(), Ks = [], Qs = [], $s = new Float32Array(16), ec = new Float32Array(9);
        Be.prototype.setValue = function(e2, t2) {
          for (var r2 = this.seq, i2 = 0, n2 = r2.length; i2 !== n2; ++i2) {
            var o2 = r2[i2];
            o2.setValue(e2, t2[o2.id]);
          }
        };
        var tc = /([\w\d_]+)(\])?(\[|\.)?/g;
        je.prototype.setValue = function(e2, t2, r2) {
          var i2 = this.map[t2];
          void 0 !== i2 && i2.setValue(e2, r2, this.renderer);
        }, je.prototype.setOptional = function(e2, t2, r2) {
          var i2 = t2[r2];
          void 0 !== i2 && this.setValue(e2, r2, i2);
        }, je.upload = function(e2, t2, r2, i2) {
          for (var n2 = 0, o2 = t2.length; n2 !== o2; ++n2) {
            var a2 = t2[n2], s2 = r2[a2.id];
            false !== s2.needsUpdate && a2.setValue(e2, s2.value, i2);
          }
        }, je.seqWithValue = function(e2, t2) {
          for (var r2 = [], i2 = 0, n2 = e2.length; i2 !== n2; ++i2) {
            var o2 = e2[i2];
            o2.id in t2 && r2.push(o2);
          }
          return r2;
        };
        var rc = 0, ic = 0;
        ft.prototype = Object.create(k.prototype), ft.prototype.constructor = ft, ft.prototype.isMeshDepthMaterial = true, ft.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.depthPacking = e2.depthPacking, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.map = e2.map, this.alphaMap = e2.alphaMap, this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this;
        }, mt.prototype = Object.create(k.prototype), mt.prototype.constructor = mt, mt.prototype.isMeshDistanceMaterial = true, mt.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.referencePosition.copy(e2.referencePosition), this.nearDistance = e2.nearDistance, this.farDistance = e2.farDistance, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.map = e2.map, this.alphaMap = e2.alphaMap, this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this;
        }, gt.prototype = Object.create(l.prototype), gt.prototype.constructor = gt, wt.prototype = Object.assign(Object.create(M.prototype), { constructor: wt, isPerspectiveCamera: true, copy: function(e2, t2) {
          return M.prototype.copy.call(this, e2, t2), this.fov = e2.fov, this.zoom = e2.zoom, this.near = e2.near, this.far = e2.far, this.focus = e2.focus, this.aspect = e2.aspect, this.view = null === e2.view ? null : Object.assign({}, e2.view), this.filmGauge = e2.filmGauge, this.filmOffset = e2.filmOffset, this;
        }, setFocalLength: function(e2) {
          var t2 = 0.5 * this.getFilmHeight() / e2;
          this.fov = 2 * zs.RAD2DEG * Math.atan(t2), this.updateProjectionMatrix();
        }, getFocalLength: function() {
          var e2 = Math.tan(0.5 * zs.DEG2RAD * this.fov);
          return 0.5 * this.getFilmHeight() / e2;
        }, getEffectiveFOV: function() {
          return 2 * zs.RAD2DEG * Math.atan(Math.tan(0.5 * zs.DEG2RAD * this.fov) / this.zoom);
        }, getFilmWidth: function() {
          return this.filmGauge * Math.min(this.aspect, 1);
        }, getFilmHeight: function() {
          return this.filmGauge / Math.max(this.aspect, 1);
        }, setViewOffset: function(e2, t2, r2, i2, n2, o2) {
          this.aspect = e2 / t2, null === this.view && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = e2, this.view.fullHeight = t2, this.view.offsetX = r2, this.view.offsetY = i2, this.view.width = n2, this.view.height = o2, this.updateProjectionMatrix();
        }, clearViewOffset: function() {
          null !== this.view && (this.view.enabled = false), this.updateProjectionMatrix();
        }, updateProjectionMatrix: function() {
          var e2 = this.near, t2 = e2 * Math.tan(0.5 * zs.DEG2RAD * this.fov) / this.zoom, r2 = 2 * t2, i2 = this.aspect * r2, n2 = -0.5 * i2, o2 = this.view;
          if (null !== this.view && this.view.enabled) {
            var a2 = o2.fullWidth, s2 = o2.fullHeight;
            n2 += o2.offsetX * i2 / a2, t2 -= o2.offsetY * r2 / s2, i2 *= o2.width / a2, r2 *= o2.height / s2;
          }
          var c2 = this.filmOffset;
          0 !== c2 && (n2 += e2 * c2 / this.getFilmWidth()), this.projectionMatrix.makePerspective(n2, n2 + i2, t2, t2 - r2, e2, this.far);
        }, toJSON: function(e2) {
          var t2 = w.prototype.toJSON.call(this, e2);
          return t2.object.fov = this.fov, t2.object.zoom = this.zoom, t2.object.near = this.near, t2.object.far = this.far, t2.object.focus = this.focus, t2.object.aspect = this.aspect, null !== this.view && (t2.object.view = Object.assign({}, this.view)), t2.object.filmGauge = this.filmGauge, t2.object.filmOffset = this.filmOffset, t2;
        } }), Mt.prototype = Object.assign(Object.create(wt.prototype), { constructor: Mt, isArrayCamera: true }), Tt.prototype.isFogExp2 = true, Tt.prototype.clone = function() {
          return new Tt(this.color.getHex(), this.density);
        }, Tt.prototype.toJSON = function() {
          return { type: "FogExp2", color: this.color.getHex(), density: this.density };
        }, At.prototype.isFog = true, At.prototype.clone = function() {
          return new At(this.color.getHex(), this.near, this.far);
        }, At.prototype.toJSON = function() {
          return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far };
        }, Lt.prototype = Object.assign(Object.create(w.prototype), { constructor: Lt, copy: function(e2, t2) {
          return w.prototype.copy.call(this, e2, t2), null !== e2.background && (this.background = e2.background.clone()), null !== e2.fog && (this.fog = e2.fog.clone()), null !== e2.overrideMaterial && (this.overrideMaterial = e2.overrideMaterial.clone()), this.autoUpdate = e2.autoUpdate, this.matrixAutoUpdate = e2.matrixAutoUpdate, this;
        }, toJSON: function(e2) {
          var t2 = w.prototype.toJSON.call(this, e2);
          return null !== this.background && (t2.object.background = this.background.toJSON(e2)), null !== this.fog && (t2.object.fog = this.fog.toJSON()), t2;
        } }), Ct.prototype = Object.create(k.prototype), Ct.prototype.constructor = Ct, Ct.prototype.isSpriteMaterial = true, Ct.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.rotation = e2.rotation, this;
        }, Rt.prototype = Object.assign(Object.create(w.prototype), { constructor: Rt, isSprite: true, raycast: function() {
          var e2 = new s(), t2 = new s(), r2 = new s();
          return function(i2, n2) {
            t2.setFromMatrixPosition(this.matrixWorld), i2.ray.closestPointToPoint(t2, e2), r2.setFromMatrixScale(this.matrixWorld);
            var o2 = r2.x * r2.y / 4;
            if (!(t2.distanceToSquared(e2) > o2)) {
              var a2 = i2.ray.origin.distanceTo(e2);
              a2 < i2.near || a2 > i2.far || n2.push({ distance: a2, point: e2.clone(), face: null, object: this });
            }
          };
        }(), clone: function() {
          return new this.constructor(this.material).copy(this);
        }, copy: function(e2) {
          return w.prototype.copy.call(this, e2), void 0 !== e2.center && this.center.copy(e2.center), this;
        } }), Pt.prototype = Object.assign(Object.create(w.prototype), { constructor: Pt, copy: function(e2) {
          w.prototype.copy.call(this, e2, false);
          for (var t2 = e2.levels, r2 = 0, i2 = t2.length; r2 < i2; r2++) {
            var n2 = t2[r2];
            this.addLevel(n2.object.clone(), n2.distance);
          }
          return this;
        }, addLevel: function(e2, t2) {
          void 0 === t2 && (t2 = 0), t2 = Math.abs(t2);
          for (var r2 = this.levels, i2 = 0; i2 < r2.length && !(t2 < r2[i2].distance); i2++)
            ;
          r2.splice(i2, 0, { distance: t2, object: e2 }), this.add(e2);
        }, getObjectForDistance: function(e2) {
          for (var t2 = this.levels, r2 = 1, i2 = t2.length; r2 < i2 && !(e2 < t2[r2].distance); r2++)
            ;
          return t2[r2 - 1].object;
        }, raycast: function() {
          var e2 = new s();
          return function(t2, r2) {
            e2.setFromMatrixPosition(this.matrixWorld);
            var i2 = t2.ray.origin.distanceTo(e2);
            this.getObjectForDistance(i2).raycast(t2, r2);
          };
        }(), update: function() {
          var e2 = new s(), t2 = new s();
          return function(r2) {
            var i2 = this.levels;
            if (i2.length > 1) {
              e2.setFromMatrixPosition(r2.matrixWorld), t2.setFromMatrixPosition(this.matrixWorld);
              var n2 = e2.distanceTo(t2);
              i2[0].object.visible = true;
              for (var o2 = 1, a2 = i2.length; o2 < a2 && n2 >= i2[o2].distance; o2++)
                i2[o2 - 1].object.visible = false, i2[o2].object.visible = true;
              for (; o2 < a2; o2++)
                i2[o2].object.visible = false;
            }
          };
        }(), toJSON: function(e2) {
          var t2 = w.prototype.toJSON.call(this, e2);
          t2.object.levels = [];
          for (var r2 = this.levels, i2 = 0, n2 = r2.length; i2 < n2; i2++) {
            var o2 = r2[i2];
            t2.object.levels.push({ object: o2.object.uuid, distance: o2.distance });
          }
          return t2;
        } }), Object.assign(Dt.prototype, { calculateInverses: function() {
          this.boneInverses = [];
          for (var e2 = 0, t2 = this.bones.length; e2 < t2; e2++) {
            var r2 = new o();
            this.bones[e2] && r2.getInverse(this.bones[e2].matrixWorld), this.boneInverses.push(r2);
          }
        }, pose: function() {
          var e2, t2, r2;
          for (t2 = 0, r2 = this.bones.length; t2 < r2; t2++)
            (e2 = this.bones[t2]) && e2.matrixWorld.getInverse(this.boneInverses[t2]);
          for (t2 = 0, r2 = this.bones.length; t2 < r2; t2++)
            (e2 = this.bones[t2]) && (e2.parent && e2.parent.isBone ? (e2.matrix.getInverse(e2.parent.matrixWorld), e2.matrix.multiply(e2.matrixWorld)) : e2.matrix.copy(e2.matrixWorld), e2.matrix.decompose(e2.position, e2.quaternion, e2.scale));
        }, update: function() {
          var e2 = new o(), t2 = new o();
          return function() {
            for (var r2 = this.bones, i2 = this.boneInverses, n2 = this.boneMatrices, o2 = this.boneTexture, a2 = 0, s2 = r2.length; a2 < s2; a2++) {
              var c2 = r2[a2] ? r2[a2].matrixWorld : t2;
              e2.multiplyMatrices(c2, i2[a2]), e2.toArray(n2, 16 * a2);
            }
            void 0 !== o2 && (o2.needsUpdate = true);
          };
        }(), clone: function() {
          return new Dt(this.bones, this.boneInverses);
        }, getBoneByName: function(e2) {
          for (var t2 = 0, r2 = this.bones.length; t2 < r2; t2++) {
            var i2 = this.bones[t2];
            if (i2.name === e2)
              return i2;
          }
        } }), Ut.prototype = Object.assign(Object.create(w.prototype), { constructor: Ut, isBone: true }), It.prototype = Object.assign(Object.create(J.prototype), { constructor: It, isSkinnedMesh: true, initBones: function() {
          var e2, t2, r2, i2, n2 = [];
          if (this.geometry && void 0 !== this.geometry.bones) {
            for (r2 = 0, i2 = this.geometry.bones.length; r2 < i2; r2++)
              t2 = this.geometry.bones[r2], e2 = new Ut(), n2.push(e2), e2.name = t2.name, e2.position.fromArray(t2.pos), e2.quaternion.fromArray(t2.rotq), void 0 !== t2.scl && e2.scale.fromArray(t2.scl);
            for (r2 = 0, i2 = this.geometry.bones.length; r2 < i2; r2++)
              t2 = this.geometry.bones[r2], -1 !== t2.parent && null !== t2.parent && void 0 !== n2[t2.parent] ? n2[t2.parent].add(n2[r2]) : this.add(n2[r2]);
          }
          return this.updateMatrixWorld(true), n2;
        }, bind: function(e2, t2) {
          this.skeleton = e2, void 0 === t2 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), t2 = this.matrixWorld), this.bindMatrix.copy(t2), this.bindMatrixInverse.getInverse(t2);
        }, pose: function() {
          this.skeleton.pose();
        }, normalizeSkinWeights: function() {
          var e2, t2;
          if (this.geometry && this.geometry.isGeometry)
            for (t2 = 0; t2 < this.geometry.skinWeights.length; t2++) {
              var r2 = this.geometry.skinWeights[t2];
              e2 = 1 / r2.manhattanLength(), e2 !== 1 / 0 ? r2.multiplyScalar(e2) : r2.set(1, 0, 0, 0);
            }
          else if (this.geometry && this.geometry.isBufferGeometry) {
            var i2 = new u(), n2 = this.geometry.attributes.skinWeight;
            for (t2 = 0; t2 < n2.count; t2++)
              i2.x = n2.getX(t2), i2.y = n2.getY(t2), i2.z = n2.getZ(t2), i2.w = n2.getW(t2), e2 = 1 / i2.manhattanLength(), e2 !== 1 / 0 ? i2.multiplyScalar(e2) : i2.set(1, 0, 0, 0), n2.setXYZW(t2, i2.x, i2.y, i2.z, i2.w);
          }
        }, updateMatrixWorld: function(e2) {
          J.prototype.updateMatrixWorld.call(this, e2), "attached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.matrixWorld) : "detached" === this.bindMode ? this.bindMatrixInverse.getInverse(this.bindMatrix) : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
        }, clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } }), Ot.prototype = Object.create(k.prototype), Ot.prototype.constructor = Ot, Ot.prototype.isLineBasicMaterial = true, Ot.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.linewidth = e2.linewidth, this.linecap = e2.linecap, this.linejoin = e2.linejoin, this;
        }, Nt.prototype = Object.assign(Object.create(w.prototype), { constructor: Nt, isLine: true, computeLineDistances: function() {
          var e2 = new s(), t2 = new s();
          return function() {
            var r2 = this.geometry;
            if (r2.isBufferGeometry)
              if (null === r2.index) {
                for (var i2 = r2.attributes.position, n2 = [0], o2 = 1, a2 = i2.count; o2 < a2; o2++)
                  e2.fromBufferAttribute(i2, o2 - 1), t2.fromBufferAttribute(i2, o2), n2[o2] = n2[o2 - 1], n2[o2] += e2.distanceTo(t2);
                r2.addAttribute("lineDistance", new O(n2, 1));
              } else
                console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
            else if (r2.isGeometry) {
              var s2 = r2.vertices, n2 = r2.lineDistances;
              n2[0] = 0;
              for (var o2 = 1, a2 = s2.length; o2 < a2; o2++)
                n2[o2] = n2[o2 - 1], n2[o2] += s2[o2 - 1].distanceTo(s2[o2]);
            }
            return this;
          };
        }(), raycast: function() {
          var e2 = new o(), t2 = new q(), r2 = new m();
          return function(i2, n2) {
            var o2 = i2.linePrecision, a2 = o2 * o2, c2 = this.geometry, l2 = this.matrixWorld;
            if (null === c2.boundingSphere && c2.computeBoundingSphere(), r2.copy(c2.boundingSphere), r2.applyMatrix4(l2), false !== i2.ray.intersectsSphere(r2)) {
              e2.getInverse(l2), t2.copy(i2.ray).applyMatrix4(e2);
              var u2 = new s(), h2 = new s(), d2 = new s(), p2 = new s(), f2 = this && this.isLineSegments ? 2 : 1;
              if (c2.isBufferGeometry) {
                var m2 = c2.index, v2 = c2.attributes, g2 = v2.position.array;
                if (null !== m2)
                  for (var y2 = m2.array, x2 = 0, _2 = y2.length - 1; x2 < _2; x2 += f2) {
                    var b2 = y2[x2], w2 = y2[x2 + 1];
                    u2.fromArray(g2, 3 * b2), h2.fromArray(g2, 3 * w2);
                    var M2 = t2.distanceSqToSegment(u2, h2, p2, d2);
                    if (!(M2 > a2)) {
                      p2.applyMatrix4(this.matrixWorld);
                      var E2 = i2.ray.origin.distanceTo(p2);
                      E2 < i2.near || E2 > i2.far || n2.push({ distance: E2, point: d2.clone().applyMatrix4(this.matrixWorld), index: x2, face: null, faceIndex: null, object: this });
                    }
                  }
                else
                  for (var x2 = 0, _2 = g2.length / 3 - 1; x2 < _2; x2 += f2) {
                    u2.fromArray(g2, 3 * x2), h2.fromArray(g2, 3 * x2 + 3);
                    var M2 = t2.distanceSqToSegment(u2, h2, p2, d2);
                    if (!(M2 > a2)) {
                      p2.applyMatrix4(this.matrixWorld);
                      var E2 = i2.ray.origin.distanceTo(p2);
                      E2 < i2.near || E2 > i2.far || n2.push({ distance: E2, point: d2.clone().applyMatrix4(this.matrixWorld), index: x2, face: null, faceIndex: null, object: this });
                    }
                  }
              } else if (c2.isGeometry)
                for (var S2 = c2.vertices, T2 = S2.length, x2 = 0; x2 < T2 - 1; x2 += f2) {
                  var M2 = t2.distanceSqToSegment(S2[x2], S2[x2 + 1], p2, d2);
                  if (!(M2 > a2)) {
                    p2.applyMatrix4(this.matrixWorld);
                    var E2 = i2.ray.origin.distanceTo(p2);
                    E2 < i2.near || E2 > i2.far || n2.push({ distance: E2, point: d2.clone().applyMatrix4(this.matrixWorld), index: x2, face: null, faceIndex: null, object: this });
                  }
                }
            }
          };
        }(), clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } }), Ft.prototype = Object.assign(Object.create(Nt.prototype), { constructor: Ft, isLineSegments: true, computeLineDistances: function() {
          var e2 = new s(), t2 = new s();
          return function() {
            var r2 = this.geometry;
            if (r2.isBufferGeometry)
              if (null === r2.index) {
                for (var i2 = r2.attributes.position, n2 = [], o2 = 0, a2 = i2.count; o2 < a2; o2 += 2)
                  e2.fromBufferAttribute(i2, o2), t2.fromBufferAttribute(i2, o2 + 1), n2[o2] = 0 === o2 ? 0 : n2[o2 - 1], n2[o2 + 1] = n2[o2] + e2.distanceTo(t2);
                r2.addAttribute("lineDistance", new O(n2, 1));
              } else
                console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
            else if (r2.isGeometry)
              for (var s2 = r2.vertices, n2 = r2.lineDistances, o2 = 0, a2 = s2.length; o2 < a2; o2 += 2)
                e2.copy(s2[o2]), t2.copy(s2[o2 + 1]), n2[o2] = 0 === o2 ? 0 : n2[o2 - 1], n2[o2 + 1] = n2[o2] + e2.distanceTo(t2);
            return this;
          };
        }() }), zt.prototype = Object.assign(Object.create(Nt.prototype), { constructor: zt, isLineLoop: true }), Bt.prototype = Object.create(k.prototype), Bt.prototype.constructor = Bt, Bt.prototype.isPointsMaterial = true, Bt.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.size = e2.size, this.sizeAttenuation = e2.sizeAttenuation, this;
        }, Gt.prototype = Object.assign(Object.create(w.prototype), { constructor: Gt, isPoints: true, raycast: function() {
          var e2 = new o(), t2 = new q(), r2 = new m();
          return function(i2, n2) {
            function o2(e3, r3) {
              var o3 = t2.distanceSqToPoint(e3);
              if (o3 < d2) {
                t2.closestPointToPoint(e3, f2), f2.applyMatrix4(l2);
                var s2 = i2.ray.origin.distanceTo(f2);
                if (s2 < i2.near || s2 > i2.far)
                  return;
                n2.push({ distance: s2, distanceToRay: Math.sqrt(o3), point: f2.clone(), index: r3, face: null, object: a2 });
              }
            }
            var a2 = this, c2 = this.geometry, l2 = this.matrixWorld, u2 = i2.params.Points.threshold;
            if (null === c2.boundingSphere && c2.computeBoundingSphere(), r2.copy(c2.boundingSphere), r2.applyMatrix4(l2), r2.radius += u2, false !== i2.ray.intersectsSphere(r2)) {
              e2.getInverse(l2), t2.copy(i2.ray).applyMatrix4(e2);
              var h2 = u2 / ((this.scale.x + this.scale.y + this.scale.z) / 3), d2 = h2 * h2, p2 = new s(), f2 = new s();
              if (c2.isBufferGeometry) {
                var m2 = c2.index, v2 = c2.attributes, g2 = v2.position.array;
                if (null !== m2)
                  for (var y2 = m2.array, x2 = 0, _2 = y2.length; x2 < _2; x2++) {
                    var b2 = y2[x2];
                    p2.fromArray(g2, 3 * b2), o2(p2, b2);
                  }
                else
                  for (var x2 = 0, w2 = g2.length / 3; x2 < w2; x2++)
                    p2.fromArray(g2, 3 * x2), o2(p2, x2);
              } else
                for (var M2 = c2.vertices, x2 = 0, w2 = M2.length; x2 < w2; x2++)
                  o2(M2[x2], x2);
            }
          };
        }(), clone: function() {
          return new this.constructor(this.geometry, this.material).copy(this);
        } }), Ht.prototype = Object.assign(Object.create(w.prototype), { constructor: Ht, isGroup: true }), jt.prototype = Object.assign(Object.create(l.prototype), { constructor: jt, isVideoTexture: true, update: function() {
          var e2 = this.image;
          e2.readyState >= e2.HAVE_CURRENT_DATA && (this.needsUpdate = true);
        } }), Vt.prototype = Object.create(l.prototype), Vt.prototype.constructor = Vt, Vt.prototype.isCompressedTexture = true, kt.prototype = Object.create(l.prototype), kt.prototype.constructor = kt, kt.prototype.isDepthTexture = true, Wt.prototype = Object.create(B.prototype), Wt.prototype.constructor = Wt, Xt.prototype = Object.create(T.prototype), Xt.prototype.constructor = Xt, qt.prototype = Object.create(B.prototype), qt.prototype.constructor = qt, Yt.prototype = Object.create(T.prototype), Yt.prototype.constructor = Yt, Zt.prototype = Object.create(B.prototype), Zt.prototype.constructor = Zt, Jt.prototype = Object.create(T.prototype), Jt.prototype.constructor = Jt, Kt.prototype = Object.create(Zt.prototype), Kt.prototype.constructor = Kt, Qt.prototype = Object.create(T.prototype), Qt.prototype.constructor = Qt, $t.prototype = Object.create(Zt.prototype), $t.prototype.constructor = $t, er.prototype = Object.create(T.prototype), er.prototype.constructor = er, tr.prototype = Object.create(Zt.prototype), tr.prototype.constructor = tr, rr.prototype = Object.create(T.prototype), rr.prototype.constructor = rr, ir.prototype = Object.create(Zt.prototype), ir.prototype.constructor = ir, nr.prototype = Object.create(T.prototype), nr.prototype.constructor = nr, or.prototype = Object.create(B.prototype), or.prototype.constructor = or, ar.prototype = Object.create(T.prototype), ar.prototype.constructor = ar, sr.prototype = Object.create(B.prototype), sr.prototype.constructor = sr, cr.prototype = Object.create(T.prototype), cr.prototype.constructor = cr, lr.prototype = Object.create(B.prototype), lr.prototype.constructor = lr;
        var nc = { triangulate: function(e2, t2, r2) {
          r2 = r2 || 2;
          var i2 = t2 && t2.length, n2 = i2 ? t2[0] * r2 : e2.length, o2 = ur(e2, 0, n2, r2, true), a2 = [];
          if (!o2)
            return a2;
          var s2, c2, l2, u2, h2, d2, p2;
          if (i2 && (o2 = gr(e2, t2, o2, r2)), e2.length > 80 * r2) {
            s2 = l2 = e2[0], c2 = u2 = e2[1];
            for (var f2 = r2; f2 < n2; f2 += r2)
              h2 = e2[f2], d2 = e2[f2 + 1], h2 < s2 && (s2 = h2), d2 < c2 && (c2 = d2), h2 > l2 && (l2 = h2), d2 > u2 && (u2 = d2);
            p2 = Math.max(l2 - s2, u2 - c2), p2 = 0 !== p2 ? 1 / p2 : 0;
          }
          return dr(o2, a2, r2, s2, c2, p2), a2;
        } }, oc = { area: function(e2) {
          for (var t2 = e2.length, r2 = 0, i2 = t2 - 1, n2 = 0; n2 < t2; i2 = n2++)
            r2 += e2[i2].x * e2[n2].y - e2[n2].x * e2[i2].y;
          return 0.5 * r2;
        }, isClockWise: function(e2) {
          return oc.area(e2) < 0;
        }, triangulateShape: function(e2, t2) {
          var r2 = [], i2 = [], n2 = [];
          zr(e2), Br(r2, e2);
          var o2 = e2.length;
          t2.forEach(zr);
          for (var a2 = 0; a2 < t2.length; a2++)
            i2.push(o2), o2 += t2[a2].length, Br(r2, t2[a2]);
          for (var s2 = nc.triangulate(r2, i2), a2 = 0; a2 < s2.length; a2 += 3)
            n2.push(s2.slice(a2, a2 + 3));
          return n2;
        } };
        Gr.prototype = Object.create(T.prototype), Gr.prototype.constructor = Gr, Hr.prototype = Object.create(B.prototype), Hr.prototype.constructor = Hr;
        var ac = { generateTopUV: function(e2, t2, r2, i2, o2) {
          var a2 = t2[3 * r2], s2 = t2[3 * r2 + 1], c2 = t2[3 * i2], l2 = t2[3 * i2 + 1], u2 = t2[3 * o2], h2 = t2[3 * o2 + 1];
          return [new n(a2, s2), new n(c2, l2), new n(u2, h2)];
        }, generateSideWallUV: function(e2, t2, r2, i2, o2, a2) {
          var s2 = t2[3 * r2], c2 = t2[3 * r2 + 1], l2 = t2[3 * r2 + 2], u2 = t2[3 * i2], h2 = t2[3 * i2 + 1], d2 = t2[3 * i2 + 2], p2 = t2[3 * o2], f2 = t2[3 * o2 + 1], m2 = t2[3 * o2 + 2], v2 = t2[3 * a2], g2 = t2[3 * a2 + 1], y2 = t2[3 * a2 + 2];
          return Math.abs(c2 - h2) < 0.01 ? [new n(s2, 1 - l2), new n(u2, 1 - d2), new n(p2, 1 - m2), new n(v2, 1 - y2)] : [new n(c2, 1 - l2), new n(h2, 1 - d2), new n(f2, 1 - m2), new n(g2, 1 - y2)];
        } };
        jr.prototype = Object.create(T.prototype), jr.prototype.constructor = jr, Vr.prototype = Object.create(Hr.prototype), Vr.prototype.constructor = Vr, kr.prototype = Object.create(T.prototype), kr.prototype.constructor = kr, Wr.prototype = Object.create(B.prototype), Wr.prototype.constructor = Wr, Xr.prototype = Object.create(T.prototype), Xr.prototype.constructor = Xr, qr.prototype = Object.create(B.prototype), qr.prototype.constructor = qr, Yr.prototype = Object.create(T.prototype), Yr.prototype.constructor = Yr, Zr.prototype = Object.create(B.prototype), Zr.prototype.constructor = Zr, Jr.prototype = Object.create(T.prototype), Jr.prototype.constructor = Jr, Jr.prototype.toJSON = function() {
          var e2 = T.prototype.toJSON.call(this);
          return Qr(this.parameters.shapes, e2);
        }, Kr.prototype = Object.create(B.prototype), Kr.prototype.constructor = Kr, Kr.prototype.toJSON = function() {
          var e2 = B.prototype.toJSON.call(this);
          return Qr(this.parameters.shapes, e2);
        }, $r.prototype = Object.create(B.prototype), $r.prototype.constructor = $r, ei.prototype = Object.create(T.prototype), ei.prototype.constructor = ei, ti.prototype = Object.create(B.prototype), ti.prototype.constructor = ti, ri.prototype = Object.create(ei.prototype), ri.prototype.constructor = ri, ii.prototype = Object.create(ti.prototype), ii.prototype.constructor = ii, ni.prototype = Object.create(T.prototype), ni.prototype.constructor = ni, oi.prototype = Object.create(B.prototype), oi.prototype.constructor = oi;
        var sc = Object.freeze({ WireframeGeometry: Wt, ParametricGeometry: Xt, ParametricBufferGeometry: qt, TetrahedronGeometry: Jt, TetrahedronBufferGeometry: Kt, OctahedronGeometry: Qt, OctahedronBufferGeometry: $t, IcosahedronGeometry: er, IcosahedronBufferGeometry: tr, DodecahedronGeometry: rr, DodecahedronBufferGeometry: ir, PolyhedronGeometry: Yt, PolyhedronBufferGeometry: Zt, TubeGeometry: nr, TubeBufferGeometry: or, TorusKnotGeometry: ar, TorusKnotBufferGeometry: sr, TorusGeometry: cr, TorusBufferGeometry: lr, TextGeometry: jr, TextBufferGeometry: Vr, SphereGeometry: kr, SphereBufferGeometry: Wr, RingGeometry: Xr, RingBufferGeometry: qr, PlaneGeometry: j, PlaneBufferGeometry: V, LatheGeometry: Yr, LatheBufferGeometry: Zr, ShapeGeometry: Jr, ShapeBufferGeometry: Kr, ExtrudeGeometry: Gr, ExtrudeBufferGeometry: Hr, EdgesGeometry: $r, ConeGeometry: ri, ConeBufferGeometry: ii, CylinderGeometry: ei, CylinderBufferGeometry: ti, CircleGeometry: ni, CircleBufferGeometry: oi, BoxGeometry: G, BoxBufferGeometry: H });
        ai.prototype = Object.create(k.prototype), ai.prototype.constructor = ai, ai.prototype.isShadowMaterial = true, ai.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this;
        }, si.prototype = Object.create(X.prototype), si.prototype.constructor = si, si.prototype.isRawShaderMaterial = true, ci.prototype = Object.create(k.prototype), ci.prototype.constructor = ci, ci.prototype.isMeshStandardMaterial = true, ci.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.defines = { STANDARD: "" }, this.color.copy(e2.color), this.roughness = e2.roughness, this.metalness = e2.metalness, this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.roughnessMap = e2.roughnessMap, this.metalnessMap = e2.metalnessMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.envMapIntensity = e2.envMapIntensity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
        }, li.prototype = Object.create(ci.prototype), li.prototype.constructor = li, li.prototype.isMeshPhysicalMaterial = true, li.prototype.copy = function(e2) {
          return ci.prototype.copy.call(this, e2), this.defines = { PHYSICAL: "" }, this.reflectivity = e2.reflectivity, this.clearCoat = e2.clearCoat, this.clearCoatRoughness = e2.clearCoatRoughness, this;
        }, ui.prototype = Object.create(k.prototype), ui.prototype.constructor = ui, ui.prototype.isMeshPhongMaterial = true, ui.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.specular.copy(e2.specular), this.shininess = e2.shininess, this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
        }, hi.prototype = Object.create(ui.prototype), hi.prototype.constructor = hi, hi.prototype.isMeshToonMaterial = true, hi.prototype.copy = function(e2) {
          return ui.prototype.copy.call(this, e2), this.gradientMap = e2.gradientMap, this;
        }, di.prototype = Object.create(k.prototype), di.prototype.constructor = di, di.prototype.isMeshNormalMaterial = true, di.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.bumpMap = e2.bumpMap, this.bumpScale = e2.bumpScale, this.normalMap = e2.normalMap, this.normalScale.copy(e2.normalScale), this.displacementMap = e2.displacementMap, this.displacementScale = e2.displacementScale, this.displacementBias = e2.displacementBias, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
        }, pi.prototype = Object.create(k.prototype), pi.prototype.constructor = pi, pi.prototype.isMeshLambertMaterial = true, pi.prototype.copy = function(e2) {
          return k.prototype.copy.call(this, e2), this.color.copy(e2.color), this.map = e2.map, this.lightMap = e2.lightMap, this.lightMapIntensity = e2.lightMapIntensity, this.aoMap = e2.aoMap, this.aoMapIntensity = e2.aoMapIntensity, this.emissive.copy(e2.emissive), this.emissiveMap = e2.emissiveMap, this.emissiveIntensity = e2.emissiveIntensity, this.specularMap = e2.specularMap, this.alphaMap = e2.alphaMap, this.envMap = e2.envMap, this.combine = e2.combine, this.reflectivity = e2.reflectivity, this.refractionRatio = e2.refractionRatio, this.wireframe = e2.wireframe, this.wireframeLinewidth = e2.wireframeLinewidth, this.wireframeLinecap = e2.wireframeLinecap, this.wireframeLinejoin = e2.wireframeLinejoin, this.skinning = e2.skinning, this.morphTargets = e2.morphTargets, this.morphNormals = e2.morphNormals, this;
        }, fi.prototype = Object.create(Ot.prototype), fi.prototype.constructor = fi, fi.prototype.isLineDashedMaterial = true, fi.prototype.copy = function(e2) {
          return Ot.prototype.copy.call(this, e2), this.scale = e2.scale, this.dashSize = e2.dashSize, this.gapSize = e2.gapSize, this;
        };
        var cc = Object.freeze({ ShadowMaterial: ai, SpriteMaterial: Ct, RawShaderMaterial: si, ShaderMaterial: X, PointsMaterial: Bt, MeshPhysicalMaterial: li, MeshStandardMaterial: ci, MeshPhongMaterial: ui, MeshToonMaterial: hi, MeshNormalMaterial: di, MeshLambertMaterial: pi, MeshDepthMaterial: ft, MeshDistanceMaterial: mt, MeshBasicMaterial: W, LineDashedMaterial: fi, LineBasicMaterial: Ot, Material: k }), lc = { enabled: false, files: {}, add: function(e2, t2) {
          false !== this.enabled && (this.files[e2] = t2);
        }, get: function(e2) {
          if (false !== this.enabled)
            return this.files[e2];
        }, remove: function(e2) {
          delete this.files[e2];
        }, clear: function() {
          this.files = {};
        } }, uc = new mi(), hc = {};
        Object.assign(vi.prototype, { load: function(e2, t2, r2, i2) {
          void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2), e2 = this.manager.resolveURL(e2);
          var n2 = this, o2 = lc.get(e2);
          if (void 0 !== o2)
            return n2.manager.itemStart(e2), setTimeout(function() {
              t2 && t2(o2), n2.manager.itemEnd(e2);
            }, 0), o2;
          if (void 0 !== hc[e2])
            return void hc[e2].push({ onLoad: t2, onProgress: r2, onError: i2 });
          var a2 = /^data:(.*?)(;base64)?,(.*)$/, s2 = e2.match(a2);
          if (s2) {
            var c2 = s2[1], l2 = !!s2[2], u2 = s2[3];
            u2 = window.decodeURIComponent(u2), l2 && (u2 = window.atob(u2));
            try {
              var h2, d2 = (this.responseType || "").toLowerCase();
              switch (d2) {
                case "arraybuffer":
                case "blob":
                  for (var p2 = new Uint8Array(u2.length), f2 = 0; f2 < u2.length; f2++)
                    p2[f2] = u2.charCodeAt(f2);
                  h2 = "blob" === d2 ? new Blob([p2.buffer], { type: c2 }) : p2.buffer;
                  break;
                case "document":
                  var m2 = new DOMParser();
                  h2 = m2.parseFromString(u2, c2);
                  break;
                case "json":
                  h2 = JSON.parse(u2);
                  break;
                default:
                  h2 = u2;
              }
              window.setTimeout(function() {
                t2 && t2(h2), n2.manager.itemEnd(e2);
              }, 0);
            } catch (t3) {
              window.setTimeout(function() {
                i2 && i2(t3), n2.manager.itemEnd(e2), n2.manager.itemError(e2);
              }, 0);
            }
          } else {
            hc[e2] = [], hc[e2].push({ onLoad: t2, onProgress: r2, onError: i2 });
            var v2 = new XMLHttpRequest();
            v2.open("GET", e2, true), v2.addEventListener("load", function(t3) {
              var r3 = this.response;
              lc.add(e2, r3);
              var i3 = hc[e2];
              if (delete hc[e2], 200 === this.status) {
                for (var o3 = 0, a3 = i3.length; o3 < a3; o3++) {
                  var s3 = i3[o3];
                  s3.onLoad && s3.onLoad(r3);
                }
                n2.manager.itemEnd(e2);
              } else if (0 === this.status) {
                console.warn("THREE.FileLoader: HTTP Status 0 received.");
                for (var o3 = 0, a3 = i3.length; o3 < a3; o3++) {
                  var s3 = i3[o3];
                  s3.onLoad && s3.onLoad(r3);
                }
                n2.manager.itemEnd(e2);
              } else {
                for (var o3 = 0, a3 = i3.length; o3 < a3; o3++) {
                  var s3 = i3[o3];
                  s3.onError && s3.onError(t3);
                }
                n2.manager.itemEnd(e2), n2.manager.itemError(e2);
              }
            }, false), v2.addEventListener("progress", function(t3) {
              for (var r3 = hc[e2], i3 = 0, n3 = r3.length; i3 < n3; i3++) {
                var o3 = r3[i3];
                o3.onProgress && o3.onProgress(t3);
              }
            }, false), v2.addEventListener("error", function(t3) {
              var r3 = hc[e2];
              delete hc[e2];
              for (var i3 = 0, o3 = r3.length; i3 < o3; i3++) {
                var a3 = r3[i3];
                a3.onError && a3.onError(t3);
              }
              n2.manager.itemEnd(e2), n2.manager.itemError(e2);
            }, false), void 0 !== this.responseType && (v2.responseType = this.responseType), void 0 !== this.withCredentials && (v2.withCredentials = this.withCredentials), v2.overrideMimeType && v2.overrideMimeType(void 0 !== this.mimeType ? this.mimeType : "text/plain");
            for (var g2 in this.requestHeader)
              v2.setRequestHeader(g2, this.requestHeader[g2]);
            v2.send(null);
          }
          return n2.manager.itemStart(e2), v2;
        }, setPath: function(e2) {
          return this.path = e2, this;
        }, setResponseType: function(e2) {
          return this.responseType = e2, this;
        }, setWithCredentials: function(e2) {
          return this.withCredentials = e2, this;
        }, setMimeType: function(e2) {
          return this.mimeType = e2, this;
        }, setRequestHeader: function(e2) {
          return this.requestHeader = e2, this;
        } }), Object.assign(gi.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this, o2 = [], a2 = new Vt();
          a2.image = o2;
          var s2 = new vi(this.manager);
          if (s2.setPath(this.path), s2.setResponseType("arraybuffer"), Array.isArray(e2))
            for (var c2 = 0, l2 = 0, u2 = e2.length; l2 < u2; ++l2)
              !function(l3) {
                s2.load(e2[l3], function(e3) {
                  var r3 = n2._parser(e3, true);
                  o2[l3] = { width: r3.width, height: r3.height, format: r3.format, mipmaps: r3.mipmaps }, 6 === (c2 += 1) && (1 === r3.mipmapCount && (a2.minFilter = Ua), a2.format = r3.format, a2.needsUpdate = true, t2 && t2(a2));
                }, r2, i2);
              }(l2);
          else
            s2.load(e2, function(e3) {
              var r3 = n2._parser(e3, true);
              if (r3.isCubemap)
                for (var i3 = r3.mipmaps.length / r3.mipmapCount, s3 = 0; s3 < i3; s3++) {
                  o2[s3] = { mipmaps: [] };
                  for (var c3 = 0; c3 < r3.mipmapCount; c3++)
                    o2[s3].mipmaps.push(r3.mipmaps[s3 * r3.mipmapCount + c3]), o2[s3].format = r3.format, o2[s3].width = r3.width, o2[s3].height = r3.height;
                }
              else
                a2.image.width = r3.width, a2.image.height = r3.height, a2.mipmaps = r3.mipmaps;
              1 === r3.mipmapCount && (a2.minFilter = Ua), a2.format = r3.format, a2.needsUpdate = true, t2 && t2(a2);
            }, r2, i2);
          return a2;
        }, setPath: function(e2) {
          return this.path = e2, this;
        } }), Object.assign(yi.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this, o2 = new p(), a2 = new vi(this.manager);
          return a2.setResponseType("arraybuffer"), a2.load(e2, function(e3) {
            var r3 = n2._parser(e3);
            r3 && (void 0 !== r3.image ? o2.image = r3.image : void 0 !== r3.data && (o2.image.width = r3.width, o2.image.height = r3.height, o2.image.data = r3.data), o2.wrapS = void 0 !== r3.wrapS ? r3.wrapS : La, o2.wrapT = void 0 !== r3.wrapT ? r3.wrapT : La, o2.magFilter = void 0 !== r3.magFilter ? r3.magFilter : Ua, o2.minFilter = void 0 !== r3.minFilter ? r3.minFilter : Oa, o2.anisotropy = void 0 !== r3.anisotropy ? r3.anisotropy : 1, void 0 !== r3.format && (o2.format = r3.format), void 0 !== r3.type && (o2.type = r3.type), void 0 !== r3.mipmaps && (o2.mipmaps = r3.mipmaps), 1 === r3.mipmapCount && (o2.minFilter = Ua), o2.needsUpdate = true, t2 && t2(o2, r3));
          }, r2, i2), o2;
        } }), Object.assign(xi.prototype, { crossOrigin: "Anonymous", load: function(e2, t2, r2, i2) {
          void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2), e2 = this.manager.resolveURL(e2);
          var n2 = this, o2 = lc.get(e2);
          if (void 0 !== o2)
            return n2.manager.itemStart(e2), setTimeout(function() {
              t2 && t2(o2), n2.manager.itemEnd(e2);
            }, 0), o2;
          var a2 = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
          return a2.addEventListener("load", function() {
            lc.add(e2, this), t2 && t2(this), n2.manager.itemEnd(e2);
          }, false), a2.addEventListener("error", function(t3) {
            i2 && i2(t3), n2.manager.itemEnd(e2), n2.manager.itemError(e2);
          }, false), "data:" !== e2.substr(0, 5) && void 0 !== this.crossOrigin && (a2.crossOrigin = this.crossOrigin), n2.manager.itemStart(e2), a2.src = e2, a2;
        }, setCrossOrigin: function(e2) {
          return this.crossOrigin = e2, this;
        }, setPath: function(e2) {
          return this.path = e2, this;
        } }), Object.assign(_i.prototype, { crossOrigin: "Anonymous", load: function(e2, t2, r2, i2) {
          var n2 = new ce(), o2 = new xi(this.manager);
          o2.setCrossOrigin(this.crossOrigin), o2.setPath(this.path);
          for (var a2 = 0, s2 = 0; s2 < e2.length; ++s2)
            !function(r3) {
              o2.load(e2[r3], function(e3) {
                n2.images[r3] = e3, 6 == ++a2 && (n2.needsUpdate = true, t2 && t2(n2));
              }, void 0, i2);
            }(s2);
          return n2;
        }, setCrossOrigin: function(e2) {
          return this.crossOrigin = e2, this;
        }, setPath: function(e2) {
          return this.path = e2, this;
        } }), Object.assign(bi.prototype, { crossOrigin: "Anonymous", load: function(e2, t2, r2, i2) {
          var n2 = new l(), o2 = new xi(this.manager);
          return o2.setCrossOrigin(this.crossOrigin), o2.setPath(this.path), o2.load(e2, function(r3) {
            n2.image = r3;
            var i3 = e2.search(/\.(jpg|jpeg)$/) > 0 || 0 === e2.search(/^data\:image\/jpeg/);
            n2.format = i3 ? Za : Ja, n2.needsUpdate = true, void 0 !== t2 && t2(n2);
          }, r2, i2), n2;
        }, setCrossOrigin: function(e2) {
          return this.crossOrigin = e2, this;
        }, setPath: function(e2) {
          return this.path = e2, this;
        } }), Object.assign(wi.prototype, { getPoint: function() {
          return console.warn("THREE.Curve: .getPoint() not implemented."), null;
        }, getPointAt: function(e2, t2) {
          var r2 = this.getUtoTmapping(e2);
          return this.getPoint(r2, t2);
        }, getPoints: function(e2) {
          void 0 === e2 && (e2 = 5);
          for (var t2 = [], r2 = 0; r2 <= e2; r2++)
            t2.push(this.getPoint(r2 / e2));
          return t2;
        }, getSpacedPoints: function(e2) {
          void 0 === e2 && (e2 = 5);
          for (var t2 = [], r2 = 0; r2 <= e2; r2++)
            t2.push(this.getPointAt(r2 / e2));
          return t2;
        }, getLength: function() {
          var e2 = this.getLengths();
          return e2[e2.length - 1];
        }, getLengths: function(e2) {
          if (void 0 === e2 && (e2 = this.arcLengthDivisions), this.cacheArcLengths && this.cacheArcLengths.length === e2 + 1 && !this.needsUpdate)
            return this.cacheArcLengths;
          this.needsUpdate = false;
          var t2, r2, i2 = [], n2 = this.getPoint(0), o2 = 0;
          for (i2.push(0), r2 = 1; r2 <= e2; r2++)
            t2 = this.getPoint(r2 / e2), o2 += t2.distanceTo(n2), i2.push(o2), n2 = t2;
          return this.cacheArcLengths = i2, i2;
        }, updateArcLengths: function() {
          this.needsUpdate = true, this.getLengths();
        }, getUtoTmapping: function(e2, t2) {
          var r2, i2 = this.getLengths(), n2 = 0, o2 = i2.length;
          r2 = t2 || e2 * i2[o2 - 1];
          for (var a2, s2 = 0, c2 = o2 - 1; s2 <= c2; )
            if (n2 = Math.floor(s2 + (c2 - s2) / 2), (a2 = i2[n2] - r2) < 0)
              s2 = n2 + 1;
            else {
              if (!(a2 > 0)) {
                c2 = n2;
                break;
              }
              c2 = n2 - 1;
            }
          if (n2 = c2, i2[n2] === r2)
            return n2 / (o2 - 1);
          var l2 = i2[n2];
          return (n2 + (r2 - l2) / (i2[n2 + 1] - l2)) / (o2 - 1);
        }, getTangent: function(e2) {
          var t2 = e2 - 1e-4, r2 = e2 + 1e-4;
          t2 < 0 && (t2 = 0), r2 > 1 && (r2 = 1);
          var i2 = this.getPoint(t2);
          return this.getPoint(r2).clone().sub(i2).normalize();
        }, getTangentAt: function(e2) {
          var t2 = this.getUtoTmapping(e2);
          return this.getTangent(t2);
        }, computeFrenetFrames: function(e2, t2) {
          var r2, i2, n2, a2 = new s(), c2 = [], l2 = [], u2 = [], h2 = new s(), d2 = new o();
          for (r2 = 0; r2 <= e2; r2++)
            i2 = r2 / e2, c2[r2] = this.getTangentAt(i2), c2[r2].normalize();
          l2[0] = new s(), u2[0] = new s();
          var p2 = Number.MAX_VALUE, f2 = Math.abs(c2[0].x), m2 = Math.abs(c2[0].y), v2 = Math.abs(c2[0].z);
          for (f2 <= p2 && (p2 = f2, a2.set(1, 0, 0)), m2 <= p2 && (p2 = m2, a2.set(0, 1, 0)), v2 <= p2 && a2.set(0, 0, 1), h2.crossVectors(c2[0], a2).normalize(), l2[0].crossVectors(c2[0], h2), u2[0].crossVectors(c2[0], l2[0]), r2 = 1; r2 <= e2; r2++)
            l2[r2] = l2[r2 - 1].clone(), u2[r2] = u2[r2 - 1].clone(), h2.crossVectors(c2[r2 - 1], c2[r2]), h2.length() > Number.EPSILON && (h2.normalize(), n2 = Math.acos(zs.clamp(c2[r2 - 1].dot(c2[r2]), -1, 1)), l2[r2].applyMatrix4(d2.makeRotationAxis(h2, n2))), u2[r2].crossVectors(c2[r2], l2[r2]);
          if (true === t2)
            for (n2 = Math.acos(zs.clamp(l2[0].dot(l2[e2]), -1, 1)), n2 /= e2, c2[0].dot(h2.crossVectors(l2[0], l2[e2])) > 0 && (n2 = -n2), r2 = 1; r2 <= e2; r2++)
              l2[r2].applyMatrix4(d2.makeRotationAxis(c2[r2], n2 * r2)), u2[r2].crossVectors(c2[r2], l2[r2]);
          return { tangents: c2, normals: l2, binormals: u2 };
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.arcLengthDivisions = e2.arcLengthDivisions, this;
        }, toJSON: function() {
          var e2 = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } };
          return e2.arcLengthDivisions = this.arcLengthDivisions, e2.type = this.type, e2;
        }, fromJSON: function(e2) {
          return this.arcLengthDivisions = e2.arcLengthDivisions, this;
        } }), Mi.prototype = Object.create(wi.prototype), Mi.prototype.constructor = Mi, Mi.prototype.isEllipseCurve = true, Mi.prototype.getPoint = function(e2, t2) {
          for (var r2 = t2 || new n(), i2 = 2 * Math.PI, o2 = this.aEndAngle - this.aStartAngle, a2 = Math.abs(o2) < Number.EPSILON; o2 < 0; )
            o2 += i2;
          for (; o2 > i2; )
            o2 -= i2;
          o2 < Number.EPSILON && (o2 = a2 ? 0 : i2), true !== this.aClockwise || a2 || (o2 === i2 ? o2 = -i2 : o2 -= i2);
          var s2 = this.aStartAngle + e2 * o2, c2 = this.aX + this.xRadius * Math.cos(s2), l2 = this.aY + this.yRadius * Math.sin(s2);
          if (0 !== this.aRotation) {
            var u2 = Math.cos(this.aRotation), h2 = Math.sin(this.aRotation), d2 = c2 - this.aX, p2 = l2 - this.aY;
            c2 = d2 * u2 - p2 * h2 + this.aX, l2 = d2 * h2 + p2 * u2 + this.aY;
          }
          return r2.set(c2, l2);
        }, Mi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.aX = e2.aX, this.aY = e2.aY, this.xRadius = e2.xRadius, this.yRadius = e2.yRadius, this.aStartAngle = e2.aStartAngle, this.aEndAngle = e2.aEndAngle, this.aClockwise = e2.aClockwise, this.aRotation = e2.aRotation, this;
        }, Mi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.aX = this.aX, e2.aY = this.aY, e2.xRadius = this.xRadius, e2.yRadius = this.yRadius, e2.aStartAngle = this.aStartAngle, e2.aEndAngle = this.aEndAngle, e2.aClockwise = this.aClockwise, e2.aRotation = this.aRotation, e2;
        }, Mi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.aX = e2.aX, this.aY = e2.aY, this.xRadius = e2.xRadius, this.yRadius = e2.yRadius, this.aStartAngle = e2.aStartAngle, this.aEndAngle = e2.aEndAngle, this.aClockwise = e2.aClockwise, this.aRotation = e2.aRotation, this;
        }, Ei.prototype = Object.create(Mi.prototype), Ei.prototype.constructor = Ei, Ei.prototype.isArcCurve = true;
        var dc = new s(), pc = new Si(), fc = new Si(), mc = new Si();
        Ti.prototype = Object.create(wi.prototype), Ti.prototype.constructor = Ti, Ti.prototype.isCatmullRomCurve3 = true, Ti.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new s(), i2 = this.points, n2 = i2.length, o2 = (n2 - (this.closed ? 0 : 1)) * e2, a2 = Math.floor(o2), c2 = o2 - a2;
          this.closed ? a2 += a2 > 0 ? 0 : (Math.floor(Math.abs(a2) / n2) + 1) * n2 : 0 === c2 && a2 === n2 - 1 && (a2 = n2 - 2, c2 = 1);
          var l2, u2, h2, d2;
          if (this.closed || a2 > 0 ? l2 = i2[(a2 - 1) % n2] : (dc.subVectors(i2[0], i2[1]).add(i2[0]), l2 = dc), u2 = i2[a2 % n2], h2 = i2[(a2 + 1) % n2], this.closed || a2 + 2 < n2 ? d2 = i2[(a2 + 2) % n2] : (dc.subVectors(i2[n2 - 1], i2[n2 - 2]).add(i2[n2 - 1]), d2 = dc), "centripetal" === this.curveType || "chordal" === this.curveType) {
            var p2 = "chordal" === this.curveType ? 0.5 : 0.25, f2 = Math.pow(l2.distanceToSquared(u2), p2), m2 = Math.pow(u2.distanceToSquared(h2), p2), v2 = Math.pow(h2.distanceToSquared(d2), p2);
            m2 < 1e-4 && (m2 = 1), f2 < 1e-4 && (f2 = m2), v2 < 1e-4 && (v2 = m2), pc.initNonuniformCatmullRom(l2.x, u2.x, h2.x, d2.x, f2, m2, v2), fc.initNonuniformCatmullRom(l2.y, u2.y, h2.y, d2.y, f2, m2, v2), mc.initNonuniformCatmullRom(l2.z, u2.z, h2.z, d2.z, f2, m2, v2);
          } else
            "catmullrom" === this.curveType && (pc.initCatmullRom(l2.x, u2.x, h2.x, d2.x, this.tension), fc.initCatmullRom(l2.y, u2.y, h2.y, d2.y, this.tension), mc.initCatmullRom(l2.z, u2.z, h2.z, d2.z, this.tension));
          return r2.set(pc.calc(c2), fc.calc(c2), mc.calc(c2)), r2;
        }, Ti.prototype.copy = function(e2) {
          wi.prototype.copy.call(this, e2), this.points = [];
          for (var t2 = 0, r2 = e2.points.length; t2 < r2; t2++) {
            var i2 = e2.points[t2];
            this.points.push(i2.clone());
          }
          return this.closed = e2.closed, this.curveType = e2.curveType, this.tension = e2.tension, this;
        }, Ti.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          e2.points = [];
          for (var t2 = 0, r2 = this.points.length; t2 < r2; t2++) {
            var i2 = this.points[t2];
            e2.points.push(i2.toArray());
          }
          return e2.closed = this.closed, e2.curveType = this.curveType, e2.tension = this.tension, e2;
        }, Ti.prototype.fromJSON = function(e2) {
          wi.prototype.fromJSON.call(this, e2), this.points = [];
          for (var t2 = 0, r2 = e2.points.length; t2 < r2; t2++) {
            var i2 = e2.points[t2];
            this.points.push(new s().fromArray(i2));
          }
          return this.closed = e2.closed, this.curveType = e2.curveType, this.tension = e2.tension, this;
        }, Fi.prototype = Object.create(wi.prototype), Fi.prototype.constructor = Fi, Fi.prototype.isCubicBezierCurve = true, Fi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new n(), i2 = this.v0, o2 = this.v1, a2 = this.v2, s2 = this.v3;
          return r2.set(Ni(e2, i2.x, o2.x, a2.x, s2.x), Ni(e2, i2.y, o2.y, a2.y, s2.y)), r2;
        }, Fi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this.v3.copy(e2.v3), this;
        }, Fi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2.v3 = this.v3.toArray(), e2;
        }, Fi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this.v3.fromArray(e2.v3), this;
        }, zi.prototype = Object.create(wi.prototype), zi.prototype.constructor = zi, zi.prototype.isCubicBezierCurve3 = true, zi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new s(), i2 = this.v0, n2 = this.v1, o2 = this.v2, a2 = this.v3;
          return r2.set(Ni(e2, i2.x, n2.x, o2.x, a2.x), Ni(e2, i2.y, n2.y, o2.y, a2.y), Ni(e2, i2.z, n2.z, o2.z, a2.z)), r2;
        }, zi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this.v3.copy(e2.v3), this;
        }, zi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2.v3 = this.v3.toArray(), e2;
        }, zi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this.v3.fromArray(e2.v3), this;
        }, Bi.prototype = Object.create(wi.prototype), Bi.prototype.constructor = Bi, Bi.prototype.isLineCurve = true, Bi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new n();
          return 1 === e2 ? r2.copy(this.v2) : (r2.copy(this.v2).sub(this.v1), r2.multiplyScalar(e2).add(this.v1)), r2;
        }, Bi.prototype.getPointAt = function(e2, t2) {
          return this.getPoint(e2, t2);
        }, Bi.prototype.getTangent = function() {
          return this.v2.clone().sub(this.v1).normalize();
        }, Bi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
        }, Bi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
        }, Bi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
        }, Gi.prototype = Object.create(wi.prototype), Gi.prototype.constructor = Gi, Gi.prototype.isLineCurve3 = true, Gi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new s();
          return 1 === e2 ? r2.copy(this.v2) : (r2.copy(this.v2).sub(this.v1), r2.multiplyScalar(e2).add(this.v1)), r2;
        }, Gi.prototype.getPointAt = function(e2, t2) {
          return this.getPoint(e2, t2);
        }, Gi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
        }, Gi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
        }, Gi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
        }, Hi.prototype = Object.create(wi.prototype), Hi.prototype.constructor = Hi, Hi.prototype.isQuadraticBezierCurve = true, Hi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new n(), i2 = this.v0, o2 = this.v1, a2 = this.v2;
          return r2.set(Pi(e2, i2.x, o2.x, a2.x), Pi(e2, i2.y, o2.y, a2.y)), r2;
        }, Hi.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
        }, Hi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
        }, Hi.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
        }, ji.prototype = Object.create(wi.prototype), ji.prototype.constructor = ji, ji.prototype.isQuadraticBezierCurve3 = true, ji.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new s(), i2 = this.v0, n2 = this.v1, o2 = this.v2;
          return r2.set(Pi(e2, i2.x, n2.x, o2.x), Pi(e2, i2.y, n2.y, o2.y), Pi(e2, i2.z, n2.z, o2.z)), r2;
        }, ji.prototype.copy = function(e2) {
          return wi.prototype.copy.call(this, e2), this.v0.copy(e2.v0), this.v1.copy(e2.v1), this.v2.copy(e2.v2), this;
        }, ji.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          return e2.v0 = this.v0.toArray(), e2.v1 = this.v1.toArray(), e2.v2 = this.v2.toArray(), e2;
        }, ji.prototype.fromJSON = function(e2) {
          return wi.prototype.fromJSON.call(this, e2), this.v0.fromArray(e2.v0), this.v1.fromArray(e2.v1), this.v2.fromArray(e2.v2), this;
        }, Vi.prototype = Object.create(wi.prototype), Vi.prototype.constructor = Vi, Vi.prototype.isSplineCurve = true, Vi.prototype.getPoint = function(e2, t2) {
          var r2 = t2 || new n(), i2 = this.points, o2 = (i2.length - 1) * e2, a2 = Math.floor(o2), s2 = o2 - a2, c2 = i2[0 === a2 ? a2 : a2 - 1], l2 = i2[a2], u2 = i2[a2 > i2.length - 2 ? i2.length - 1 : a2 + 1], h2 = i2[a2 > i2.length - 3 ? i2.length - 1 : a2 + 2];
          return r2.set(Ai(s2, c2.x, l2.x, u2.x, h2.x), Ai(s2, c2.y, l2.y, u2.y, h2.y)), r2;
        }, Vi.prototype.copy = function(e2) {
          wi.prototype.copy.call(this, e2), this.points = [];
          for (var t2 = 0, r2 = e2.points.length; t2 < r2; t2++) {
            var i2 = e2.points[t2];
            this.points.push(i2.clone());
          }
          return this;
        }, Vi.prototype.toJSON = function() {
          var e2 = wi.prototype.toJSON.call(this);
          e2.points = [];
          for (var t2 = 0, r2 = this.points.length; t2 < r2; t2++) {
            var i2 = this.points[t2];
            e2.points.push(i2.toArray());
          }
          return e2;
        }, Vi.prototype.fromJSON = function(e2) {
          wi.prototype.fromJSON.call(this, e2), this.points = [];
          for (var t2 = 0, r2 = e2.points.length; t2 < r2; t2++) {
            var i2 = e2.points[t2];
            this.points.push(new n().fromArray(i2));
          }
          return this;
        };
        var vc = Object.freeze({ ArcCurve: Ei, CatmullRomCurve3: Ti, CubicBezierCurve: Fi, CubicBezierCurve3: zi, EllipseCurve: Mi, LineCurve: Bi, LineCurve3: Gi, QuadraticBezierCurve: Hi, QuadraticBezierCurve3: ji, SplineCurve: Vi });
        ki.prototype = Object.assign(Object.create(wi.prototype), { constructor: ki, add: function(e2) {
          this.curves.push(e2);
        }, closePath: function() {
          var e2 = this.curves[0].getPoint(0), t2 = this.curves[this.curves.length - 1].getPoint(1);
          e2.equals(t2) || this.curves.push(new Bi(t2, e2));
        }, getPoint: function(e2) {
          for (var t2 = e2 * this.getLength(), r2 = this.getCurveLengths(), i2 = 0; i2 < r2.length; ) {
            if (r2[i2] >= t2) {
              var n2 = r2[i2] - t2, o2 = this.curves[i2], a2 = o2.getLength(), s2 = 0 === a2 ? 0 : 1 - n2 / a2;
              return o2.getPointAt(s2);
            }
            i2++;
          }
          return null;
        }, getLength: function() {
          var e2 = this.getCurveLengths();
          return e2[e2.length - 1];
        }, updateArcLengths: function() {
          this.needsUpdate = true, this.cacheLengths = null, this.getCurveLengths();
        }, getCurveLengths: function() {
          if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
            return this.cacheLengths;
          for (var e2 = [], t2 = 0, r2 = 0, i2 = this.curves.length; r2 < i2; r2++)
            t2 += this.curves[r2].getLength(), e2.push(t2);
          return this.cacheLengths = e2, e2;
        }, getSpacedPoints: function(e2) {
          void 0 === e2 && (e2 = 40);
          for (var t2 = [], r2 = 0; r2 <= e2; r2++)
            t2.push(this.getPoint(r2 / e2));
          return this.autoClose && t2.push(t2[0]), t2;
        }, getPoints: function(e2) {
          e2 = e2 || 12;
          for (var t2, r2 = [], i2 = 0, n2 = this.curves; i2 < n2.length; i2++)
            for (var o2 = n2[i2], a2 = o2 && o2.isEllipseCurve ? 2 * e2 : o2 && o2.isLineCurve ? 1 : o2 && o2.isSplineCurve ? e2 * o2.points.length : e2, s2 = o2.getPoints(a2), c2 = 0; c2 < s2.length; c2++) {
              var l2 = s2[c2];
              t2 && t2.equals(l2) || (r2.push(l2), t2 = l2);
            }
          return this.autoClose && r2.length > 1 && !r2[r2.length - 1].equals(r2[0]) && r2.push(r2[0]), r2;
        }, copy: function(e2) {
          wi.prototype.copy.call(this, e2), this.curves = [];
          for (var t2 = 0, r2 = e2.curves.length; t2 < r2; t2++) {
            var i2 = e2.curves[t2];
            this.curves.push(i2.clone());
          }
          return this.autoClose = e2.autoClose, this;
        }, toJSON: function() {
          var e2 = wi.prototype.toJSON.call(this);
          e2.autoClose = this.autoClose, e2.curves = [];
          for (var t2 = 0, r2 = this.curves.length; t2 < r2; t2++) {
            var i2 = this.curves[t2];
            e2.curves.push(i2.toJSON());
          }
          return e2;
        }, fromJSON: function(e2) {
          wi.prototype.fromJSON.call(this, e2), this.autoClose = e2.autoClose, this.curves = [];
          for (var t2 = 0, r2 = e2.curves.length; t2 < r2; t2++) {
            var i2 = e2.curves[t2];
            this.curves.push(new vc[i2.type]().fromJSON(i2));
          }
          return this;
        } }), Wi.prototype = Object.assign(Object.create(ki.prototype), { constructor: Wi, setFromPoints: function(e2) {
          this.moveTo(e2[0].x, e2[0].y);
          for (var t2 = 1, r2 = e2.length; t2 < r2; t2++)
            this.lineTo(e2[t2].x, e2[t2].y);
        }, moveTo: function(e2, t2) {
          this.currentPoint.set(e2, t2);
        }, lineTo: function(e2, t2) {
          var r2 = new Bi(this.currentPoint.clone(), new n(e2, t2));
          this.curves.push(r2), this.currentPoint.set(e2, t2);
        }, quadraticCurveTo: function(e2, t2, r2, i2) {
          var o2 = new Hi(this.currentPoint.clone(), new n(e2, t2), new n(r2, i2));
          this.curves.push(o2), this.currentPoint.set(r2, i2);
        }, bezierCurveTo: function(e2, t2, r2, i2, o2, a2) {
          var s2 = new Fi(this.currentPoint.clone(), new n(e2, t2), new n(r2, i2), new n(o2, a2));
          this.curves.push(s2), this.currentPoint.set(o2, a2);
        }, splineThru: function(e2) {
          var t2 = [this.currentPoint.clone()].concat(e2), r2 = new Vi(t2);
          this.curves.push(r2), this.currentPoint.copy(e2[e2.length - 1]);
        }, arc: function(e2, t2, r2, i2, n2, o2) {
          var a2 = this.currentPoint.x, s2 = this.currentPoint.y;
          this.absarc(e2 + a2, t2 + s2, r2, i2, n2, o2);
        }, absarc: function(e2, t2, r2, i2, n2, o2) {
          this.absellipse(e2, t2, r2, r2, i2, n2, o2);
        }, ellipse: function(e2, t2, r2, i2, n2, o2, a2, s2) {
          var c2 = this.currentPoint.x, l2 = this.currentPoint.y;
          this.absellipse(e2 + c2, t2 + l2, r2, i2, n2, o2, a2, s2);
        }, absellipse: function(e2, t2, r2, i2, n2, o2, a2, s2) {
          var c2 = new Mi(e2, t2, r2, i2, n2, o2, a2, s2);
          if (this.curves.length > 0) {
            var l2 = c2.getPoint(0);
            l2.equals(this.currentPoint) || this.lineTo(l2.x, l2.y);
          }
          this.curves.push(c2);
          var u2 = c2.getPoint(1);
          this.currentPoint.copy(u2);
        }, copy: function(e2) {
          return ki.prototype.copy.call(this, e2), this.currentPoint.copy(e2.currentPoint), this;
        }, toJSON: function() {
          var e2 = ki.prototype.toJSON.call(this);
          return e2.currentPoint = this.currentPoint.toArray(), e2;
        }, fromJSON: function(e2) {
          return ki.prototype.fromJSON.call(this, e2), this.currentPoint.fromArray(e2.currentPoint), this;
        } }), Xi.prototype = Object.assign(Object.create(Wi.prototype), { constructor: Xi, getPointsHoles: function(e2) {
          for (var t2 = [], r2 = 0, i2 = this.holes.length; r2 < i2; r2++)
            t2[r2] = this.holes[r2].getPoints(e2);
          return t2;
        }, extractPoints: function(e2) {
          return { shape: this.getPoints(e2), holes: this.getPointsHoles(e2) };
        }, copy: function(e2) {
          Wi.prototype.copy.call(this, e2), this.holes = [];
          for (var t2 = 0, r2 = e2.holes.length; t2 < r2; t2++) {
            var i2 = e2.holes[t2];
            this.holes.push(i2.clone());
          }
          return this;
        }, toJSON: function() {
          var e2 = Wi.prototype.toJSON.call(this);
          e2.uuid = this.uuid, e2.holes = [];
          for (var t2 = 0, r2 = this.holes.length; t2 < r2; t2++) {
            var i2 = this.holes[t2];
            e2.holes.push(i2.toJSON());
          }
          return e2;
        }, fromJSON: function(e2) {
          Wi.prototype.fromJSON.call(this, e2), this.uuid = e2.uuid, this.holes = [];
          for (var t2 = 0, r2 = e2.holes.length; t2 < r2; t2++) {
            var i2 = e2.holes[t2];
            this.holes.push(new Wi().fromJSON(i2));
          }
          return this;
        } }), qi.prototype = Object.assign(Object.create(w.prototype), { constructor: qi, isLight: true, copy: function(e2) {
          return w.prototype.copy.call(this, e2), this.color.copy(e2.color), this.intensity = e2.intensity, this;
        }, toJSON: function(e2) {
          var t2 = w.prototype.toJSON.call(this, e2);
          return t2.object.color = this.color.getHex(), t2.object.intensity = this.intensity, void 0 !== this.groundColor && (t2.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (t2.object.distance = this.distance), void 0 !== this.angle && (t2.object.angle = this.angle), void 0 !== this.decay && (t2.object.decay = this.decay), void 0 !== this.penumbra && (t2.object.penumbra = this.penumbra), void 0 !== this.shadow && (t2.object.shadow = this.shadow.toJSON()), t2;
        } }), Yi.prototype = Object.assign(Object.create(qi.prototype), { constructor: Yi, isHemisphereLight: true, copy: function(e2) {
          return qi.prototype.copy.call(this, e2), this.groundColor.copy(e2.groundColor), this;
        } }), Object.assign(Zi.prototype, { copy: function(e2) {
          return this.camera = e2.camera.clone(), this.bias = e2.bias, this.radius = e2.radius, this.mapSize.copy(e2.mapSize), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, toJSON: function() {
          var e2 = {};
          return 0 !== this.bias && (e2.bias = this.bias), 1 !== this.radius && (e2.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (e2.mapSize = this.mapSize.toArray()), e2.camera = this.camera.toJSON(false).object, delete e2.camera.matrix, e2;
        } }), Ji.prototype = Object.assign(Object.create(Zi.prototype), { constructor: Ji, isSpotLightShadow: true, update: function(e2) {
          var t2 = this.camera, r2 = 2 * zs.RAD2DEG * e2.angle, i2 = this.mapSize.width / this.mapSize.height, n2 = e2.distance || t2.far;
          r2 === t2.fov && i2 === t2.aspect && n2 === t2.far || (t2.fov = r2, t2.aspect = i2, t2.far = n2, t2.updateProjectionMatrix());
        } }), Ki.prototype = Object.assign(Object.create(qi.prototype), { constructor: Ki, isSpotLight: true, copy: function(e2) {
          return qi.prototype.copy.call(this, e2), this.distance = e2.distance, this.angle = e2.angle, this.penumbra = e2.penumbra, this.decay = e2.decay, this.target = e2.target.clone(), this.shadow = e2.shadow.clone(), this;
        } }), Qi.prototype = Object.assign(Object.create(qi.prototype), { constructor: Qi, isPointLight: true, copy: function(e2) {
          return qi.prototype.copy.call(this, e2), this.distance = e2.distance, this.decay = e2.decay, this.shadow = e2.shadow.clone(), this;
        } }), $i.prototype = Object.assign(Object.create(Zi.prototype), { constructor: $i }), en.prototype = Object.assign(Object.create(qi.prototype), { constructor: en, isDirectionalLight: true, copy: function(e2) {
          return qi.prototype.copy.call(this, e2), this.target = e2.target.clone(), this.shadow = e2.shadow.clone(), this;
        } }), tn.prototype = Object.assign(Object.create(qi.prototype), { constructor: tn, isAmbientLight: true }), rn.prototype = Object.assign(Object.create(qi.prototype), { constructor: rn, isRectAreaLight: true, copy: function(e2) {
          return qi.prototype.copy.call(this, e2), this.width = e2.width, this.height = e2.height, this;
        }, toJSON: function(e2) {
          var t2 = qi.prototype.toJSON.call(this, e2);
          return t2.object.width = this.width, t2.object.height = this.height, t2;
        } }), nn.prototype = Object.assign(Object.create(fn.prototype), { constructor: nn, ValueTypeName: "string", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), on.prototype = Object.assign(Object.create(fn.prototype), { constructor: on, ValueTypeName: "bool", ValueBufferType: Array, DefaultInterpolation: 2300, InterpolantFactoryMethodLinear: void 0, InterpolantFactoryMethodSmooth: void 0 }), Object.assign(an.prototype, { evaluate: function(e2) {
          var t2 = this.parameterPositions, r2 = this._cachedIndex, i2 = t2[r2], n2 = t2[r2 - 1];
          e: {
            t: {
              var o2;
              r: {
                i:
                  if (!(e2 < i2)) {
                    for (var a2 = r2 + 2; ; ) {
                      if (void 0 === i2) {
                        if (e2 < n2)
                          break i;
                        return r2 = t2.length, this._cachedIndex = r2, this.afterEnd_(r2 - 1, e2, n2);
                      }
                      if (r2 === a2)
                        break;
                      if (n2 = i2, i2 = t2[++r2], e2 < i2)
                        break t;
                    }
                    o2 = t2.length;
                    break r;
                  }
                {
                  if (e2 >= n2)
                    break e;
                  var s2 = t2[1];
                  e2 < s2 && (r2 = 2, n2 = s2);
                  for (var a2 = r2 - 2; ; ) {
                    if (void 0 === n2)
                      return this._cachedIndex = 0, this.beforeStart_(0, e2, i2);
                    if (r2 === a2)
                      break;
                    if (i2 = n2, n2 = t2[--r2 - 1], e2 >= n2)
                      break t;
                  }
                  o2 = r2, r2 = 0;
                }
              }
              for (; r2 < o2; ) {
                var c2 = r2 + o2 >>> 1;
                e2 < t2[c2] ? o2 = c2 : r2 = c2 + 1;
              }
              if (i2 = t2[r2], void 0 === (n2 = t2[r2 - 1]))
                return this._cachedIndex = 0, this.beforeStart_(0, e2, i2);
              if (void 0 === i2)
                return r2 = t2.length, this._cachedIndex = r2, this.afterEnd_(r2 - 1, n2, e2);
            }
            this._cachedIndex = r2, this.intervalChanged_(r2, n2, i2);
          }
          return this.interpolate_(r2, n2, e2, i2);
        }, settings: null, DefaultSettings_: {}, getSettings_: function() {
          return this.settings || this.DefaultSettings_;
        }, copySampleValue_: function(e2) {
          for (var t2 = this.resultBuffer, r2 = this.sampleValues, i2 = this.valueSize, n2 = e2 * i2, o2 = 0; o2 !== i2; ++o2)
            t2[o2] = r2[n2 + o2];
          return t2;
        }, interpolate_: function() {
          throw new Error("call to abstract method");
        }, intervalChanged_: function() {
        } }), //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign(an.prototype, { beforeStart_: an.prototype.copySampleValue_, afterEnd_: an.prototype.copySampleValue_ }), sn.prototype = Object.assign(Object.create(an.prototype), { constructor: sn, interpolate_: function(e2, t2, r2, i2) {
          for (var n2 = this.resultBuffer, o2 = this.sampleValues, s2 = this.valueSize, c2 = e2 * s2, l2 = (r2 - t2) / (i2 - t2), u2 = c2 + s2; c2 !== u2; c2 += 4)
            a.slerpFlat(n2, 0, o2, c2 - s2, o2, c2, l2);
          return n2;
        } }), cn.prototype = Object.assign(Object.create(fn.prototype), { constructor: cn, ValueTypeName: "quaternion", DefaultInterpolation: 2301, InterpolantFactoryMethodLinear: function(e2) {
          return new sn(this.times, this.values, this.getValueSize(), e2);
        }, InterpolantFactoryMethodSmooth: void 0 }), ln.prototype = Object.assign(Object.create(fn.prototype), { constructor: ln, ValueTypeName: "color" }), un.prototype = Object.assign(Object.create(fn.prototype), { constructor: un, ValueTypeName: "number" }), hn.prototype = Object.assign(Object.create(an.prototype), { constructor: hn, DefaultSettings_: { endingStart: Ss, endingEnd: Ss }, intervalChanged_: function(e2, t2, r2) {
          var i2 = this.parameterPositions, n2 = e2 - 2, o2 = e2 + 1, a2 = i2[n2], s2 = i2[o2];
          if (void 0 === a2)
            switch (this.getSettings_().endingStart) {
              case 2401:
                n2 = e2, a2 = 2 * t2 - r2;
                break;
              case 2402:
                n2 = i2.length - 2, a2 = t2 + i2[n2] - i2[n2 + 1];
                break;
              default:
                n2 = e2, a2 = r2;
            }
          if (void 0 === s2)
            switch (this.getSettings_().endingEnd) {
              case 2401:
                o2 = e2, s2 = 2 * r2 - t2;
                break;
              case 2402:
                o2 = 1, s2 = r2 + i2[1] - i2[0];
                break;
              default:
                o2 = e2 - 1, s2 = t2;
            }
          var c2 = 0.5 * (r2 - t2), l2 = this.valueSize;
          this._weightPrev = c2 / (t2 - a2), this._weightNext = c2 / (s2 - r2), this._offsetPrev = n2 * l2, this._offsetNext = o2 * l2;
        }, interpolate_: function(e2, t2, r2, i2) {
          for (var n2 = this.resultBuffer, o2 = this.sampleValues, a2 = this.valueSize, s2 = e2 * a2, c2 = s2 - a2, l2 = this._offsetPrev, u2 = this._offsetNext, h2 = this._weightPrev, d2 = this._weightNext, p2 = (r2 - t2) / (i2 - t2), f2 = p2 * p2, m2 = f2 * p2, v2 = -h2 * m2 + 2 * h2 * f2 - h2 * p2, g2 = (1 + h2) * m2 + (-1.5 - 2 * h2) * f2 + (-0.5 + h2) * p2 + 1, y2 = (-1 - d2) * m2 + (1.5 + d2) * f2 + 0.5 * p2, x2 = d2 * m2 - d2 * f2, _2 = 0; _2 !== a2; ++_2)
            n2[_2] = v2 * o2[l2 + _2] + g2 * o2[c2 + _2] + y2 * o2[s2 + _2] + x2 * o2[u2 + _2];
          return n2;
        } }), dn.prototype = Object.assign(Object.create(an.prototype), { constructor: dn, interpolate_: function(e2, t2, r2, i2) {
          for (var n2 = this.resultBuffer, o2 = this.sampleValues, a2 = this.valueSize, s2 = e2 * a2, c2 = s2 - a2, l2 = (r2 - t2) / (i2 - t2), u2 = 1 - l2, h2 = 0; h2 !== a2; ++h2)
            n2[h2] = o2[c2 + h2] * u2 + o2[s2 + h2] * l2;
          return n2;
        } }), pn.prototype = Object.assign(Object.create(an.prototype), { constructor: pn, interpolate_: function(e2) {
          return this.copySampleValue_(e2 - 1);
        } });
        var gc = { arraySlice: function(e2, t2, r2) {
          return gc.isTypedArray(e2) ? new e2.constructor(e2.subarray(t2, void 0 !== r2 ? r2 : e2.length)) : e2.slice(t2, r2);
        }, convertArray: function(e2, t2, r2) {
          return !e2 || !r2 && e2.constructor === t2 ? e2 : "number" == typeof t2.BYTES_PER_ELEMENT ? new t2(e2) : Array.prototype.slice.call(e2);
        }, isTypedArray: function(e2) {
          return ArrayBuffer.isView(e2) && !(e2 instanceof DataView);
        }, getKeyframeOrder: function(e2) {
          function t2(t3, r3) {
            return e2[t3] - e2[r3];
          }
          for (var r2 = e2.length, i2 = new Array(r2), n2 = 0; n2 !== r2; ++n2)
            i2[n2] = n2;
          return i2.sort(t2), i2;
        }, sortedArray: function(e2, t2, r2) {
          for (var i2 = e2.length, n2 = new e2.constructor(i2), o2 = 0, a2 = 0; a2 !== i2; ++o2)
            for (var s2 = r2[o2] * t2, c2 = 0; c2 !== t2; ++c2)
              n2[a2++] = e2[s2 + c2];
          return n2;
        }, flattenJSON: function(e2, t2, r2, i2) {
          for (var n2 = 1, o2 = e2[0]; void 0 !== o2 && void 0 === o2[i2]; )
            o2 = e2[n2++];
          if (void 0 !== o2) {
            var a2 = o2[i2];
            if (void 0 !== a2)
              if (Array.isArray(a2))
                do {
                  a2 = o2[i2], void 0 !== a2 && (t2.push(o2.time), r2.push.apply(r2, a2)), o2 = e2[n2++];
                } while (void 0 !== o2);
              else if (void 0 !== a2.toArray)
                do {
                  a2 = o2[i2], void 0 !== a2 && (t2.push(o2.time), a2.toArray(r2, r2.length)), o2 = e2[n2++];
                } while (void 0 !== o2);
              else
                do {
                  a2 = o2[i2], void 0 !== a2 && (t2.push(o2.time), r2.push(a2)), o2 = e2[n2++];
                } while (void 0 !== o2);
          }
        } };
        Object.assign(fn, { parse: function(e2) {
          if (void 0 === e2.type)
            throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
          var t2 = fn._getTrackTypeForValueTypeName(e2.type);
          if (void 0 === e2.times) {
            var r2 = [], i2 = [];
            gc.flattenJSON(e2.keys, r2, i2, "value"), e2.times = r2, e2.values = i2;
          }
          return void 0 !== t2.parse ? t2.parse(e2) : new t2(e2.name, e2.times, e2.values, e2.interpolation);
        }, toJSON: function(e2) {
          var t2, r2 = e2.constructor;
          if (void 0 !== r2.toJSON)
            t2 = r2.toJSON(e2);
          else {
            t2 = { name: e2.name, times: gc.convertArray(e2.times, Array), values: gc.convertArray(e2.values, Array) };
            var i2 = e2.getInterpolation();
            i2 !== e2.DefaultInterpolation && (t2.interpolation = i2);
          }
          return t2.type = e2.ValueTypeName, t2;
        }, _getTrackTypeForValueTypeName: function(e2) {
          switch (e2.toLowerCase()) {
            case "scalar":
            case "double":
            case "float":
            case "number":
            case "integer":
              return un;
            case "vector":
            case "vector2":
            case "vector3":
            case "vector4":
              return mn;
            case "color":
              return ln;
            case "quaternion":
              return cn;
            case "bool":
            case "boolean":
              return on;
            case "string":
              return nn;
          }
          throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + e2);
        } }), Object.assign(fn.prototype, { constructor: fn, TimeBufferType: Float32Array, ValueBufferType: Float32Array, DefaultInterpolation: 2301, InterpolantFactoryMethodDiscrete: function(e2) {
          return new pn(this.times, this.values, this.getValueSize(), e2);
        }, InterpolantFactoryMethodLinear: function(e2) {
          return new dn(this.times, this.values, this.getValueSize(), e2);
        }, InterpolantFactoryMethodSmooth: function(e2) {
          return new hn(this.times, this.values, this.getValueSize(), e2);
        }, setInterpolation: function(e2) {
          var t2;
          switch (e2) {
            case 2300:
              t2 = this.InterpolantFactoryMethodDiscrete;
              break;
            case 2301:
              t2 = this.InterpolantFactoryMethodLinear;
              break;
            case 2302:
              t2 = this.InterpolantFactoryMethodSmooth;
          }
          if (void 0 === t2) {
            var r2 = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
            if (void 0 === this.createInterpolant) {
              if (e2 === this.DefaultInterpolation)
                throw new Error(r2);
              this.setInterpolation(this.DefaultInterpolation);
            }
            return void console.warn("THREE.KeyframeTrack:", r2);
          }
          this.createInterpolant = t2;
        }, getInterpolation: function() {
          switch (this.createInterpolant) {
            case this.InterpolantFactoryMethodDiscrete:
              return 2300;
            case this.InterpolantFactoryMethodLinear:
              return 2301;
            case this.InterpolantFactoryMethodSmooth:
              return 2302;
          }
        }, getValueSize: function() {
          return this.values.length / this.times.length;
        }, shift: function(e2) {
          if (0 !== e2)
            for (var t2 = this.times, r2 = 0, i2 = t2.length; r2 !== i2; ++r2)
              t2[r2] += e2;
          return this;
        }, scale: function(e2) {
          if (1 !== e2)
            for (var t2 = this.times, r2 = 0, i2 = t2.length; r2 !== i2; ++r2)
              t2[r2] *= e2;
          return this;
        }, trim: function(e2, t2) {
          for (var r2 = this.times, i2 = r2.length, n2 = 0, o2 = i2 - 1; n2 !== i2 && r2[n2] < e2; )
            ++n2;
          for (; -1 !== o2 && r2[o2] > t2; )
            --o2;
          if (++o2, 0 !== n2 || o2 !== i2) {
            n2 >= o2 && (o2 = Math.max(o2, 1), n2 = o2 - 1);
            var a2 = this.getValueSize();
            this.times = gc.arraySlice(r2, n2, o2), this.values = gc.arraySlice(this.values, n2 * a2, o2 * a2);
          }
          return this;
        }, validate: function() {
          var e2 = true, t2 = this.getValueSize();
          t2 - Math.floor(t2) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e2 = false);
          var r2 = this.times, i2 = this.values, n2 = r2.length;
          0 === n2 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e2 = false);
          for (var o2 = null, a2 = 0; a2 !== n2; a2++) {
            var s2 = r2[a2];
            if ("number" == typeof s2 && isNaN(s2)) {
              console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a2, s2), e2 = false;
              break;
            }
            if (null !== o2 && o2 > s2) {
              console.error("THREE.KeyframeTrack: Out of order keys.", this, a2, s2, o2), e2 = false;
              break;
            }
            o2 = s2;
          }
          if (void 0 !== i2 && gc.isTypedArray(i2))
            for (var a2 = 0, c2 = i2.length; a2 !== c2; ++a2) {
              var l2 = i2[a2];
              if (isNaN(l2)) {
                console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a2, l2), e2 = false;
                break;
              }
            }
          return e2;
        }, optimize: function() {
          for (var e2 = this.times, t2 = this.values, r2 = this.getValueSize(), i2 = 2302 === this.getInterpolation(), n2 = 1, o2 = e2.length - 1, a2 = 1; a2 < o2; ++a2) {
            var s2 = false, c2 = e2[a2];
            if (c2 !== e2[a2 + 1] && (1 !== a2 || c2 !== c2[0]))
              if (i2)
                s2 = true;
              else
                for (var l2 = a2 * r2, u2 = l2 - r2, h2 = l2 + r2, d2 = 0; d2 !== r2; ++d2) {
                  var p2 = t2[l2 + d2];
                  if (p2 !== t2[u2 + d2] || p2 !== t2[h2 + d2]) {
                    s2 = true;
                    break;
                  }
                }
            if (s2) {
              if (a2 !== n2) {
                e2[n2] = e2[a2];
                for (var f2 = a2 * r2, m2 = n2 * r2, d2 = 0; d2 !== r2; ++d2)
                  t2[m2 + d2] = t2[f2 + d2];
              }
              ++n2;
            }
          }
          if (o2 > 0) {
            e2[n2] = e2[o2];
            for (var f2 = o2 * r2, m2 = n2 * r2, d2 = 0; d2 !== r2; ++d2)
              t2[m2 + d2] = t2[f2 + d2];
            ++n2;
          }
          return n2 !== e2.length && (this.times = gc.arraySlice(e2, 0, n2), this.values = gc.arraySlice(t2, 0, n2 * r2)), this;
        } }), mn.prototype = Object.assign(Object.create(fn.prototype), { constructor: mn, ValueTypeName: "vector" }), Object.assign(vn, { parse: function(e2) {
          for (var t2 = [], r2 = e2.tracks, i2 = 1 / (e2.fps || 1), n2 = 0, o2 = r2.length; n2 !== o2; ++n2)
            t2.push(fn.parse(r2[n2]).scale(i2));
          return new vn(e2.name, e2.duration, t2);
        }, toJSON: function(e2) {
          for (var t2 = [], r2 = e2.tracks, i2 = { name: e2.name, duration: e2.duration, tracks: t2 }, n2 = 0, o2 = r2.length; n2 !== o2; ++n2)
            t2.push(fn.toJSON(r2[n2]));
          return i2;
        }, CreateFromMorphTargetSequence: function(e2, t2, r2, i2) {
          for (var n2 = t2.length, o2 = [], a2 = 0; a2 < n2; a2++) {
            var s2 = [], c2 = [];
            s2.push((a2 + n2 - 1) % n2, a2, (a2 + 1) % n2), c2.push(0, 1, 0);
            var l2 = gc.getKeyframeOrder(s2);
            s2 = gc.sortedArray(s2, 1, l2), c2 = gc.sortedArray(c2, 1, l2), i2 || 0 !== s2[0] || (s2.push(n2), c2.push(c2[0])), o2.push(new un(".morphTargetInfluences[" + t2[a2].name + "]", s2, c2).scale(1 / r2));
          }
          return new vn(e2, -1, o2);
        }, findByName: function(e2, t2) {
          var r2 = e2;
          if (!Array.isArray(e2)) {
            var i2 = e2;
            r2 = i2.geometry && i2.geometry.animations || i2.animations;
          }
          for (var n2 = 0; n2 < r2.length; n2++)
            if (r2[n2].name === t2)
              return r2[n2];
          return null;
        }, CreateClipsFromMorphTargetSequences: function(e2, t2, r2) {
          for (var i2 = {}, n2 = /^([\w-]*?)([\d]+)$/, o2 = 0, a2 = e2.length; o2 < a2; o2++) {
            var s2 = e2[o2], c2 = s2.name.match(n2);
            if (c2 && c2.length > 1) {
              var l2 = c2[1], u2 = i2[l2];
              u2 || (i2[l2] = u2 = []), u2.push(s2);
            }
          }
          var h2 = [];
          for (var l2 in i2)
            h2.push(vn.CreateFromMorphTargetSequence(l2, i2[l2], t2, r2));
          return h2;
        }, parseAnimation: function(e2, t2) {
          if (!e2)
            return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
          for (var r2 = function(e3, t3, r3, i3, n3) {
            if (0 !== r3.length) {
              var o3 = [], a3 = [];
              gc.flattenJSON(r3, o3, a3, i3), 0 !== o3.length && n3.push(new e3(t3, o3, a3));
            }
          }, i2 = [], n2 = e2.name || "default", o2 = e2.length || -1, a2 = e2.fps || 30, s2 = e2.hierarchy || [], c2 = 0; c2 < s2.length; c2++) {
            var l2 = s2[c2].keys;
            if (l2 && 0 !== l2.length)
              if (l2[0].morphTargets) {
                for (var u2 = {}, h2 = 0; h2 < l2.length; h2++)
                  if (l2[h2].morphTargets)
                    for (var d2 = 0; d2 < l2[h2].morphTargets.length; d2++)
                      u2[l2[h2].morphTargets[d2]] = -1;
                for (var p2 in u2) {
                  for (var f2 = [], m2 = [], d2 = 0; d2 !== l2[h2].morphTargets.length; ++d2) {
                    var v2 = l2[h2];
                    f2.push(v2.time), m2.push(v2.morphTarget === p2 ? 1 : 0);
                  }
                  i2.push(new un(".morphTargetInfluence[" + p2 + "]", f2, m2));
                }
                o2 = u2.length * (a2 || 1);
              } else {
                var g2 = ".bones[" + t2[c2].name + "]";
                r2(mn, g2 + ".position", l2, "pos", i2), r2(cn, g2 + ".quaternion", l2, "rot", i2), r2(mn, g2 + ".scale", l2, "scl", i2);
              }
          }
          return 0 === i2.length ? null : new vn(n2, o2, i2);
        } }), Object.assign(vn.prototype, { resetDuration: function() {
          for (var e2 = this.tracks, t2 = 0, r2 = 0, i2 = e2.length; r2 !== i2; ++r2) {
            var n2 = this.tracks[r2];
            t2 = Math.max(t2, n2.times[n2.times.length - 1]);
          }
          this.duration = t2;
        }, trim: function() {
          for (var e2 = 0; e2 < this.tracks.length; e2++)
            this.tracks[e2].trim(0, this.duration);
          return this;
        }, optimize: function() {
          for (var e2 = 0; e2 < this.tracks.length; e2++)
            this.tracks[e2].optimize();
          return this;
        } }), Object.assign(gn.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this;
          new vi(n2.manager).load(e2, function(e3) {
            t2(n2.parse(JSON.parse(e3)));
          }, r2, i2);
        }, setTextures: function(e2) {
          this.textures = e2;
        }, parse: function(e2) {
          function t2(e3) {
            return void 0 === r2[e3] && console.warn("THREE.MaterialLoader: Undefined texture", e3), r2[e3];
          }
          var r2 = this.textures, i2 = new cc[e2.type]();
          if (void 0 !== e2.uuid && (i2.uuid = e2.uuid), void 0 !== e2.name && (i2.name = e2.name), void 0 !== e2.color && i2.color.setHex(e2.color), void 0 !== e2.roughness && (i2.roughness = e2.roughness), void 0 !== e2.metalness && (i2.metalness = e2.metalness), void 0 !== e2.emissive && i2.emissive.setHex(e2.emissive), void 0 !== e2.specular && i2.specular.setHex(e2.specular), void 0 !== e2.shininess && (i2.shininess = e2.shininess), void 0 !== e2.clearCoat && (i2.clearCoat = e2.clearCoat), void 0 !== e2.clearCoatRoughness && (i2.clearCoatRoughness = e2.clearCoatRoughness), void 0 !== e2.uniforms && (i2.uniforms = e2.uniforms), void 0 !== e2.vertexShader && (i2.vertexShader = e2.vertexShader), void 0 !== e2.fragmentShader && (i2.fragmentShader = e2.fragmentShader), void 0 !== e2.vertexColors && (i2.vertexColors = e2.vertexColors), void 0 !== e2.fog && (i2.fog = e2.fog), void 0 !== e2.flatShading && (i2.flatShading = e2.flatShading), void 0 !== e2.blending && (i2.blending = e2.blending), void 0 !== e2.side && (i2.side = e2.side), void 0 !== e2.opacity && (i2.opacity = e2.opacity), void 0 !== e2.transparent && (i2.transparent = e2.transparent), void 0 !== e2.alphaTest && (i2.alphaTest = e2.alphaTest), void 0 !== e2.depthTest && (i2.depthTest = e2.depthTest), void 0 !== e2.depthWrite && (i2.depthWrite = e2.depthWrite), void 0 !== e2.colorWrite && (i2.colorWrite = e2.colorWrite), void 0 !== e2.wireframe && (i2.wireframe = e2.wireframe), void 0 !== e2.wireframeLinewidth && (i2.wireframeLinewidth = e2.wireframeLinewidth), void 0 !== e2.wireframeLinecap && (i2.wireframeLinecap = e2.wireframeLinecap), void 0 !== e2.wireframeLinejoin && (i2.wireframeLinejoin = e2.wireframeLinejoin), void 0 !== e2.rotation && (i2.rotation = e2.rotation), 1 !== e2.linewidth && (i2.linewidth = e2.linewidth), void 0 !== e2.dashSize && (i2.dashSize = e2.dashSize), void 0 !== e2.gapSize && (i2.gapSize = e2.gapSize), void 0 !== e2.scale && (i2.scale = e2.scale), void 0 !== e2.polygonOffset && (i2.polygonOffset = e2.polygonOffset), void 0 !== e2.polygonOffsetFactor && (i2.polygonOffsetFactor = e2.polygonOffsetFactor), void 0 !== e2.polygonOffsetUnits && (i2.polygonOffsetUnits = e2.polygonOffsetUnits), void 0 !== e2.skinning && (i2.skinning = e2.skinning), void 0 !== e2.morphTargets && (i2.morphTargets = e2.morphTargets), void 0 !== e2.dithering && (i2.dithering = e2.dithering), void 0 !== e2.visible && (i2.visible = e2.visible), void 0 !== e2.userData && (i2.userData = e2.userData), void 0 !== e2.shading && (i2.flatShading = 1 === e2.shading), void 0 !== e2.size && (i2.size = e2.size), void 0 !== e2.sizeAttenuation && (i2.sizeAttenuation = e2.sizeAttenuation), void 0 !== e2.map && (i2.map = t2(e2.map)), void 0 !== e2.alphaMap && (i2.alphaMap = t2(e2.alphaMap), i2.transparent = true), void 0 !== e2.bumpMap && (i2.bumpMap = t2(e2.bumpMap)), void 0 !== e2.bumpScale && (i2.bumpScale = e2.bumpScale), void 0 !== e2.normalMap && (i2.normalMap = t2(e2.normalMap)), void 0 !== e2.normalScale) {
            var o2 = e2.normalScale;
            false === Array.isArray(o2) && (o2 = [o2, o2]), i2.normalScale = new n().fromArray(o2);
          }
          return void 0 !== e2.displacementMap && (i2.displacementMap = t2(e2.displacementMap)), void 0 !== e2.displacementScale && (i2.displacementScale = e2.displacementScale), void 0 !== e2.displacementBias && (i2.displacementBias = e2.displacementBias), void 0 !== e2.roughnessMap && (i2.roughnessMap = t2(e2.roughnessMap)), void 0 !== e2.metalnessMap && (i2.metalnessMap = t2(e2.metalnessMap)), void 0 !== e2.emissiveMap && (i2.emissiveMap = t2(e2.emissiveMap)), void 0 !== e2.emissiveIntensity && (i2.emissiveIntensity = e2.emissiveIntensity), void 0 !== e2.specularMap && (i2.specularMap = t2(e2.specularMap)), void 0 !== e2.envMap && (i2.envMap = t2(e2.envMap)), void 0 !== e2.reflectivity && (i2.reflectivity = e2.reflectivity), void 0 !== e2.lightMap && (i2.lightMap = t2(e2.lightMap)), void 0 !== e2.lightMapIntensity && (i2.lightMapIntensity = e2.lightMapIntensity), void 0 !== e2.aoMap && (i2.aoMap = t2(e2.aoMap)), void 0 !== e2.aoMapIntensity && (i2.aoMapIntensity = e2.aoMapIntensity), void 0 !== e2.gradientMap && (i2.gradientMap = t2(e2.gradientMap)), i2;
        } }), Object.assign(yn.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this;
          new vi(n2.manager).load(e2, function(e3) {
            t2(n2.parse(JSON.parse(e3)));
          }, r2, i2);
        }, parse: function(e2) {
          var t2 = new B(), r2 = e2.data.index;
          if (void 0 !== r2) {
            var i2 = new yc[r2.type](r2.array);
            t2.setIndex(new A(i2, 1));
          }
          var n2 = e2.data.attributes;
          for (var o2 in n2) {
            var a2 = n2[o2], i2 = new yc[a2.type](a2.array);
            t2.addAttribute(o2, new A(i2, a2.itemSize, a2.normalized));
          }
          var c2 = e2.data.groups || e2.data.drawcalls || e2.data.offsets;
          if (void 0 !== c2)
            for (var l2 = 0, u2 = c2.length; l2 !== u2; ++l2) {
              var h2 = c2[l2];
              t2.addGroup(h2.start, h2.count, h2.materialIndex);
            }
          var d2 = e2.data.boundingSphere;
          if (void 0 !== d2) {
            var p2 = new s();
            void 0 !== d2.center && p2.fromArray(d2.center), t2.boundingSphere = new m(p2, d2.radius);
          }
          return t2;
        } });
        var yc = { Int8Array, Uint8Array, Uint8ClampedArray: "undefined" != typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array };
        xn.Handlers = { handlers: [], add: function(e2, t2) {
          this.handlers.push(e2, t2);
        }, get: function(e2) {
          for (var t2 = this.handlers, r2 = 0, i2 = t2.length; r2 < i2; r2 += 2) {
            var n2 = t2[r2], o2 = t2[r2 + 1];
            if (n2.test(e2))
              return o2;
          }
          return null;
        } }, Object.assign(xn.prototype, { crossOrigin: void 0, onLoadStart: function() {
        }, onLoadProgress: function() {
        }, onLoadComplete: function() {
        }, initMaterials: function(e2, t2, r2) {
          for (var i2 = [], n2 = 0; n2 < e2.length; ++n2)
            i2[n2] = this.createMaterial(e2[n2], t2, r2);
          return i2;
        }, createMaterial: function() {
          var e2 = { NoBlending: No, NormalBlending: Fo, AdditiveBlending: zo, SubtractiveBlending: Bo, MultiplyBlending: Go, CustomBlending: Ho }, t2 = new y(), r2 = new bi(), i2 = new gn();
          return function(n2, o2, a2) {
            function s2(e3, t3, i3, n3, s3) {
              var l3, u3 = o2 + e3, h3 = xn.Handlers.get(u3);
              null !== h3 ? l3 = h3.load(u3) : (r2.setCrossOrigin(a2), l3 = r2.load(u3)), void 0 !== t3 && (l3.repeat.fromArray(t3), 1 !== t3[0] && (l3.wrapS = Aa), 1 !== t3[1] && (l3.wrapT = Aa)), void 0 !== i3 && l3.offset.fromArray(i3), void 0 !== n3 && ("repeat" === n3[0] && (l3.wrapS = Aa), "mirror" === n3[0] && (l3.wrapS = Ca), "repeat" === n3[1] && (l3.wrapT = Aa), "mirror" === n3[1] && (l3.wrapT = Ca)), void 0 !== s3 && (l3.anisotropy = s3);
              var d2 = zs.generateUUID();
              return c2[d2] = l3, d2;
            }
            var c2 = {}, l2 = { uuid: zs.generateUUID(), type: "MeshLambertMaterial" };
            for (var u2 in n2) {
              var h2 = n2[u2];
              switch (u2) {
                case "DbgColor":
                case "DbgIndex":
                case "opticalDensity":
                case "illumination":
                  break;
                case "DbgName":
                  l2.name = h2;
                  break;
                case "blending":
                  l2.blending = e2[h2];
                  break;
                case "colorAmbient":
                case "mapAmbient":
                  console.warn("THREE.Loader.createMaterial:", u2, "is no longer supported.");
                  break;
                case "colorDiffuse":
                  l2.color = t2.fromArray(h2).getHex();
                  break;
                case "colorSpecular":
                  l2.specular = t2.fromArray(h2).getHex();
                  break;
                case "colorEmissive":
                  l2.emissive = t2.fromArray(h2).getHex();
                  break;
                case "specularCoef":
                  l2.shininess = h2;
                  break;
                case "shading":
                  "basic" === h2.toLowerCase() && (l2.type = "MeshBasicMaterial"), "phong" === h2.toLowerCase() && (l2.type = "MeshPhongMaterial"), "standard" === h2.toLowerCase() && (l2.type = "MeshStandardMaterial");
                  break;
                case "mapDiffuse":
                  l2.map = s2(h2, n2.mapDiffuseRepeat, n2.mapDiffuseOffset, n2.mapDiffuseWrap, n2.mapDiffuseAnisotropy);
                  break;
                case "mapDiffuseRepeat":
                case "mapDiffuseOffset":
                case "mapDiffuseWrap":
                case "mapDiffuseAnisotropy":
                  break;
                case "mapEmissive":
                  l2.emissiveMap = s2(h2, n2.mapEmissiveRepeat, n2.mapEmissiveOffset, n2.mapEmissiveWrap, n2.mapEmissiveAnisotropy);
                  break;
                case "mapEmissiveRepeat":
                case "mapEmissiveOffset":
                case "mapEmissiveWrap":
                case "mapEmissiveAnisotropy":
                  break;
                case "mapLight":
                  l2.lightMap = s2(h2, n2.mapLightRepeat, n2.mapLightOffset, n2.mapLightWrap, n2.mapLightAnisotropy);
                  break;
                case "mapLightRepeat":
                case "mapLightOffset":
                case "mapLightWrap":
                case "mapLightAnisotropy":
                  break;
                case "mapAO":
                  l2.aoMap = s2(h2, n2.mapAORepeat, n2.mapAOOffset, n2.mapAOWrap, n2.mapAOAnisotropy);
                  break;
                case "mapAORepeat":
                case "mapAOOffset":
                case "mapAOWrap":
                case "mapAOAnisotropy":
                  break;
                case "mapBump":
                  l2.bumpMap = s2(h2, n2.mapBumpRepeat, n2.mapBumpOffset, n2.mapBumpWrap, n2.mapBumpAnisotropy);
                  break;
                case "mapBumpScale":
                  l2.bumpScale = h2;
                  break;
                case "mapBumpRepeat":
                case "mapBumpOffset":
                case "mapBumpWrap":
                case "mapBumpAnisotropy":
                  break;
                case "mapNormal":
                  l2.normalMap = s2(h2, n2.mapNormalRepeat, n2.mapNormalOffset, n2.mapNormalWrap, n2.mapNormalAnisotropy);
                  break;
                case "mapNormalFactor":
                  l2.normalScale = h2;
                  break;
                case "mapNormalRepeat":
                case "mapNormalOffset":
                case "mapNormalWrap":
                case "mapNormalAnisotropy":
                  break;
                case "mapSpecular":
                  l2.specularMap = s2(h2, n2.mapSpecularRepeat, n2.mapSpecularOffset, n2.mapSpecularWrap, n2.mapSpecularAnisotropy);
                  break;
                case "mapSpecularRepeat":
                case "mapSpecularOffset":
                case "mapSpecularWrap":
                case "mapSpecularAnisotropy":
                  break;
                case "mapMetalness":
                  l2.metalnessMap = s2(h2, n2.mapMetalnessRepeat, n2.mapMetalnessOffset, n2.mapMetalnessWrap, n2.mapMetalnessAnisotropy);
                  break;
                case "mapMetalnessRepeat":
                case "mapMetalnessOffset":
                case "mapMetalnessWrap":
                case "mapMetalnessAnisotropy":
                  break;
                case "mapRoughness":
                  l2.roughnessMap = s2(h2, n2.mapRoughnessRepeat, n2.mapRoughnessOffset, n2.mapRoughnessWrap, n2.mapRoughnessAnisotropy);
                  break;
                case "mapRoughnessRepeat":
                case "mapRoughnessOffset":
                case "mapRoughnessWrap":
                case "mapRoughnessAnisotropy":
                  break;
                case "mapAlpha":
                  l2.alphaMap = s2(h2, n2.mapAlphaRepeat, n2.mapAlphaOffset, n2.mapAlphaWrap, n2.mapAlphaAnisotropy);
                  break;
                case "mapAlphaRepeat":
                case "mapAlphaOffset":
                case "mapAlphaWrap":
                case "mapAlphaAnisotropy":
                  break;
                case "flipSided":
                  l2.side = Po;
                  break;
                case "doubleSided":
                  l2.side = Do;
                  break;
                case "transparency":
                  console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"), l2.opacity = h2;
                  break;
                case "depthTest":
                case "depthWrite":
                case "colorWrite":
                case "opacity":
                case "reflectivity":
                case "transparent":
                case "visible":
                case "wireframe":
                  l2[u2] = h2;
                  break;
                case "vertexColors":
                  true === h2 && (l2.vertexColors = Oo), "face" === h2 && (l2.vertexColors = Io);
                  break;
                default:
                  console.error("THREE.Loader.createMaterial: Unsupported", u2, h2);
              }
            }
            return "MeshBasicMaterial" === l2.type && delete l2.emissive, "MeshPhongMaterial" !== l2.type && delete l2.specular, l2.opacity < 1 && (l2.transparent = true), i2.setTextures(c2), i2.parse(l2);
          };
        }() });
        var xc = { decodeText: function(e2) {
          if ("undefined" != typeof TextDecoder)
            return new TextDecoder().decode(e2);
          for (var t2 = "", r2 = 0, i2 = e2.length; r2 < i2; r2++)
            t2 += String.fromCharCode(e2[r2]);
          return decodeURIComponent(escape(t2));
        }, extractUrlBase: function(e2) {
          var t2 = e2.lastIndexOf("/");
          return -1 === t2 ? "./" : e2.substr(0, t2 + 1);
        } };
        Object.assign(_n.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this, o2 = this.texturePath && "string" == typeof this.texturePath ? this.texturePath : xc.extractUrlBase(e2), a2 = new vi(this.manager);
          a2.setWithCredentials(this.withCredentials), a2.load(e2, function(r3) {
            var i3 = JSON.parse(r3), a3 = i3.metadata;
            if (void 0 !== a3) {
              var s2 = a3.type;
              if (void 0 !== s2 && "object" === s2.toLowerCase())
                return void console.error("THREE.JSONLoader: " + e2 + " should be loaded with THREE.ObjectLoader instead.");
            }
            var c2 = n2.parse(i3, o2);
            t2(c2.geometry, c2.materials);
          }, r2, i2);
        }, setTexturePath: function(e2) {
          this.texturePath = e2;
        }, parse: function() {
          function e2(e3, t3) {
            function r3(e4, t4) {
              return e4 & 1 << t4;
            }
            var i3, o2, a2, c2, l2, u2, h2, d2, p2, f2, m2, v2, g2, x2, _2, b2, w2, M2, E2, T2, A2, L2, C2, R2, P2, D2, U2, I2 = e3.faces, O2 = e3.vertices, N2 = e3.normals, F2 = e3.colors, z2 = e3.scale, B2 = 0;
            if (void 0 !== e3.uvs) {
              for (i3 = 0; i3 < e3.uvs.length; i3++)
                e3.uvs[i3].length && B2++;
              for (i3 = 0; i3 < B2; i3++)
                t3.faceVertexUvs[i3] = [];
            }
            for (c2 = 0, l2 = O2.length; c2 < l2; )
              M2 = new s(), M2.x = O2[c2++] * z2, M2.y = O2[c2++] * z2, M2.z = O2[c2++] * z2, t3.vertices.push(M2);
            for (c2 = 0, l2 = I2.length; c2 < l2; )
              if (f2 = I2[c2++], m2 = r3(f2, 0), v2 = r3(f2, 1), g2 = r3(f2, 3), x2 = r3(f2, 4), _2 = r3(f2, 5), b2 = r3(f2, 6), w2 = r3(f2, 7), m2) {
                if (T2 = new S(), T2.a = I2[c2], T2.b = I2[c2 + 1], T2.c = I2[c2 + 3], A2 = new S(), A2.a = I2[c2 + 1], A2.b = I2[c2 + 2], A2.c = I2[c2 + 3], c2 += 4, v2 && (p2 = I2[c2++], T2.materialIndex = p2, A2.materialIndex = p2), a2 = t3.faces.length, g2)
                  for (i3 = 0; i3 < B2; i3++)
                    for (R2 = e3.uvs[i3], t3.faceVertexUvs[i3][a2] = [], t3.faceVertexUvs[i3][a2 + 1] = [], o2 = 0; o2 < 4; o2++)
                      d2 = I2[c2++], D2 = R2[2 * d2], U2 = R2[2 * d2 + 1], P2 = new n(D2, U2), 2 !== o2 && t3.faceVertexUvs[i3][a2].push(P2), 0 !== o2 && t3.faceVertexUvs[i3][a2 + 1].push(P2);
                if (x2 && (h2 = 3 * I2[c2++], T2.normal.set(N2[h2++], N2[h2++], N2[h2]), A2.normal.copy(T2.normal)), _2)
                  for (i3 = 0; i3 < 4; i3++)
                    h2 = 3 * I2[c2++], C2 = new s(N2[h2++], N2[h2++], N2[h2]), 2 !== i3 && T2.vertexNormals.push(C2), 0 !== i3 && A2.vertexNormals.push(C2);
                if (b2 && (u2 = I2[c2++], L2 = F2[u2], T2.color.setHex(L2), A2.color.setHex(L2)), w2)
                  for (i3 = 0; i3 < 4; i3++)
                    u2 = I2[c2++], L2 = F2[u2], 2 !== i3 && T2.vertexColors.push(new y(L2)), 0 !== i3 && A2.vertexColors.push(new y(L2));
                t3.faces.push(T2), t3.faces.push(A2);
              } else {
                if (E2 = new S(), E2.a = I2[c2++], E2.b = I2[c2++], E2.c = I2[c2++], v2 && (p2 = I2[c2++], E2.materialIndex = p2), a2 = t3.faces.length, g2)
                  for (i3 = 0; i3 < B2; i3++)
                    for (R2 = e3.uvs[i3], t3.faceVertexUvs[i3][a2] = [], o2 = 0; o2 < 3; o2++)
                      d2 = I2[c2++], D2 = R2[2 * d2], U2 = R2[2 * d2 + 1], P2 = new n(D2, U2), t3.faceVertexUvs[i3][a2].push(P2);
                if (x2 && (h2 = 3 * I2[c2++], E2.normal.set(N2[h2++], N2[h2++], N2[h2])), _2)
                  for (i3 = 0; i3 < 3; i3++)
                    h2 = 3 * I2[c2++], C2 = new s(N2[h2++], N2[h2++], N2[h2]), E2.vertexNormals.push(C2);
                if (b2 && (u2 = I2[c2++], E2.color.setHex(F2[u2])), w2)
                  for (i3 = 0; i3 < 3; i3++)
                    u2 = I2[c2++], E2.vertexColors.push(new y(F2[u2]));
                t3.faces.push(E2);
              }
          }
          function t2(e3, t3) {
            var r3 = void 0 !== e3.influencesPerVertex ? e3.influencesPerVertex : 2;
            if (e3.skinWeights)
              for (var i3 = 0, n2 = e3.skinWeights.length; i3 < n2; i3 += r3) {
                var o2 = e3.skinWeights[i3], a2 = r3 > 1 ? e3.skinWeights[i3 + 1] : 0, s2 = r3 > 2 ? e3.skinWeights[i3 + 2] : 0, c2 = r3 > 3 ? e3.skinWeights[i3 + 3] : 0;
                t3.skinWeights.push(new u(o2, a2, s2, c2));
              }
            if (e3.skinIndices)
              for (var i3 = 0, n2 = e3.skinIndices.length; i3 < n2; i3 += r3) {
                var l2 = e3.skinIndices[i3], h2 = r3 > 1 ? e3.skinIndices[i3 + 1] : 0, d2 = r3 > 2 ? e3.skinIndices[i3 + 2] : 0, p2 = r3 > 3 ? e3.skinIndices[i3 + 3] : 0;
                t3.skinIndices.push(new u(l2, h2, d2, p2));
              }
            t3.bones = e3.bones, t3.bones && t3.bones.length > 0 && (t3.skinWeights.length !== t3.skinIndices.length || t3.skinIndices.length !== t3.vertices.length) && console.warn("When skinning, number of vertices (" + t3.vertices.length + "), skinIndices (" + t3.skinIndices.length + "), and skinWeights (" + t3.skinWeights.length + ") should match.");
          }
          function r2(e3, t3) {
            var r3 = e3.scale;
            if (void 0 !== e3.morphTargets)
              for (var i3 = 0, n2 = e3.morphTargets.length; i3 < n2; i3++) {
                t3.morphTargets[i3] = {}, t3.morphTargets[i3].name = e3.morphTargets[i3].name, t3.morphTargets[i3].vertices = [];
                for (var o2 = t3.morphTargets[i3].vertices, a2 = e3.morphTargets[i3].vertices, c2 = 0, l2 = a2.length; c2 < l2; c2 += 3) {
                  var u2 = new s();
                  u2.x = a2[c2] * r3, u2.y = a2[c2 + 1] * r3, u2.z = a2[c2 + 2] * r3, o2.push(u2);
                }
              }
            if (void 0 !== e3.morphColors && e3.morphColors.length > 0) {
              console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');
              for (var h2 = t3.faces, d2 = e3.morphColors[0].colors, i3 = 0, n2 = h2.length; i3 < n2; i3++)
                h2[i3].color.fromArray(d2, 3 * i3);
            }
          }
          function i2(e3, t3) {
            var r3 = [], i3 = [];
            void 0 !== e3.animation && i3.push(e3.animation), void 0 !== e3.animations && (e3.animations.length ? i3 = i3.concat(e3.animations) : i3.push(e3.animations));
            for (var n2 = 0; n2 < i3.length; n2++) {
              var o2 = vn.parseAnimation(i3[n2], t3.bones);
              o2 && r3.push(o2);
            }
            if (t3.morphTargets) {
              var a2 = vn.CreateClipsFromMorphTargetSequences(t3.morphTargets, 10);
              r3 = r3.concat(a2);
            }
            r3.length > 0 && (t3.animations = r3);
          }
          return function(n2, o2) {
            void 0 !== n2.data && (n2 = n2.data), void 0 !== n2.scale ? n2.scale = 1 / n2.scale : n2.scale = 1;
            var a2 = new T();
            return e2(n2, a2), t2(n2, a2), r2(n2, a2), i2(n2, a2), a2.computeFaceNormals(), a2.computeBoundingSphere(), void 0 === n2.materials || 0 === n2.materials.length ? { geometry: a2 } : { geometry: a2, materials: xn.prototype.initMaterials(n2.materials, o2, this.crossOrigin) };
          };
        }() }), Object.assign(bn.prototype, { load: function(e2, t2, r2, i2) {
          "" === this.texturePath && (this.texturePath = e2.substring(0, e2.lastIndexOf("/") + 1));
          var n2 = this;
          new vi(n2.manager).load(e2, function(r3) {
            var o2 = null;
            try {
              o2 = JSON.parse(r3);
            } catch (t3) {
              return void 0 !== i2 && i2(t3), void console.error("THREE:ObjectLoader: Can't parse " + e2 + ".", t3.message);
            }
            var a2 = o2.metadata;
            if (void 0 === a2 || void 0 === a2.type || "geometry" === a2.type.toLowerCase())
              return void console.error("THREE.ObjectLoader: Can't load " + e2 + ". Use THREE.JSONLoader instead.");
            n2.parse(o2, t2);
          }, r2, i2);
        }, setTexturePath: function(e2) {
          this.texturePath = e2;
        }, setCrossOrigin: function(e2) {
          this.crossOrigin = e2;
        }, parse: function(e2, t2) {
          var r2 = this.parseShape(e2.shapes), i2 = this.parseGeometries(e2.geometries, r2), n2 = this.parseImages(e2.images, function() {
            void 0 !== t2 && t2(s2);
          }), o2 = this.parseTextures(e2.textures, n2), a2 = this.parseMaterials(e2.materials, o2), s2 = this.parseObject(e2.object, i2, a2);
          return e2.animations && (s2.animations = this.parseAnimations(e2.animations)), void 0 !== e2.images && 0 !== e2.images.length || void 0 !== t2 && t2(s2), s2;
        }, parseShape: function(e2) {
          var t2 = {};
          if (void 0 !== e2)
            for (var r2 = 0, i2 = e2.length; r2 < i2; r2++) {
              var n2 = new Xi().fromJSON(e2[r2]);
              t2[n2.uuid] = n2;
            }
          return t2;
        }, parseGeometries: function(e2, t2) {
          var r2 = {};
          if (void 0 !== e2)
            for (var i2 = new _n(), n2 = new yn(), o2 = 0, a2 = e2.length; o2 < a2; o2++) {
              var s2, c2 = e2[o2];
              switch (c2.type) {
                case "PlaneGeometry":
                case "PlaneBufferGeometry":
                  s2 = new sc[c2.type](c2.width, c2.height, c2.widthSegments, c2.heightSegments);
                  break;
                case "BoxGeometry":
                case "BoxBufferGeometry":
                case "CubeGeometry":
                  s2 = new sc[c2.type](c2.width, c2.height, c2.depth, c2.widthSegments, c2.heightSegments, c2.depthSegments);
                  break;
                case "CircleGeometry":
                case "CircleBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.segments, c2.thetaStart, c2.thetaLength);
                  break;
                case "CylinderGeometry":
                case "CylinderBufferGeometry":
                  s2 = new sc[c2.type](c2.radiusTop, c2.radiusBottom, c2.height, c2.radialSegments, c2.heightSegments, c2.openEnded, c2.thetaStart, c2.thetaLength);
                  break;
                case "ConeGeometry":
                case "ConeBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.height, c2.radialSegments, c2.heightSegments, c2.openEnded, c2.thetaStart, c2.thetaLength);
                  break;
                case "SphereGeometry":
                case "SphereBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.widthSegments, c2.heightSegments, c2.phiStart, c2.phiLength, c2.thetaStart, c2.thetaLength);
                  break;
                case "DodecahedronGeometry":
                case "DodecahedronBufferGeometry":
                case "IcosahedronGeometry":
                case "IcosahedronBufferGeometry":
                case "OctahedronGeometry":
                case "OctahedronBufferGeometry":
                case "TetrahedronGeometry":
                case "TetrahedronBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.detail);
                  break;
                case "RingGeometry":
                case "RingBufferGeometry":
                  s2 = new sc[c2.type](c2.innerRadius, c2.outerRadius, c2.thetaSegments, c2.phiSegments, c2.thetaStart, c2.thetaLength);
                  break;
                case "TorusGeometry":
                case "TorusBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.tube, c2.radialSegments, c2.tubularSegments, c2.arc);
                  break;
                case "TorusKnotGeometry":
                case "TorusKnotBufferGeometry":
                  s2 = new sc[c2.type](c2.radius, c2.tube, c2.tubularSegments, c2.radialSegments, c2.p, c2.q);
                  break;
                case "LatheGeometry":
                case "LatheBufferGeometry":
                  s2 = new sc[c2.type](c2.points, c2.segments, c2.phiStart, c2.phiLength);
                  break;
                case "PolyhedronGeometry":
                case "PolyhedronBufferGeometry":
                  s2 = new sc[c2.type](c2.vertices, c2.indices, c2.radius, c2.details);
                  break;
                case "ShapeGeometry":
                case "ShapeBufferGeometry":
                  for (var l2 = [], u2 = 0, h2 = c2.shapes.length; u2 < h2; u2++) {
                    var d2 = t2[c2.shapes[u2]];
                    l2.push(d2);
                  }
                  s2 = new sc[c2.type](l2, c2.curveSegments);
                  break;
                case "BufferGeometry":
                  s2 = n2.parse(c2);
                  break;
                case "Geometry":
                  s2 = i2.parse(c2, this.texturePath).geometry;
                  break;
                default:
                  console.warn('THREE.ObjectLoader: Unsupported geometry type "' + c2.type + '"');
                  continue;
              }
              s2.uuid = c2.uuid, void 0 !== c2.name && (s2.name = c2.name), r2[c2.uuid] = s2;
            }
          return r2;
        }, parseMaterials: function(e2, t2) {
          var r2 = {};
          if (void 0 !== e2) {
            var i2 = new gn();
            i2.setTextures(t2);
            for (var n2 = 0, o2 = e2.length; n2 < o2; n2++) {
              var a2 = e2[n2];
              if ("MultiMaterial" === a2.type) {
                for (var s2 = [], c2 = 0; c2 < a2.materials.length; c2++)
                  s2.push(i2.parse(a2.materials[c2]));
                r2[a2.uuid] = s2;
              } else
                r2[a2.uuid] = i2.parse(a2);
            }
          }
          return r2;
        }, parseAnimations: function(e2) {
          for (var t2 = [], r2 = 0; r2 < e2.length; r2++) {
            var i2 = vn.parse(e2[r2]);
            t2.push(i2);
          }
          return t2;
        }, parseImages: function(e2, t2) {
          var r2 = this, i2 = {};
          if (void 0 !== e2 && e2.length > 0) {
            var n2 = new mi(t2), o2 = new xi(n2);
            o2.setCrossOrigin(this.crossOrigin);
            for (var a2 = 0, s2 = e2.length; a2 < s2; a2++) {
              var c2 = e2[a2], l2 = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c2.url) ? c2.url : r2.texturePath + c2.url;
              i2[c2.uuid] = function(e3) {
                return r2.manager.itemStart(e3), o2.load(e3, function() {
                  r2.manager.itemEnd(e3);
                }, void 0, function() {
                  r2.manager.itemEnd(e3), r2.manager.itemError(e3);
                });
              }(l2);
            }
          }
          return i2;
        }, parseTextures: function(e2, t2) {
          function r2(e3, t3) {
            return "number" == typeof e3 ? e3 : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", e3), t3[e3]);
          }
          var i2 = {};
          if (void 0 !== e2)
            for (var n2 = 0, o2 = e2.length; n2 < o2; n2++) {
              var a2 = e2[n2];
              void 0 === a2.image && console.warn('THREE.ObjectLoader: No "image" specified for', a2.uuid), void 0 === t2[a2.image] && console.warn("THREE.ObjectLoader: Undefined image", a2.image);
              var s2 = new l(t2[a2.image]);
              s2.needsUpdate = true, s2.uuid = a2.uuid, void 0 !== a2.name && (s2.name = a2.name), void 0 !== a2.mapping && (s2.mapping = r2(a2.mapping, _c)), void 0 !== a2.offset && s2.offset.fromArray(a2.offset), void 0 !== a2.repeat && s2.repeat.fromArray(a2.repeat), void 0 !== a2.center && s2.center.fromArray(a2.center), void 0 !== a2.rotation && (s2.rotation = a2.rotation), void 0 !== a2.wrap && (s2.wrapS = r2(a2.wrap[0], bc), s2.wrapT = r2(a2.wrap[1], bc)), void 0 !== a2.format && (s2.format = a2.format), void 0 !== a2.minFilter && (s2.minFilter = r2(a2.minFilter, wc)), void 0 !== a2.magFilter && (s2.magFilter = r2(a2.magFilter, wc)), void 0 !== a2.anisotropy && (s2.anisotropy = a2.anisotropy), void 0 !== a2.flipY && (s2.flipY = a2.flipY), i2[a2.uuid] = s2;
            }
          return i2;
        }, parseObject: function(e2, t2, r2) {
          function i2(e3) {
            return void 0 === t2[e3] && console.warn("THREE.ObjectLoader: Undefined geometry", e3), t2[e3];
          }
          function n2(e3) {
            if (void 0 !== e3) {
              if (Array.isArray(e3)) {
                for (var t3 = [], i3 = 0, n3 = e3.length; i3 < n3; i3++) {
                  var o3 = e3[i3];
                  void 0 === r2[o3] && console.warn("THREE.ObjectLoader: Undefined material", o3), t3.push(r2[o3]);
                }
                return t3;
              }
              return void 0 === r2[e3] && console.warn("THREE.ObjectLoader: Undefined material", e3), r2[e3];
            }
          }
          var o2;
          switch (e2.type) {
            case "Scene":
              o2 = new Lt(), void 0 !== e2.background && Number.isInteger(e2.background) && (o2.background = new y(e2.background)), void 0 !== e2.fog && ("Fog" === e2.fog.type ? o2.fog = new At(e2.fog.color, e2.fog.near, e2.fog.far) : "FogExp2" === e2.fog.type && (o2.fog = new Tt(e2.fog.color, e2.fog.density)));
              break;
            case "PerspectiveCamera":
              o2 = new wt(e2.fov, e2.aspect, e2.near, e2.far), void 0 !== e2.focus && (o2.focus = e2.focus), void 0 !== e2.zoom && (o2.zoom = e2.zoom), void 0 !== e2.filmGauge && (o2.filmGauge = e2.filmGauge), void 0 !== e2.filmOffset && (o2.filmOffset = e2.filmOffset), void 0 !== e2.view && (o2.view = Object.assign({}, e2.view));
              break;
            case "OrthographicCamera":
              o2 = new E(e2.left, e2.right, e2.top, e2.bottom, e2.near, e2.far), void 0 !== e2.zoom && (o2.zoom = e2.zoom), void 0 !== e2.view && (o2.view = Object.assign({}, e2.view));
              break;
            case "AmbientLight":
              o2 = new tn(e2.color, e2.intensity);
              break;
            case "DirectionalLight":
              o2 = new en(e2.color, e2.intensity);
              break;
            case "PointLight":
              o2 = new Qi(e2.color, e2.intensity, e2.distance, e2.decay);
              break;
            case "RectAreaLight":
              o2 = new rn(e2.color, e2.intensity, e2.width, e2.height);
              break;
            case "SpotLight":
              o2 = new Ki(e2.color, e2.intensity, e2.distance, e2.angle, e2.penumbra, e2.decay);
              break;
            case "HemisphereLight":
              o2 = new Yi(e2.color, e2.groundColor, e2.intensity);
              break;
            case "SkinnedMesh":
              console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");
            case "Mesh":
              var a2 = i2(e2.geometry), s2 = n2(e2.material);
              o2 = a2.bones && a2.bones.length > 0 ? new It(a2, s2) : new J(a2, s2);
              break;
            case "LOD":
              o2 = new Pt();
              break;
            case "Line":
              o2 = new Nt(i2(e2.geometry), n2(e2.material), e2.mode);
              break;
            case "LineLoop":
              o2 = new zt(i2(e2.geometry), n2(e2.material));
              break;
            case "LineSegments":
              o2 = new Ft(i2(e2.geometry), n2(e2.material));
              break;
            case "PointCloud":
            case "Points":
              o2 = new Gt(i2(e2.geometry), n2(e2.material));
              break;
            case "Sprite":
              o2 = new Rt(n2(e2.material));
              break;
            case "Group":
              o2 = new Ht();
              break;
            default:
              o2 = new w();
          }
          if (o2.uuid = e2.uuid, void 0 !== e2.name && (o2.name = e2.name), void 0 !== e2.matrix ? (o2.matrix.fromArray(e2.matrix), void 0 !== e2.matrixAutoUpdate && (o2.matrixAutoUpdate = e2.matrixAutoUpdate), o2.matrixAutoUpdate && o2.matrix.decompose(o2.position, o2.quaternion, o2.scale)) : (void 0 !== e2.position && o2.position.fromArray(e2.position), void 0 !== e2.rotation && o2.rotation.fromArray(e2.rotation), void 0 !== e2.quaternion && o2.quaternion.fromArray(e2.quaternion), void 0 !== e2.scale && o2.scale.fromArray(e2.scale)), void 0 !== e2.castShadow && (o2.castShadow = e2.castShadow), void 0 !== e2.receiveShadow && (o2.receiveShadow = e2.receiveShadow), e2.shadow && (void 0 !== e2.shadow.bias && (o2.shadow.bias = e2.shadow.bias), void 0 !== e2.shadow.radius && (o2.shadow.radius = e2.shadow.radius), void 0 !== e2.shadow.mapSize && o2.shadow.mapSize.fromArray(e2.shadow.mapSize), void 0 !== e2.shadow.camera && (o2.shadow.camera = this.parseObject(e2.shadow.camera))), void 0 !== e2.visible && (o2.visible = e2.visible), void 0 !== e2.frustumCulled && (o2.frustumCulled = e2.frustumCulled), void 0 !== e2.renderOrder && (o2.renderOrder = e2.renderOrder), void 0 !== e2.userData && (o2.userData = e2.userData), void 0 !== e2.children)
            for (var c2 = e2.children, l2 = 0; l2 < c2.length; l2++)
              o2.add(this.parseObject(c2[l2], t2, r2));
          if ("LOD" === e2.type)
            for (var u2 = e2.levels, h2 = 0; h2 < u2.length; h2++) {
              var d2 = u2[h2], p2 = o2.getObjectByProperty("uuid", d2.object);
              void 0 !== p2 && o2.addLevel(p2, d2.distance);
            }
          return o2;
        } });
        var _c = { UVMapping: 300, CubeReflectionMapping: _a, CubeRefractionMapping: ba, EquirectangularReflectionMapping: wa, EquirectangularRefractionMapping: Ma, SphericalReflectionMapping: Ea, CubeUVReflectionMapping: Sa, CubeUVRefractionMapping: Ta }, bc = { RepeatWrapping: Aa, ClampToEdgeWrapping: La, MirroredRepeatWrapping: Ca }, wc = { NearestFilter: Ra, NearestMipMapNearestFilter: Pa, NearestMipMapLinearFilter: Da, LinearFilter: Ua, LinearMipMapNearestFilter: Ia, LinearMipMapLinearFilter: Oa };
        wn.prototype = { constructor: wn, setOptions: function(e2) {
          return this.options = e2, this;
        }, load: function(e2, t2, r2, i2) {
          void 0 === e2 && (e2 = ""), void 0 !== this.path && (e2 = this.path + e2);
          var n2 = this, o2 = lc.get(e2);
          if (void 0 !== o2)
            return n2.manager.itemStart(e2), setTimeout(function() {
              t2 && t2(o2), n2.manager.itemEnd(e2);
            }, 0), o2;
          fetch(e2).then(function(e3) {
            return e3.blob();
          }).then(function(e3) {
            return createImageBitmap(e3, n2.options);
          }).then(function(r3) {
            lc.add(e2, r3), t2 && t2(r3), n2.manager.itemEnd(e2);
          }).catch(function(t3) {
            i2 && i2(t3), n2.manager.itemEnd(e2), n2.manager.itemError(e2);
          });
        }, setCrossOrigin: function() {
          return this;
        }, setPath: function(e2) {
          return this.path = e2, this;
        } }, Object.assign(Mn.prototype, { moveTo: function(e2, t2) {
          this.currentPath = new Wi(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e2, t2);
        }, lineTo: function(e2, t2) {
          this.currentPath.lineTo(e2, t2);
        }, quadraticCurveTo: function(e2, t2, r2, i2) {
          this.currentPath.quadraticCurveTo(e2, t2, r2, i2);
        }, bezierCurveTo: function(e2, t2, r2, i2, n2, o2) {
          this.currentPath.bezierCurveTo(e2, t2, r2, i2, n2, o2);
        }, splineThru: function(e2) {
          this.currentPath.splineThru(e2);
        }, toShapes: function(e2, t2) {
          function r2(e3) {
            for (var t3 = [], r3 = 0, i3 = e3.length; r3 < i3; r3++) {
              var n3 = e3[r3], o3 = new Xi();
              o3.curves = n3.curves, t3.push(o3);
            }
            return t3;
          }
          var i2 = oc.isClockWise, n2 = this.subPaths;
          if (0 === n2.length)
            return [];
          if (true === t2)
            return r2(n2);
          var o2, a2, s2, c2 = [];
          if (1 === n2.length)
            return a2 = n2[0], s2 = new Xi(), s2.curves = a2.curves, c2.push(s2), c2;
          var l2 = !i2(n2[0].getPoints());
          l2 = e2 ? !l2 : l2;
          var u2, h2 = [], d2 = [], p2 = [], f2 = 0;
          d2[f2] = void 0, p2[f2] = [];
          for (var m2 = 0, v2 = n2.length; m2 < v2; m2++)
            a2 = n2[m2], u2 = a2.getPoints(), o2 = i2(u2), o2 = e2 ? !o2 : o2, o2 ? (!l2 && d2[f2] && f2++, d2[f2] = { s: new Xi(), p: u2 }, d2[f2].s.curves = a2.curves, l2 && f2++, p2[f2] = []) : p2[f2].push({ h: a2, p: u2[0] });
          if (!d2[0])
            return r2(n2);
          if (d2.length > 1) {
            for (var g2 = false, y2 = [], x2 = 0, _2 = d2.length; x2 < _2; x2++)
              h2[x2] = [];
            for (var x2 = 0, _2 = d2.length; x2 < _2; x2++)
              for (var b2 = p2[x2], w2 = 0; w2 < b2.length; w2++) {
                for (var M2 = b2[w2], E2 = true, S2 = 0; S2 < d2.length; S2++)
                  (function(e3, t3) {
                    for (var r3 = t3.length, i3 = false, n3 = r3 - 1, o3 = 0; o3 < r3; n3 = o3++) {
                      var a3 = t3[n3], s3 = t3[o3], c3 = s3.x - a3.x, l3 = s3.y - a3.y;
                      if (Math.abs(l3) > Number.EPSILON) {
                        if (l3 < 0 && (a3 = t3[o3], c3 = -c3, s3 = t3[n3], l3 = -l3), e3.y < a3.y || e3.y > s3.y)
                          continue;
                        if (e3.y === a3.y) {
                          if (e3.x === a3.x)
                            return true;
                        } else {
                          var u3 = l3 * (e3.x - a3.x) - c3 * (e3.y - a3.y);
                          if (0 === u3)
                            return true;
                          if (u3 < 0)
                            continue;
                          i3 = !i3;
                        }
                      } else {
                        if (e3.y !== a3.y)
                          continue;
                        if (s3.x <= e3.x && e3.x <= a3.x || a3.x <= e3.x && e3.x <= s3.x)
                          return true;
                      }
                    }
                    return i3;
                  })(M2.p, d2[S2].p) && (x2 !== S2 && y2.push({ froms: x2, tos: S2, hole: w2 }), E2 ? (E2 = false, h2[S2].push(M2)) : g2 = true);
                E2 && h2[x2].push(M2);
              }
            y2.length > 0 && (g2 || (p2 = h2));
          }
          for (var T2, m2 = 0, A2 = d2.length; m2 < A2; m2++) {
            s2 = d2[m2].s, c2.push(s2), T2 = p2[m2];
            for (var L2 = 0, C2 = T2.length; L2 < C2; L2++)
              s2.holes.push(T2[L2].h);
          }
          return c2;
        } }), Object.assign(En.prototype, { isFont: true, generateShapes: function(e2, t2, r2) {
          void 0 === t2 && (t2 = 100), void 0 === r2 && (r2 = 4);
          for (var i2 = [], n2 = Sn(e2, t2, r2, this.data), o2 = 0, a2 = n2.length; o2 < a2; o2++)
            Array.prototype.push.apply(i2, n2[o2].toShapes());
          return i2;
        } }), Object.assign(An.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = this, o2 = new vi(this.manager);
          o2.setPath(this.path), o2.load(e2, function(e3) {
            var r3;
            try {
              r3 = JSON.parse(e3);
            } catch (t3) {
              console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."), r3 = JSON.parse(e3.substring(65, e3.length - 2));
            }
            var i3 = n2.parse(r3);
            t2 && t2(i3);
          }, r2, i2);
        }, parse: function(e2) {
          return new En(e2);
        }, setPath: function(e2) {
          return this.path = e2, this;
        } });
        var Mc, Ec = { getContext: function() {
          return void 0 === Mc && (Mc = new (window.AudioContext || window.webkitAudioContext)()), Mc;
        }, setContext: function(e2) {
          Mc = e2;
        } };
        Object.assign(Ln.prototype, { load: function(e2, t2, r2, i2) {
          var n2 = new vi(this.manager);
          n2.setResponseType("arraybuffer"), n2.load(e2, function(e3) {
            Ec.getContext().decodeAudioData(e3, function(e4) {
              t2(e4);
            });
          }, r2, i2);
        } }), Object.assign(Cn.prototype, { update: function() {
          var e2, t2, r2, i2, n2, a2, s2, c2, l2 = new o(), u2 = new o();
          return function(o2) {
            if (e2 !== this || t2 !== o2.focus || r2 !== o2.fov || i2 !== o2.aspect * this.aspect || n2 !== o2.near || a2 !== o2.far || s2 !== o2.zoom || c2 !== this.eyeSep) {
              e2 = this, t2 = o2.focus, r2 = o2.fov, i2 = o2.aspect * this.aspect, n2 = o2.near, a2 = o2.far, s2 = o2.zoom;
              var h2 = o2.projectionMatrix.clone();
              c2 = this.eyeSep / 2;
              var d2, p2, f2 = c2 * n2 / t2, m2 = n2 * Math.tan(zs.DEG2RAD * r2 * 0.5) / s2;
              u2.elements[12] = -c2, l2.elements[12] = c2, d2 = -m2 * i2 + f2, p2 = m2 * i2 + f2, h2.elements[0] = 2 * n2 / (p2 - d2), h2.elements[8] = (p2 + d2) / (p2 - d2), this.cameraL.projectionMatrix.copy(h2), d2 = -m2 * i2 - f2, p2 = m2 * i2 - f2, h2.elements[0] = 2 * n2 / (p2 - d2), h2.elements[8] = (p2 + d2) / (p2 - d2), this.cameraR.projectionMatrix.copy(h2);
            }
            this.cameraL.matrixWorld.copy(o2.matrixWorld).multiply(u2), this.cameraR.matrixWorld.copy(o2.matrixWorld).multiply(l2);
          };
        }() }), Rn.prototype = Object.create(w.prototype), Rn.prototype.constructor = Rn, Pn.prototype = Object.assign(Object.create(w.prototype), { constructor: Pn, getInput: function() {
          return this.gain;
        }, removeFilter: function() {
          null !== this.filter && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null);
        }, getFilter: function() {
          return this.filter;
        }, setFilter: function(e2) {
          null !== this.filter ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e2, this.gain.connect(this.filter), this.filter.connect(this.context.destination);
        }, getMasterVolume: function() {
          return this.gain.gain.value;
        }, setMasterVolume: function(e2) {
          this.gain.gain.setTargetAtTime(e2, this.context.currentTime, 0.01);
        }, updateMatrixWorld: function() {
          var e2 = new s(), t2 = new a(), r2 = new s(), i2 = new s();
          return function(n2) {
            w.prototype.updateMatrixWorld.call(this, n2);
            var o2 = this.context.listener, a2 = this.up;
            this.matrixWorld.decompose(e2, t2, r2), i2.set(0, 0, -1).applyQuaternion(t2), o2.positionX ? (o2.positionX.setValueAtTime(e2.x, this.context.currentTime), o2.positionY.setValueAtTime(e2.y, this.context.currentTime), o2.positionZ.setValueAtTime(e2.z, this.context.currentTime), o2.forwardX.setValueAtTime(i2.x, this.context.currentTime), o2.forwardY.setValueAtTime(i2.y, this.context.currentTime), o2.forwardZ.setValueAtTime(i2.z, this.context.currentTime), o2.upX.setValueAtTime(a2.x, this.context.currentTime), o2.upY.setValueAtTime(a2.y, this.context.currentTime), o2.upZ.setValueAtTime(a2.z, this.context.currentTime)) : (o2.setPosition(e2.x, e2.y, e2.z), o2.setOrientation(i2.x, i2.y, i2.z, a2.x, a2.y, a2.z));
          };
        }() }), Dn.prototype = Object.assign(Object.create(w.prototype), { constructor: Dn, getOutput: function() {
          return this.gain;
        }, setNodeSource: function(e2) {
          return this.hasPlaybackControl = false, this.sourceType = "audioNode", this.source = e2, this.connect(), this;
        }, setBuffer: function(e2) {
          return this.buffer = e2, this.sourceType = "buffer", this.autoplay && this.play(), this;
        }, play: function() {
          if (true === this.isPlaying)
            return void console.warn("THREE.Audio: Audio is already playing.");
          if (false === this.hasPlaybackControl)
            return void console.warn("THREE.Audio: this Audio has no playback control.");
          var e2 = this.context.createBufferSource();
          return e2.buffer = this.buffer, e2.loop = this.loop, e2.onended = this.onEnded.bind(this), e2.playbackRate.setValueAtTime(this.playbackRate, this.startTime), this.startTime = this.context.currentTime, e2.start(this.startTime, this.offset), this.isPlaying = true, this.source = e2, this.connect();
        }, pause: function() {
          return false === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (true === this.isPlaying && (this.source.stop(), this.offset += (this.context.currentTime - this.startTime) * this.playbackRate, this.isPlaying = false), this);
        }, stop: function() {
          return false === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.source.stop(), this.offset = 0, this.isPlaying = false, this);
        }, connect: function() {
          if (this.filters.length > 0) {
            this.source.connect(this.filters[0]);
            for (var e2 = 1, t2 = this.filters.length; e2 < t2; e2++)
              this.filters[e2 - 1].connect(this.filters[e2]);
            this.filters[this.filters.length - 1].connect(this.getOutput());
          } else
            this.source.connect(this.getOutput());
          return this;
        }, disconnect: function() {
          if (this.filters.length > 0) {
            this.source.disconnect(this.filters[0]);
            for (var e2 = 1, t2 = this.filters.length; e2 < t2; e2++)
              this.filters[e2 - 1].disconnect(this.filters[e2]);
            this.filters[this.filters.length - 1].disconnect(this.getOutput());
          } else
            this.source.disconnect(this.getOutput());
          return this;
        }, getFilters: function() {
          return this.filters;
        }, setFilters: function(e2) {
          return e2 || (e2 = []), true === this.isPlaying ? (this.disconnect(), this.filters = e2, this.connect()) : this.filters = e2, this;
        }, getFilter: function() {
          return this.getFilters()[0];
        }, setFilter: function(e2) {
          return this.setFilters(e2 ? [e2] : []);
        }, setPlaybackRate: function(e2) {
          return false === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.playbackRate = e2, true === this.isPlaying && this.source.playbackRate.setValueAtTime(this.playbackRate, this.context.currentTime), this);
        }, getPlaybackRate: function() {
          return this.playbackRate;
        }, onEnded: function() {
          this.isPlaying = false;
        }, getLoop: function() {
          return false === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."), false) : this.loop;
        }, setLoop: function(e2) {
          return false === this.hasPlaybackControl ? void console.warn("THREE.Audio: this Audio has no playback control.") : (this.loop = e2, true === this.isPlaying && (this.source.loop = this.loop), this);
        }, getVolume: function() {
          return this.gain.gain.value;
        }, setVolume: function(e2) {
          return this.gain.gain.setTargetAtTime(e2, this.context.currentTime, 0.01), this;
        } }), Un.prototype = Object.assign(Object.create(Dn.prototype), { constructor: Un, getOutput: function() {
          return this.panner;
        }, getRefDistance: function() {
          return this.panner.refDistance;
        }, setRefDistance: function(e2) {
          this.panner.refDistance = e2;
        }, getRolloffFactor: function() {
          return this.panner.rolloffFactor;
        }, setRolloffFactor: function(e2) {
          this.panner.rolloffFactor = e2;
        }, getDistanceModel: function() {
          return this.panner.distanceModel;
        }, setDistanceModel: function(e2) {
          this.panner.distanceModel = e2;
        }, getMaxDistance: function() {
          return this.panner.maxDistance;
        }, setMaxDistance: function(e2) {
          this.panner.maxDistance = e2;
        }, updateMatrixWorld: function() {
          var e2 = new s();
          return function(t2) {
            w.prototype.updateMatrixWorld.call(this, t2), e2.setFromMatrixPosition(this.matrixWorld), this.panner.setPosition(e2.x, e2.y, e2.z);
          };
        }() }), Object.assign(In.prototype, { getFrequencyData: function() {
          return this.analyser.getByteFrequencyData(this.data), this.data;
        }, getAverageFrequency: function() {
          for (var e2 = 0, t2 = this.getFrequencyData(), r2 = 0; r2 < t2.length; r2++)
            e2 += t2[r2];
          return e2 / t2.length;
        } }), Object.assign(On.prototype, { accumulate: function(e2, t2) {
          var r2 = this.buffer, i2 = this.valueSize, n2 = e2 * i2 + i2, o2 = this.cumulativeWeight;
          if (0 === o2) {
            for (var a2 = 0; a2 !== i2; ++a2)
              r2[n2 + a2] = r2[a2];
            o2 = t2;
          } else {
            o2 += t2;
            var s2 = t2 / o2;
            this._mixBufferRegion(r2, n2, 0, s2, i2);
          }
          this.cumulativeWeight = o2;
        }, apply: function(e2) {
          var t2 = this.valueSize, r2 = this.buffer, i2 = e2 * t2 + t2, n2 = this.cumulativeWeight, o2 = this.binding;
          if (this.cumulativeWeight = 0, n2 < 1) {
            var a2 = 3 * t2;
            this._mixBufferRegion(r2, i2, a2, 1 - n2, t2);
          }
          for (var s2 = t2, c2 = t2 + t2; s2 !== c2; ++s2)
            if (r2[s2] !== r2[s2 + t2]) {
              o2.setValue(r2, i2);
              break;
            }
        }, saveOriginalState: function() {
          var e2 = this.binding, t2 = this.buffer, r2 = this.valueSize, i2 = 3 * r2;
          e2.getValue(t2, i2);
          for (var n2 = r2, o2 = i2; n2 !== o2; ++n2)
            t2[n2] = t2[i2 + n2 % r2];
          this.cumulativeWeight = 0;
        }, restoreOriginalState: function() {
          var e2 = 3 * this.valueSize;
          this.binding.setValue(this.buffer, e2);
        }, _select: function(e2, t2, r2, i2, n2) {
          if (i2 >= 0.5)
            for (var o2 = 0; o2 !== n2; ++o2)
              e2[t2 + o2] = e2[r2 + o2];
        }, _slerp: function(e2, t2, r2, i2) {
          a.slerpFlat(e2, t2, e2, t2, e2, r2, i2);
        }, _lerp: function(e2, t2, r2, i2, n2) {
          for (var o2 = 1 - i2, a2 = 0; a2 !== n2; ++a2) {
            var s2 = t2 + a2;
            e2[s2] = e2[s2] * o2 + e2[r2 + a2] * i2;
          }
        } });
        var Sc = "\\[\\]\\.:\\/";
        Object.assign(Nn.prototype, { getValue: function(e2, t2) {
          this.bind();
          var r2 = this._targetGroup.nCachedObjects_, i2 = this._bindings[r2];
          void 0 !== i2 && i2.getValue(e2, t2);
        }, setValue: function(e2, t2) {
          for (var r2 = this._bindings, i2 = this._targetGroup.nCachedObjects_, n2 = r2.length; i2 !== n2; ++i2)
            r2[i2].setValue(e2, t2);
        }, bind: function() {
          for (var e2 = this._bindings, t2 = this._targetGroup.nCachedObjects_, r2 = e2.length; t2 !== r2; ++t2)
            e2[t2].bind();
        }, unbind: function() {
          for (var e2 = this._bindings, t2 = this._targetGroup.nCachedObjects_, r2 = e2.length; t2 !== r2; ++t2)
            e2[t2].unbind();
        } }), Object.assign(Fn, { Composite: Nn, create: function(e2, t2, r2) {
          return e2 && e2.isAnimationObjectGroup ? new Fn.Composite(e2, t2, r2) : new Fn(e2, t2, r2);
        }, sanitizeNodeName: function() {
          var e2 = new RegExp("[" + Sc + "]", "g");
          return function(t2) {
            return t2.replace(/\s/g, "_").replace(e2, "");
          };
        }(), parseTrackName: function() {
          var e2 = "[^" + Sc + "]", t2 = "[^" + Sc.replace("\\.", "") + "]", r2 = /((?:WC+[\/:])*)/.source.replace("WC", e2), i2 = /(WCOD+)?/.source.replace("WCOD", t2), n2 = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", e2), o2 = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", e2), a2 = new RegExp("^" + r2 + i2 + n2 + o2 + "$"), s2 = ["material", "materials", "bones"];
          return function(e3) {
            var t3 = a2.exec(e3);
            if (!t3)
              throw new Error("PropertyBinding: Cannot parse trackName: " + e3);
            var r3 = { nodeName: t3[2], objectName: t3[3], objectIndex: t3[4], propertyName: t3[5], propertyIndex: t3[6] }, i3 = r3.nodeName && r3.nodeName.lastIndexOf(".");
            if (void 0 !== i3 && -1 !== i3) {
              var n3 = r3.nodeName.substring(i3 + 1);
              -1 !== s2.indexOf(n3) && (r3.nodeName = r3.nodeName.substring(0, i3), r3.objectName = n3);
            }
            if (null === r3.propertyName || 0 === r3.propertyName.length)
              throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e3);
            return r3;
          };
        }(), findNode: function(e2, t2) {
          if (!t2 || "" === t2 || "root" === t2 || "." === t2 || -1 === t2 || t2 === e2.name || t2 === e2.uuid)
            return e2;
          if (e2.skeleton) {
            var r2 = e2.skeleton.getBoneByName(t2);
            if (void 0 !== r2)
              return r2;
          }
          if (e2.children) {
            var i2 = function(e3) {
              for (var r3 = 0; r3 < e3.length; r3++) {
                var n3 = e3[r3];
                if (n3.name === t2 || n3.uuid === t2)
                  return n3;
                var o2 = i2(n3.children);
                if (o2)
                  return o2;
              }
              return null;
            }, n2 = i2(e2.children);
            if (n2)
              return n2;
          }
          return null;
        } }), Object.assign(Fn.prototype, { _getValue_unavailable: function() {
        }, _setValue_unavailable: function() {
        }, BindingType: { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }, Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }, GetterByBindingType: [function(e2, t2) {
          e2[t2] = this.node[this.propertyName];
        }, function(e2, t2) {
          for (var r2 = this.resolvedProperty, i2 = 0, n2 = r2.length; i2 !== n2; ++i2)
            e2[t2++] = r2[i2];
        }, function(e2, t2) {
          e2[t2] = this.resolvedProperty[this.propertyIndex];
        }, function(e2, t2) {
          this.resolvedProperty.toArray(e2, t2);
        }], SetterByBindingTypeAndVersioning: [[function(e2, t2) {
          this.targetObject[this.propertyName] = e2[t2];
        }, function(e2, t2) {
          this.targetObject[this.propertyName] = e2[t2], this.targetObject.needsUpdate = true;
        }, function(e2, t2) {
          this.targetObject[this.propertyName] = e2[t2], this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(e2, t2) {
          for (var r2 = this.resolvedProperty, i2 = 0, n2 = r2.length; i2 !== n2; ++i2)
            r2[i2] = e2[t2++];
        }, function(e2, t2) {
          for (var r2 = this.resolvedProperty, i2 = 0, n2 = r2.length; i2 !== n2; ++i2)
            r2[i2] = e2[t2++];
          this.targetObject.needsUpdate = true;
        }, function(e2, t2) {
          for (var r2 = this.resolvedProperty, i2 = 0, n2 = r2.length; i2 !== n2; ++i2)
            r2[i2] = e2[t2++];
          this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(e2, t2) {
          this.resolvedProperty[this.propertyIndex] = e2[t2];
        }, function(e2, t2) {
          this.resolvedProperty[this.propertyIndex] = e2[t2], this.targetObject.needsUpdate = true;
        }, function(e2, t2) {
          this.resolvedProperty[this.propertyIndex] = e2[t2], this.targetObject.matrixWorldNeedsUpdate = true;
        }], [function(e2, t2) {
          this.resolvedProperty.fromArray(e2, t2);
        }, function(e2, t2) {
          this.resolvedProperty.fromArray(e2, t2), this.targetObject.needsUpdate = true;
        }, function(e2, t2) {
          this.resolvedProperty.fromArray(e2, t2), this.targetObject.matrixWorldNeedsUpdate = true;
        }]], getValue: function(e2, t2) {
          this.bind(), this.getValue(e2, t2);
        }, setValue: function(e2, t2) {
          this.bind(), this.setValue(e2, t2);
        }, bind: function() {
          var e2 = this.node, t2 = this.parsedPath, r2 = t2.objectName, i2 = t2.propertyName, n2 = t2.propertyIndex;
          if (e2 || (e2 = Fn.findNode(this.rootNode, t2.nodeName) || this.rootNode, this.node = e2), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e2)
            return void console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
          if (r2) {
            var o2 = t2.objectIndex;
            switch (r2) {
              case "materials":
                if (!e2.material)
                  return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                if (!e2.material.materials)
                  return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                e2 = e2.material.materials;
                break;
              case "bones":
                if (!e2.skeleton)
                  return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                e2 = e2.skeleton.bones;
                for (var a2 = 0; a2 < e2.length; a2++)
                  if (e2[a2].name === o2) {
                    o2 = a2;
                    break;
                  }
                break;
              default:
                if (void 0 === e2[r2])
                  return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                e2 = e2[r2];
            }
            if (void 0 !== o2) {
              if (void 0 === e2[o2])
                return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e2);
              e2 = e2[o2];
            }
          }
          var s2 = e2[i2];
          if (void 0 === s2) {
            var c2 = t2.nodeName;
            return void console.error("THREE.PropertyBinding: Trying to update property for track: " + c2 + "." + i2 + " but it wasn't found.", e2);
          }
          var l2 = this.Versioning.None;
          void 0 !== e2.needsUpdate ? (l2 = this.Versioning.NeedsUpdate, this.targetObject = e2) : void 0 !== e2.matrixWorldNeedsUpdate && (l2 = this.Versioning.MatrixWorldNeedsUpdate, this.targetObject = e2);
          var u2 = this.BindingType.Direct;
          if (void 0 !== n2) {
            if ("morphTargetInfluences" === i2) {
              if (!e2.geometry)
                return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
              if (e2.geometry.isBufferGeometry) {
                if (!e2.geometry.morphAttributes)
                  return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                for (var a2 = 0; a2 < this.node.geometry.morphAttributes.position.length; a2++)
                  if (e2.geometry.morphAttributes.position[a2].name === n2) {
                    n2 = a2;
                    break;
                  }
              } else {
                if (!e2.geometry.morphTargets)
                  return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.", this);
                for (var a2 = 0; a2 < this.node.geometry.morphTargets.length; a2++)
                  if (e2.geometry.morphTargets[a2].name === n2) {
                    n2 = a2;
                    break;
                  }
              }
            }
            u2 = this.BindingType.ArrayElement, this.resolvedProperty = s2, this.propertyIndex = n2;
          } else
            void 0 !== s2.fromArray && void 0 !== s2.toArray ? (u2 = this.BindingType.HasFromToArray, this.resolvedProperty = s2) : Array.isArray(s2) ? (u2 = this.BindingType.EntireArray, this.resolvedProperty = s2) : this.propertyName = i2;
          this.getValue = this.GetterByBindingType[u2], this.setValue = this.SetterByBindingTypeAndVersioning[u2][l2];
        }, unbind: function() {
          this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
        } }), //!\ DECLARE ALIAS AFTER assign prototype !
        Object.assign(Fn.prototype, { _getValue_unbound: Fn.prototype.getValue, _setValue_unbound: Fn.prototype.setValue }), Object.assign(zn.prototype, { isAnimationObjectGroup: true, add: function() {
          for (var e2 = this._objects, t2 = e2.length, r2 = this.nCachedObjects_, i2 = this._indicesByUUID, n2 = this._paths, o2 = this._parsedPaths, a2 = this._bindings, s2 = a2.length, c2 = void 0, l2 = 0, u2 = arguments.length; l2 !== u2; ++l2) {
            var h2 = arguments[l2], d2 = h2.uuid, p2 = i2[d2];
            if (void 0 === p2) {
              p2 = t2++, i2[d2] = p2, e2.push(h2);
              for (var f2 = 0, m2 = s2; f2 !== m2; ++f2)
                a2[f2].push(new Fn(h2, n2[f2], o2[f2]));
            } else if (p2 < r2) {
              c2 = e2[p2];
              var v2 = --r2, g2 = e2[v2];
              i2[g2.uuid] = p2, e2[p2] = g2, i2[d2] = v2, e2[v2] = h2;
              for (var f2 = 0, m2 = s2; f2 !== m2; ++f2) {
                var y2 = a2[f2], x2 = y2[v2], _2 = y2[p2];
                y2[p2] = x2, void 0 === _2 && (_2 = new Fn(h2, n2[f2], o2[f2])), y2[v2] = _2;
              }
            } else
              e2[p2] !== c2 && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
          }
          this.nCachedObjects_ = r2;
        }, remove: function() {
          for (var e2 = this._objects, t2 = this.nCachedObjects_, r2 = this._indicesByUUID, i2 = this._bindings, n2 = i2.length, o2 = 0, a2 = arguments.length; o2 !== a2; ++o2) {
            var s2 = arguments[o2], c2 = s2.uuid, l2 = r2[c2];
            if (void 0 !== l2 && l2 >= t2) {
              var u2 = t2++, h2 = e2[u2];
              r2[h2.uuid] = l2, e2[l2] = h2, r2[c2] = u2, e2[u2] = s2;
              for (var d2 = 0, p2 = n2; d2 !== p2; ++d2) {
                var f2 = i2[d2], m2 = f2[u2], v2 = f2[l2];
                f2[l2] = m2, f2[u2] = v2;
              }
            }
          }
          this.nCachedObjects_ = t2;
        }, uncache: function() {
          for (var e2 = this._objects, t2 = e2.length, r2 = this.nCachedObjects_, i2 = this._indicesByUUID, n2 = this._bindings, o2 = n2.length, a2 = 0, s2 = arguments.length; a2 !== s2; ++a2) {
            var c2 = arguments[a2], l2 = c2.uuid, u2 = i2[l2];
            if (void 0 !== u2)
              if (delete i2[l2], u2 < r2) {
                var h2 = --r2, d2 = e2[h2], p2 = --t2, f2 = e2[p2];
                i2[d2.uuid] = u2, e2[u2] = d2, i2[f2.uuid] = h2, e2[h2] = f2, e2.pop();
                for (var m2 = 0, v2 = o2; m2 !== v2; ++m2) {
                  var g2 = n2[m2], y2 = g2[h2], x2 = g2[p2];
                  g2[u2] = y2, g2[h2] = x2, g2.pop();
                }
              } else {
                var p2 = --t2, f2 = e2[p2];
                i2[f2.uuid] = u2, e2[u2] = f2, e2.pop();
                for (var m2 = 0, v2 = o2; m2 !== v2; ++m2) {
                  var g2 = n2[m2];
                  g2[u2] = g2[p2], g2.pop();
                }
              }
          }
          this.nCachedObjects_ = r2;
        }, subscribe_: function(e2, t2) {
          var r2 = this._bindingsIndicesByPath, i2 = r2[e2], n2 = this._bindings;
          if (void 0 !== i2)
            return n2[i2];
          var o2 = this._paths, a2 = this._parsedPaths, s2 = this._objects, c2 = s2.length, l2 = this.nCachedObjects_, u2 = new Array(c2);
          i2 = n2.length, r2[e2] = i2, o2.push(e2), a2.push(t2), n2.push(u2);
          for (var h2 = l2, d2 = s2.length; h2 !== d2; ++h2) {
            var p2 = s2[h2];
            u2[h2] = new Fn(p2, e2, t2);
          }
          return u2;
        }, unsubscribe_: function(e2) {
          var t2 = this._bindingsIndicesByPath, r2 = t2[e2];
          if (void 0 !== r2) {
            var i2 = this._paths, n2 = this._parsedPaths, o2 = this._bindings, a2 = o2.length - 1, s2 = o2[a2];
            t2[e2[a2]] = r2, o2[r2] = s2, o2.pop(), n2[r2] = n2[a2], n2.pop(), i2[r2] = i2[a2], i2.pop();
          }
        } }), Object.assign(Bn.prototype, { play: function() {
          return this._mixer._activateAction(this), this;
        }, stop: function() {
          return this._mixer._deactivateAction(this), this.reset();
        }, reset: function() {
          return this.paused = false, this.enabled = true, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
        }, isRunning: function() {
          return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this);
        }, isScheduled: function() {
          return this._mixer._isActiveAction(this);
        }, startAt: function(e2) {
          return this._startTime = e2, this;
        }, setLoop: function(e2, t2) {
          return this.loop = e2, this.repetitions = t2, this;
        }, setEffectiveWeight: function(e2) {
          return this.weight = e2, this._effectiveWeight = this.enabled ? e2 : 0, this.stopFading();
        }, getEffectiveWeight: function() {
          return this._effectiveWeight;
        }, fadeIn: function(e2) {
          return this._scheduleFading(e2, 0, 1);
        }, fadeOut: function(e2) {
          return this._scheduleFading(e2, 1, 0);
        }, crossFadeFrom: function(e2, t2, r2) {
          if (e2.fadeOut(t2), this.fadeIn(t2), r2) {
            var i2 = this._clip.duration, n2 = e2._clip.duration, o2 = n2 / i2, a2 = i2 / n2;
            e2.warp(1, o2, t2), this.warp(a2, 1, t2);
          }
          return this;
        }, crossFadeTo: function(e2, t2, r2) {
          return e2.crossFadeFrom(this, t2, r2);
        }, stopFading: function() {
          var e2 = this._weightInterpolant;
          return null !== e2 && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e2)), this;
        }, setEffectiveTimeScale: function(e2) {
          return this.timeScale = e2, this._effectiveTimeScale = this.paused ? 0 : e2, this.stopWarping();
        }, getEffectiveTimeScale: function() {
          return this._effectiveTimeScale;
        }, setDuration: function(e2) {
          return this.timeScale = this._clip.duration / e2, this.stopWarping();
        }, syncWith: function(e2) {
          return this.time = e2.time, this.timeScale = e2.timeScale, this.stopWarping();
        }, halt: function(e2) {
          return this.warp(this._effectiveTimeScale, 0, e2);
        }, warp: function(e2, t2, r2) {
          var i2 = this._mixer, n2 = i2.time, o2 = this._timeScaleInterpolant, a2 = this.timeScale;
          null === o2 && (o2 = i2._lendControlInterpolant(), this._timeScaleInterpolant = o2);
          var s2 = o2.parameterPositions, c2 = o2.sampleValues;
          return s2[0] = n2, s2[1] = n2 + r2, c2[0] = e2 / a2, c2[1] = t2 / a2, this;
        }, stopWarping: function() {
          var e2 = this._timeScaleInterpolant;
          return null !== e2 && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e2)), this;
        }, getMixer: function() {
          return this._mixer;
        }, getClip: function() {
          return this._clip;
        }, getRoot: function() {
          return this._localRoot || this._mixer._root;
        }, _update: function(e2, t2, r2, i2) {
          if (!this.enabled)
            return void this._updateWeight(e2);
          var n2 = this._startTime;
          if (null !== n2) {
            var o2 = (e2 - n2) * r2;
            if (o2 < 0 || 0 === r2)
              return;
            this._startTime = null, t2 = r2 * o2;
          }
          t2 *= this._updateTimeScale(e2);
          var a2 = this._updateTime(t2), s2 = this._updateWeight(e2);
          if (s2 > 0)
            for (var c2 = this._interpolants, l2 = this._propertyBindings, u2 = 0, h2 = c2.length; u2 !== h2; ++u2)
              c2[u2].evaluate(a2), l2[u2].accumulate(i2, s2);
        }, _updateWeight: function(e2) {
          var t2 = 0;
          if (this.enabled) {
            t2 = this.weight;
            var r2 = this._weightInterpolant;
            if (null !== r2) {
              var i2 = r2.evaluate(e2)[0];
              t2 *= i2, e2 > r2.parameterPositions[1] && (this.stopFading(), 0 === i2 && (this.enabled = false));
            }
          }
          return this._effectiveWeight = t2, t2;
        }, _updateTimeScale: function(e2) {
          var t2 = 0;
          if (!this.paused) {
            t2 = this.timeScale;
            var r2 = this._timeScaleInterpolant;
            if (null !== r2) {
              t2 *= r2.evaluate(e2)[0], e2 > r2.parameterPositions[1] && (this.stopWarping(), 0 === t2 ? this.paused = true : this.timeScale = t2);
            }
          }
          return this._effectiveTimeScale = t2, t2;
        }, _updateTime: function(e2) {
          var t2 = this.time + e2;
          if (0 === e2)
            return t2;
          var r2 = this._clip.duration, i2 = this.loop, n2 = this._loopCount;
          if (2200 === i2) {
            -1 === n2 && (this._loopCount = 0, this._setEndings(true, true, false));
            e: {
              if (t2 >= r2)
                t2 = r2;
              else {
                if (!(t2 < 0))
                  break e;
                t2 = 0;
              }
              this.clampWhenFinished ? this.paused = true : this.enabled = false, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e2 < 0 ? -1 : 1 });
            }
          } else {
            var o2 = 2202 === i2;
            if (-1 === n2 && (e2 >= 0 ? (n2 = 0, this._setEndings(true, 0 === this.repetitions, o2)) : this._setEndings(0 === this.repetitions, true, o2)), t2 >= r2 || t2 < 0) {
              var a2 = Math.floor(t2 / r2);
              t2 -= r2 * a2, n2 += Math.abs(a2);
              var s2 = this.repetitions - n2;
              if (s2 <= 0)
                this.clampWhenFinished ? this.paused = true : this.enabled = false, t2 = e2 > 0 ? r2 : 0, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e2 > 0 ? 1 : -1 });
              else {
                if (1 === s2) {
                  var c2 = e2 < 0;
                  this._setEndings(c2, !c2, o2);
                } else
                  this._setEndings(false, false, o2);
                this._loopCount = n2, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: a2 });
              }
            }
            if (o2 && 1 == (1 & n2))
              return this.time = t2, r2 - t2;
          }
          return this.time = t2, t2;
        }, _setEndings: function(e2, t2, r2) {
          var i2 = this._interpolantSettings;
          r2 ? (i2.endingStart = 2401, i2.endingEnd = 2401) : (i2.endingStart = e2 ? this.zeroSlopeAtStart ? 2401 : Ss : 2402, i2.endingEnd = t2 ? this.zeroSlopeAtEnd ? 2401 : Ss : 2402);
        }, _scheduleFading: function(e2, t2, r2) {
          var i2 = this._mixer, n2 = i2.time, o2 = this._weightInterpolant;
          null === o2 && (o2 = i2._lendControlInterpolant(), this._weightInterpolant = o2);
          var a2 = o2.parameterPositions, s2 = o2.sampleValues;
          return a2[0] = n2, s2[0] = t2, a2[1] = n2 + e2, s2[1] = r2, this;
        } }), Gn.prototype = Object.assign(Object.create(i.prototype), { constructor: Gn, _bindAction: function(e2, t2) {
          var r2 = e2._localRoot || this._root, i2 = e2._clip.tracks, n2 = i2.length, o2 = e2._propertyBindings, a2 = e2._interpolants, s2 = r2.uuid, c2 = this._bindingsByRootAndName, l2 = c2[s2];
          void 0 === l2 && (l2 = {}, c2[s2] = l2);
          for (var u2 = 0; u2 !== n2; ++u2) {
            var h2 = i2[u2], d2 = h2.name, p2 = l2[d2];
            if (void 0 !== p2)
              o2[u2] = p2;
            else {
              if (void 0 !== (p2 = o2[u2])) {
                null === p2._cacheIndex && (++p2.referenceCount, this._addInactiveBinding(p2, s2, d2));
                continue;
              }
              var f2 = t2 && t2._propertyBindings[u2].binding.parsedPath;
              p2 = new On(Fn.create(r2, d2, f2), h2.ValueTypeName, h2.getValueSize()), ++p2.referenceCount, this._addInactiveBinding(p2, s2, d2), o2[u2] = p2;
            }
            a2[u2].resultBuffer = p2.buffer;
          }
        }, _activateAction: function(e2) {
          if (!this._isActiveAction(e2)) {
            if (null === e2._cacheIndex) {
              var t2 = (e2._localRoot || this._root).uuid, r2 = e2._clip.uuid, i2 = this._actionsByClip[r2];
              this._bindAction(e2, i2 && i2.knownActions[0]), this._addInactiveAction(e2, r2, t2);
            }
            for (var n2 = e2._propertyBindings, o2 = 0, a2 = n2.length; o2 !== a2; ++o2) {
              var s2 = n2[o2];
              0 == s2.useCount++ && (this._lendBinding(s2), s2.saveOriginalState());
            }
            this._lendAction(e2);
          }
        }, _deactivateAction: function(e2) {
          if (this._isActiveAction(e2)) {
            for (var t2 = e2._propertyBindings, r2 = 0, i2 = t2.length; r2 !== i2; ++r2) {
              var n2 = t2[r2];
              0 == --n2.useCount && (n2.restoreOriginalState(), this._takeBackBinding(n2));
            }
            this._takeBackAction(e2);
          }
        }, _initMemoryManager: function() {
          this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
          var e2 = this;
          this.stats = { actions: { get total() {
            return e2._actions.length;
          }, get inUse() {
            return e2._nActiveActions;
          } }, bindings: { get total() {
            return e2._bindings.length;
          }, get inUse() {
            return e2._nActiveBindings;
          } }, controlInterpolants: { get total() {
            return e2._controlInterpolants.length;
          }, get inUse() {
            return e2._nActiveControlInterpolants;
          } } };
        }, _isActiveAction: function(e2) {
          var t2 = e2._cacheIndex;
          return null !== t2 && t2 < this._nActiveActions;
        }, _addInactiveAction: function(e2, t2, r2) {
          var i2 = this._actions, n2 = this._actionsByClip, o2 = n2[t2];
          if (void 0 === o2)
            o2 = { knownActions: [e2], actionByRoot: {} }, e2._byClipCacheIndex = 0, n2[t2] = o2;
          else {
            var a2 = o2.knownActions;
            e2._byClipCacheIndex = a2.length, a2.push(e2);
          }
          e2._cacheIndex = i2.length, i2.push(e2), o2.actionByRoot[r2] = e2;
        }, _removeInactiveAction: function(e2) {
          var t2 = this._actions, r2 = t2[t2.length - 1], i2 = e2._cacheIndex;
          r2._cacheIndex = i2, t2[i2] = r2, t2.pop(), e2._cacheIndex = null;
          var n2 = e2._clip.uuid, o2 = this._actionsByClip, a2 = o2[n2], s2 = a2.knownActions, c2 = s2[s2.length - 1], l2 = e2._byClipCacheIndex;
          c2._byClipCacheIndex = l2, s2[l2] = c2, s2.pop(), e2._byClipCacheIndex = null, delete a2.actionByRoot[(e2._localRoot || this._root).uuid], 0 === s2.length && delete o2[n2], this._removeInactiveBindingsForAction(e2);
        }, _removeInactiveBindingsForAction: function(e2) {
          for (var t2 = e2._propertyBindings, r2 = 0, i2 = t2.length; r2 !== i2; ++r2) {
            var n2 = t2[r2];
            0 == --n2.referenceCount && this._removeInactiveBinding(n2);
          }
        }, _lendAction: function(e2) {
          var t2 = this._actions, r2 = e2._cacheIndex, i2 = this._nActiveActions++, n2 = t2[i2];
          e2._cacheIndex = i2, t2[i2] = e2, n2._cacheIndex = r2, t2[r2] = n2;
        }, _takeBackAction: function(e2) {
          var t2 = this._actions, r2 = e2._cacheIndex, i2 = --this._nActiveActions, n2 = t2[i2];
          e2._cacheIndex = i2, t2[i2] = e2, n2._cacheIndex = r2, t2[r2] = n2;
        }, _addInactiveBinding: function(e2, t2, r2) {
          var i2 = this._bindingsByRootAndName, n2 = i2[t2], o2 = this._bindings;
          void 0 === n2 && (n2 = {}, i2[t2] = n2), n2[r2] = e2, e2._cacheIndex = o2.length, o2.push(e2);
        }, _removeInactiveBinding: function(e2) {
          var t2 = this._bindings, r2 = e2.binding, i2 = r2.rootNode.uuid, n2 = r2.path, o2 = this._bindingsByRootAndName, a2 = o2[i2], s2 = t2[t2.length - 1], c2 = e2._cacheIndex;
          s2._cacheIndex = c2, t2[c2] = s2, t2.pop(), delete a2[n2];
          e: {
            for (var l2 in a2)
              break e;
            delete o2[i2];
          }
        }, _lendBinding: function(e2) {
          var t2 = this._bindings, r2 = e2._cacheIndex, i2 = this._nActiveBindings++, n2 = t2[i2];
          e2._cacheIndex = i2, t2[i2] = e2, n2._cacheIndex = r2, t2[r2] = n2;
        }, _takeBackBinding: function(e2) {
          var t2 = this._bindings, r2 = e2._cacheIndex, i2 = --this._nActiveBindings, n2 = t2[i2];
          e2._cacheIndex = i2, t2[i2] = e2, n2._cacheIndex = r2, t2[r2] = n2;
        }, _lendControlInterpolant: function() {
          var e2 = this._controlInterpolants, t2 = this._nActiveControlInterpolants++, r2 = e2[t2];
          return void 0 === r2 && (r2 = new dn(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), r2.__cacheIndex = t2, e2[t2] = r2), r2;
        }, _takeBackControlInterpolant: function(e2) {
          var t2 = this._controlInterpolants, r2 = e2.__cacheIndex, i2 = --this._nActiveControlInterpolants, n2 = t2[i2];
          e2.__cacheIndex = i2, t2[i2] = e2, n2.__cacheIndex = r2, t2[r2] = n2;
        }, _controlInterpolantsResultBuffer: new Float32Array(1), clipAction: function(e2, t2) {
          var r2 = t2 || this._root, i2 = r2.uuid, n2 = "string" == typeof e2 ? vn.findByName(r2, e2) : e2, o2 = null !== n2 ? n2.uuid : e2, a2 = this._actionsByClip[o2], s2 = null;
          if (void 0 !== a2) {
            var c2 = a2.actionByRoot[i2];
            if (void 0 !== c2)
              return c2;
            s2 = a2.knownActions[0], null === n2 && (n2 = s2._clip);
          }
          if (null === n2)
            return null;
          var l2 = new Bn(this, n2, t2);
          return this._bindAction(l2, s2), this._addInactiveAction(l2, o2, i2), l2;
        }, existingAction: function(e2, t2) {
          var r2 = t2 || this._root, i2 = r2.uuid, n2 = "string" == typeof e2 ? vn.findByName(r2, e2) : e2, o2 = n2 ? n2.uuid : e2, a2 = this._actionsByClip[o2];
          return void 0 !== a2 ? a2.actionByRoot[i2] || null : null;
        }, stopAllAction: function() {
          var e2 = this._actions, t2 = this._nActiveActions, r2 = this._bindings, i2 = this._nActiveBindings;
          this._nActiveActions = 0, this._nActiveBindings = 0;
          for (var n2 = 0; n2 !== t2; ++n2)
            e2[n2].reset();
          for (var n2 = 0; n2 !== i2; ++n2)
            r2[n2].useCount = 0;
          return this;
        }, update: function(e2) {
          e2 *= this.timeScale;
          for (var t2 = this._actions, r2 = this._nActiveActions, i2 = this.time += e2, n2 = Math.sign(e2), o2 = this._accuIndex ^= 1, a2 = 0; a2 !== r2; ++a2) {
            t2[a2]._update(i2, e2, n2, o2);
          }
          for (var s2 = this._bindings, c2 = this._nActiveBindings, a2 = 0; a2 !== c2; ++a2)
            s2[a2].apply(o2);
          return this;
        }, getRoot: function() {
          return this._root;
        }, uncacheClip: function(e2) {
          var t2 = this._actions, r2 = e2.uuid, i2 = this._actionsByClip, n2 = i2[r2];
          if (void 0 !== n2) {
            for (var o2 = n2.knownActions, a2 = 0, s2 = o2.length; a2 !== s2; ++a2) {
              var c2 = o2[a2];
              this._deactivateAction(c2);
              var l2 = c2._cacheIndex, u2 = t2[t2.length - 1];
              c2._cacheIndex = null, c2._byClipCacheIndex = null, u2._cacheIndex = l2, t2[l2] = u2, t2.pop(), this._removeInactiveBindingsForAction(c2);
            }
            delete i2[r2];
          }
        }, uncacheRoot: function(e2) {
          var t2 = e2.uuid, r2 = this._actionsByClip;
          for (var i2 in r2) {
            var n2 = r2[i2].actionByRoot, o2 = n2[t2];
            void 0 !== o2 && (this._deactivateAction(o2), this._removeInactiveAction(o2));
          }
          var a2 = this._bindingsByRootAndName, s2 = a2[t2];
          if (void 0 !== s2)
            for (var c2 in s2) {
              var l2 = s2[c2];
              l2.restoreOriginalState(), this._removeInactiveBinding(l2);
            }
        }, uncacheAction: function(e2, t2) {
          var r2 = this.existingAction(e2, t2);
          null !== r2 && (this._deactivateAction(r2), this._removeInactiveAction(r2));
        } }), Hn.prototype.clone = function() {
          return new Hn(void 0 === this.value.clone ? this.value : this.value.clone());
        }, jn.prototype = Object.assign(Object.create(B.prototype), { constructor: jn, isInstancedBufferGeometry: true, copy: function(e2) {
          return B.prototype.copy.call(this, e2), this.maxInstancedCount = e2.maxInstancedCount, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        } }), Object.defineProperties(Vn.prototype, { count: { get: function() {
          return this.data.count;
        } }, array: { get: function() {
          return this.data.array;
        } } }), Object.assign(Vn.prototype, { isInterleavedBufferAttribute: true, setX: function(e2, t2) {
          return this.data.array[e2 * this.data.stride + this.offset] = t2, this;
        }, setY: function(e2, t2) {
          return this.data.array[e2 * this.data.stride + this.offset + 1] = t2, this;
        }, setZ: function(e2, t2) {
          return this.data.array[e2 * this.data.stride + this.offset + 2] = t2, this;
        }, setW: function(e2, t2) {
          return this.data.array[e2 * this.data.stride + this.offset + 3] = t2, this;
        }, getX: function(e2) {
          return this.data.array[e2 * this.data.stride + this.offset];
        }, getY: function(e2) {
          return this.data.array[e2 * this.data.stride + this.offset + 1];
        }, getZ: function(e2) {
          return this.data.array[e2 * this.data.stride + this.offset + 2];
        }, getW: function(e2) {
          return this.data.array[e2 * this.data.stride + this.offset + 3];
        }, setXY: function(e2, t2, r2) {
          return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = r2, this;
        }, setXYZ: function(e2, t2, r2, i2) {
          return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = r2, this.data.array[e2 + 2] = i2, this;
        }, setXYZW: function(e2, t2, r2, i2, n2) {
          return e2 = e2 * this.data.stride + this.offset, this.data.array[e2 + 0] = t2, this.data.array[e2 + 1] = r2, this.data.array[e2 + 2] = i2, this.data.array[e2 + 3] = n2, this;
        } }), Object.defineProperty(kn.prototype, "needsUpdate", { set: function(e2) {
          true === e2 && this.version++;
        } }), Object.assign(kn.prototype, { isInterleavedBuffer: true, onUploadCallback: function() {
        }, setArray: function(e2) {
          if (Array.isArray(e2))
            throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
          return this.count = void 0 !== e2 ? e2.length / this.stride : 0, this.array = e2, this;
        }, setDynamic: function(e2) {
          return this.dynamic = e2, this;
        }, copy: function(e2) {
          return this.array = new e2.array.constructor(e2.array), this.count = e2.count, this.stride = e2.stride, this.dynamic = e2.dynamic, this;
        }, copyAt: function(e2, t2, r2) {
          e2 *= this.stride, r2 *= t2.stride;
          for (var i2 = 0, n2 = this.stride; i2 < n2; i2++)
            this.array[e2 + i2] = t2.array[r2 + i2];
          return this;
        }, set: function(e2, t2) {
          return void 0 === t2 && (t2 = 0), this.array.set(e2, t2), this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, onUpload: function(e2) {
          return this.onUploadCallback = e2, this;
        } }), Wn.prototype = Object.assign(Object.create(kn.prototype), { constructor: Wn, isInstancedInterleavedBuffer: true, copy: function(e2) {
          return kn.prototype.copy.call(this, e2), this.meshPerAttribute = e2.meshPerAttribute, this;
        } }), Xn.prototype = Object.assign(Object.create(A.prototype), { constructor: Xn, isInstancedBufferAttribute: true, copy: function(e2) {
          return A.prototype.copy.call(this, e2), this.meshPerAttribute = e2.meshPerAttribute, this;
        } }), Object.assign(qn.prototype, { linePrecision: 1, set: function(e2, t2) {
          this.ray.set(e2, t2);
        }, setFromCamera: function(e2, t2) {
          t2 && t2.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t2.matrixWorld), this.ray.direction.set(e2.x, e2.y, 0.5).unproject(t2).sub(this.ray.origin).normalize()) : t2 && t2.isOrthographicCamera ? (this.ray.origin.set(e2.x, e2.y, (t2.near + t2.far) / (t2.near - t2.far)).unproject(t2), this.ray.direction.set(0, 0, -1).transformDirection(t2.matrixWorld)) : console.error("THREE.Raycaster: Unsupported camera type.");
        }, intersectObject: function(e2, t2, r2) {
          var i2 = r2 || [];
          return Zn(e2, this, i2, t2), i2.sort(Yn), i2;
        }, intersectObjects: function(e2, t2, r2) {
          var i2 = r2 || [];
          if (false === Array.isArray(e2))
            return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."), i2;
          for (var n2 = 0, o2 = e2.length; n2 < o2; n2++)
            Zn(e2[n2], this, i2, t2);
          return i2.sort(Yn), i2;
        } }), Object.assign(Jn.prototype, { start: function() {
          this.startTime = ("undefined" == typeof performance ? Date : performance).now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = true;
        }, stop: function() {
          this.getElapsedTime(), this.running = false, this.autoStart = false;
        }, getElapsedTime: function() {
          return this.getDelta(), this.elapsedTime;
        }, getDelta: function() {
          var e2 = 0;
          if (this.autoStart && !this.running)
            return this.start(), 0;
          if (this.running) {
            var t2 = ("undefined" == typeof performance ? Date : performance).now();
            e2 = (t2 - this.oldTime) / 1e3, this.oldTime = t2, this.elapsedTime += e2;
          }
          return e2;
        } }), Object.assign(Kn.prototype, { set: function(e2, t2, r2) {
          return this.radius = e2, this.phi = t2, this.theta = r2, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.radius = e2.radius, this.phi = e2.phi, this.theta = e2.theta, this;
        }, makeSafe: function() {
          return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
        }, setFromVector3: function(e2) {
          return this.radius = e2.length(), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e2.x, e2.z), this.phi = Math.acos(zs.clamp(e2.y / this.radius, -1, 1))), this;
        } }), Object.assign(Qn.prototype, { set: function(e2, t2, r2) {
          return this.radius = e2, this.theta = t2, this.y = r2, this;
        }, clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.radius = e2.radius, this.theta = e2.theta, this.y = e2.y, this;
        }, setFromVector3: function(e2) {
          return this.radius = Math.sqrt(e2.x * e2.x + e2.z * e2.z), this.theta = Math.atan2(e2.x, e2.z), this.y = e2.y, this;
        } }), Object.assign($n.prototype, { set: function(e2, t2) {
          return this.min.copy(e2), this.max.copy(t2), this;
        }, setFromPoints: function(e2) {
          this.makeEmpty();
          for (var t2 = 0, r2 = e2.length; t2 < r2; t2++)
            this.expandByPoint(e2[t2]);
          return this;
        }, setFromCenterAndSize: function() {
          var e2 = new n();
          return function(t2, r2) {
            var i2 = e2.copy(r2).multiplyScalar(0.5);
            return this.min.copy(t2).sub(i2), this.max.copy(t2).add(i2), this;
          };
        }(), clone: function() {
          return new this.constructor().copy(this);
        }, copy: function(e2) {
          return this.min.copy(e2.min), this.max.copy(e2.max), this;
        }, makeEmpty: function() {
          return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
        }, isEmpty: function() {
          return this.max.x < this.min.x || this.max.y < this.min.y;
        }, getCenter: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Box2: .getCenter() target is now required"), e2 = new n()), this.isEmpty() ? e2.set(0, 0) : e2.addVectors(this.min, this.max).multiplyScalar(0.5);
        }, getSize: function(e2) {
          return void 0 === e2 && (console.warn("THREE.Box2: .getSize() target is now required"), e2 = new n()), this.isEmpty() ? e2.set(0, 0) : e2.subVectors(this.max, this.min);
        }, expandByPoint: function(e2) {
          return this.min.min(e2), this.max.max(e2), this;
        }, expandByVector: function(e2) {
          return this.min.sub(e2), this.max.add(e2), this;
        }, expandByScalar: function(e2) {
          return this.min.addScalar(-e2), this.max.addScalar(e2), this;
        }, containsPoint: function(e2) {
          return !(e2.x < this.min.x || e2.x > this.max.x || e2.y < this.min.y || e2.y > this.max.y);
        }, containsBox: function(e2) {
          return this.min.x <= e2.min.x && e2.max.x <= this.max.x && this.min.y <= e2.min.y && e2.max.y <= this.max.y;
        }, getParameter: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Box2: .getParameter() target is now required"), t2 = new n()), t2.set((e2.x - this.min.x) / (this.max.x - this.min.x), (e2.y - this.min.y) / (this.max.y - this.min.y));
        }, intersectsBox: function(e2) {
          return !(e2.max.x < this.min.x || e2.min.x > this.max.x || e2.max.y < this.min.y || e2.min.y > this.max.y);
        }, clampPoint: function(e2, t2) {
          return void 0 === t2 && (console.warn("THREE.Box2: .clampPoint() target is now required"), t2 = new n()), t2.copy(e2).clamp(this.min, this.max);
        }, distanceToPoint: function() {
          var e2 = new n();
          return function(t2) {
            return e2.copy(t2).clamp(this.min, this.max).sub(t2).length();
          };
        }(), intersect: function(e2) {
          return this.min.max(e2.min), this.max.min(e2.max), this;
        }, union: function(e2) {
          return this.min.min(e2.min), this.max.max(e2.max), this;
        }, translate: function(e2) {
          return this.min.add(e2), this.max.add(e2), this;
        }, equals: function(e2) {
          return e2.min.equals(this.min) && e2.max.equals(this.max);
        } }), eo.prototype = Object.create(w.prototype), eo.prototype.constructor = eo, eo.prototype.isImmediateRenderObject = true, to.prototype = Object.create(Ft.prototype), to.prototype.constructor = to, to.prototype.update = function() {
          var e2 = new s(), t2 = new s(), r2 = new c();
          return function() {
            var i2 = ["a", "b", "c"];
            this.object.updateMatrixWorld(true), r2.getNormalMatrix(this.object.matrixWorld);
            var n2 = this.object.matrixWorld, o2 = this.geometry.attributes.position, a2 = this.object.geometry;
            if (a2 && a2.isGeometry)
              for (var s2 = a2.vertices, c2 = a2.faces, l2 = 0, u2 = 0, h2 = c2.length; u2 < h2; u2++)
                for (var d2 = c2[u2], p2 = 0, f2 = d2.vertexNormals.length; p2 < f2; p2++) {
                  var m2 = s2[d2[i2[p2]]], v2 = d2.vertexNormals[p2];
                  e2.copy(m2).applyMatrix4(n2), t2.copy(v2).applyMatrix3(r2).normalize().multiplyScalar(this.size).add(e2), o2.setXYZ(l2, e2.x, e2.y, e2.z), l2 += 1, o2.setXYZ(l2, t2.x, t2.y, t2.z), l2 += 1;
                }
            else if (a2 && a2.isBufferGeometry)
              for (var g2 = a2.attributes.position, y2 = a2.attributes.normal, l2 = 0, p2 = 0, f2 = g2.count; p2 < f2; p2++)
                e2.set(g2.getX(p2), g2.getY(p2), g2.getZ(p2)).applyMatrix4(n2), t2.set(y2.getX(p2), y2.getY(p2), y2.getZ(p2)), t2.applyMatrix3(r2).normalize().multiplyScalar(this.size).add(e2), o2.setXYZ(l2, e2.x, e2.y, e2.z), l2 += 1, o2.setXYZ(l2, t2.x, t2.y, t2.z), l2 += 1;
            o2.needsUpdate = true;
          };
        }(), ro.prototype = Object.create(w.prototype), ro.prototype.constructor = ro, ro.prototype.dispose = function() {
          this.cone.geometry.dispose(), this.cone.material.dispose();
        }, ro.prototype.update = function() {
          var e2 = new s(), t2 = new s();
          return function() {
            this.light.updateMatrixWorld();
            var r2 = this.light.distance ? this.light.distance : 1e3, i2 = r2 * Math.tan(this.light.angle);
            this.cone.scale.set(i2, i2, r2), e2.setFromMatrixPosition(this.light.matrixWorld), t2.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(t2.sub(e2)), void 0 !== this.color ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
          };
        }(), no.prototype = Object.create(Ft.prototype), no.prototype.constructor = no, no.prototype.updateMatrixWorld = function() {
          var e2 = new s(), t2 = new o(), r2 = new o();
          return function(i2) {
            var n2 = this.bones, o2 = this.geometry, a2 = o2.getAttribute("position");
            r2.getInverse(this.root.matrixWorld);
            for (var s2 = 0, c2 = 0; s2 < n2.length; s2++) {
              var l2 = n2[s2];
              l2.parent && l2.parent.isBone && (t2.multiplyMatrices(r2, l2.matrixWorld), e2.setFromMatrixPosition(t2), a2.setXYZ(c2, e2.x, e2.y, e2.z), t2.multiplyMatrices(r2, l2.parent.matrixWorld), e2.setFromMatrixPosition(t2), a2.setXYZ(c2 + 1, e2.x, e2.y, e2.z), c2 += 2);
            }
            o2.getAttribute("position").needsUpdate = true, w.prototype.updateMatrixWorld.call(this, i2);
          };
        }(), oo.prototype = Object.create(J.prototype), oo.prototype.constructor = oo, oo.prototype.dispose = function() {
          this.geometry.dispose(), this.material.dispose();
        }, oo.prototype.update = function() {
          void 0 !== this.color ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
        }, ao.prototype = Object.create(w.prototype), ao.prototype.constructor = ao, ao.prototype.dispose = function() {
          this.children[0].geometry.dispose(), this.children[0].material.dispose();
        }, ao.prototype.update = function() {
          var e2 = 0.5 * this.light.width, t2 = 0.5 * this.light.height, r2 = this.line.geometry.attributes.position, i2 = r2.array;
          i2[0] = e2, i2[1] = -t2, i2[2] = 0, i2[3] = e2, i2[4] = t2, i2[5] = 0, i2[6] = -e2, i2[7] = t2, i2[8] = 0, i2[9] = -e2, i2[10] = -t2, i2[11] = 0, i2[12] = e2, i2[13] = -t2, i2[14] = 0, r2.needsUpdate = true, void 0 !== this.color ? this.line.material.color.set(this.color) : this.line.material.color.copy(this.light.color);
        }, so.prototype = Object.create(w.prototype), so.prototype.constructor = so, so.prototype.dispose = function() {
          this.children[0].geometry.dispose(), this.children[0].material.dispose();
        }, so.prototype.update = function() {
          var e2 = new s(), t2 = new y(), r2 = new y();
          return function() {
            var i2 = this.children[0];
            if (void 0 !== this.color)
              this.material.color.set(this.color);
            else {
              var n2 = i2.geometry.getAttribute("color");
              t2.copy(this.light.color), r2.copy(this.light.groundColor);
              for (var o2 = 0, a2 = n2.count; o2 < a2; o2++) {
                var s2 = o2 < a2 / 2 ? t2 : r2;
                n2.setXYZ(o2, s2.r, s2.g, s2.b);
              }
              n2.needsUpdate = true;
            }
            i2.lookAt(e2.setFromMatrixPosition(this.light.matrixWorld).negate());
          };
        }(), co.prototype = Object.create(Ft.prototype), co.prototype.constructor = co, lo.prototype = Object.create(Ft.prototype), lo.prototype.constructor = lo, uo.prototype = Object.create(Ft.prototype), uo.prototype.constructor = uo, uo.prototype.update = function() {
          var e2 = new s(), t2 = new s(), r2 = new c();
          return function() {
            this.object.updateMatrixWorld(true), r2.getNormalMatrix(this.object.matrixWorld);
            for (var i2 = this.object.matrixWorld, n2 = this.geometry.attributes.position, o2 = this.object.geometry, a2 = o2.vertices, s2 = o2.faces, c2 = 0, l2 = 0, u2 = s2.length; l2 < u2; l2++) {
              var h2 = s2[l2], d2 = h2.normal;
              e2.copy(a2[h2.a]).add(a2[h2.b]).add(a2[h2.c]).divideScalar(3).applyMatrix4(i2), t2.copy(d2).applyMatrix3(r2).normalize().multiplyScalar(this.size).add(e2), n2.setXYZ(c2, e2.x, e2.y, e2.z), c2 += 1, n2.setXYZ(c2, t2.x, t2.y, t2.z), c2 += 1;
            }
            n2.needsUpdate = true;
          };
        }(), ho.prototype = Object.create(w.prototype), ho.prototype.constructor = ho, ho.prototype.dispose = function() {
          this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
        }, ho.prototype.update = function() {
          var e2 = new s(), t2 = new s(), r2 = new s();
          return function() {
            e2.setFromMatrixPosition(this.light.matrixWorld), t2.setFromMatrixPosition(this.light.target.matrixWorld), r2.subVectors(t2, e2), this.lightPlane.lookAt(r2), void 0 !== this.color ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(r2), this.targetLine.scale.z = r2.length();
          };
        }(), po.prototype = Object.create(Ft.prototype), po.prototype.constructor = po, po.prototype.update = function() {
          function e2(e3, o2, a2, s2) {
            i2.set(o2, a2, s2).unproject(n2);
            var c2 = r2[e3];
            if (void 0 !== c2)
              for (var l2 = t2.getAttribute("position"), u2 = 0, h2 = c2.length; u2 < h2; u2++)
                l2.setXYZ(c2[u2], i2.x, i2.y, i2.z);
          }
          var t2, r2, i2 = new s(), n2 = new M();
          return function() {
            t2 = this.geometry, r2 = this.pointMap;
            n2.projectionMatrix.copy(this.camera.projectionMatrix), e2("c", 0, 0, -1), e2("t", 0, 0, 1), e2("n1", -1, -1, -1), e2("n2", 1, -1, -1), e2("n3", -1, 1, -1), e2("n4", 1, 1, -1), e2("f1", -1, -1, 1), e2("f2", 1, -1, 1), e2("f3", -1, 1, 1), e2("f4", 1, 1, 1), e2("u1", 0.7, 1.1, -1), e2("u2", -0.7, 1.1, -1), e2("u3", 0, 2, -1), e2("cf1", -1, 0, 1), e2("cf2", 1, 0, 1), e2("cf3", 0, -1, 1), e2("cf4", 0, 1, 1), e2("cn1", -1, 0, -1), e2("cn2", 1, 0, -1), e2("cn3", 0, -1, -1), e2("cn4", 0, 1, -1), t2.getAttribute("position").needsUpdate = true;
          };
        }(), fo.prototype = Object.create(Ft.prototype), fo.prototype.constructor = fo, fo.prototype.update = function() {
          var e2 = new f();
          return function(t2) {
            if (void 0 !== t2 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), void 0 !== this.object && e2.setFromObject(this.object), !e2.isEmpty()) {
              var r2 = e2.min, i2 = e2.max, n2 = this.geometry.attributes.position, o2 = n2.array;
              o2[0] = i2.x, o2[1] = i2.y, o2[2] = i2.z, o2[3] = r2.x, o2[4] = i2.y, o2[5] = i2.z, o2[6] = r2.x, o2[7] = r2.y, o2[8] = i2.z, o2[9] = i2.x, o2[10] = r2.y, o2[11] = i2.z, o2[12] = i2.x, o2[13] = i2.y, o2[14] = r2.z, o2[15] = r2.x, o2[16] = i2.y, o2[17] = r2.z, o2[18] = r2.x, o2[19] = r2.y, o2[20] = r2.z, o2[21] = i2.x, o2[22] = r2.y, o2[23] = r2.z, n2.needsUpdate = true, this.geometry.computeBoundingSphere();
            }
          };
        }(), fo.prototype.setFromObject = function(e2) {
          return this.object = e2, this.update(), this;
        }, mo.prototype = Object.create(Ft.prototype), mo.prototype.constructor = mo, mo.prototype.updateMatrixWorld = function(e2) {
          var t2 = this.box;
          t2.isEmpty() || (t2.getCenter(this.position), t2.getSize(this.scale), this.scale.multiplyScalar(0.5), w.prototype.updateMatrixWorld.call(this, e2));
        }, vo.prototype = Object.create(Nt.prototype), vo.prototype.constructor = vo, vo.prototype.updateMatrixWorld = function(e2) {
          var t2 = -this.plane.constant;
          Math.abs(t2) < 1e-8 && (t2 = 1e-8), this.scale.set(0.5 * this.size, 0.5 * this.size, t2), this.lookAt(this.plane.normal), w.prototype.updateMatrixWorld.call(this, e2);
        };
        var Tc, Ac;
        go.prototype = Object.create(w.prototype), go.prototype.constructor = go, go.prototype.setDirection = function() {
          var e2, t2 = new s();
          return function(r2) {
            r2.y > 0.99999 ? this.quaternion.set(0, 0, 0, 1) : r2.y < -0.99999 ? this.quaternion.set(1, 0, 0, 0) : (t2.set(r2.z, 0, -r2.x).normalize(), e2 = Math.acos(r2.y), this.quaternion.setFromAxisAngle(t2, e2));
          };
        }(), go.prototype.setLength = function(e2, t2, r2) {
          void 0 === t2 && (t2 = 0.2 * e2), void 0 === r2 && (r2 = 0.2 * t2), this.line.scale.set(1, Math.max(0, e2 - t2), 1), this.line.updateMatrix(), this.cone.scale.set(r2, t2, r2), this.cone.position.y = e2, this.cone.updateMatrix();
        }, go.prototype.setColor = function(e2) {
          this.line.material.color.copy(e2), this.cone.material.color.copy(e2);
        }, yo.prototype = Object.create(Ft.prototype), yo.prototype.constructor = yo;
        wi.create = function(e2, t2) {
          return console.log("THREE.Curve.create() has been deprecated"), e2.prototype = Object.create(wi.prototype), e2.prototype.constructor = e2, e2.prototype.getPoint = t2, e2;
        }, Object.assign(ki.prototype, { createPointsGeometry: function(e2) {
          console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          var t2 = this.getPoints(e2);
          return this.createGeometry(t2);
        }, createSpacedPointsGeometry: function(e2) {
          console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          var t2 = this.getSpacedPoints(e2);
          return this.createGeometry(t2);
        }, createGeometry: function(e2) {
          console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
          for (var t2 = new T(), r2 = 0, i2 = e2.length; r2 < i2; r2++) {
            var n2 = e2[r2];
            t2.vertices.push(new s(n2.x, n2.y, n2.z || 0));
          }
          return t2;
        } }), Object.assign(Wi.prototype, { fromPoints: function(e2) {
          console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(e2);
        } }), xo.prototype = Object.create(Ti.prototype), _o.prototype = Object.create(Ti.prototype), bo.prototype = Object.create(Ti.prototype), Object.assign(bo.prototype, { initFromArray: function() {
          console.error("THREE.Spline: .initFromArray() has been removed.");
        }, getControlPointsArray: function() {
          console.error("THREE.Spline: .getControlPointsArray() has been removed.");
        }, reparametrizeByArcLength: function() {
          console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.");
        } }), co.prototype.setColors = function() {
          console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.");
        }, no.prototype.update = function() {
          console.error("THREE.SkeletonHelper: update() no longer needs to be called.");
        }, Object.assign(xn.prototype, { extractUrlBase: function(e2) {
          return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), xc.extractUrlBase(e2);
        } }), Object.assign($n.prototype, { center: function(e2) {
          return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(e2);
        }, empty: function() {
          return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty();
        }, isIntersectionBox: function(e2) {
          return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
        }, size: function(e2) {
          return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(e2);
        } }), Object.assign(f.prototype, { center: function(e2) {
          return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(e2);
        }, empty: function() {
          return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty();
        }, isIntersectionBox: function(e2) {
          return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
        }, isIntersectionSphere: function(e2) {
          return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e2);
        }, size: function(e2) {
          return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(e2);
        } }), Y.prototype.center = function(e2) {
          return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(e2);
        }, Object.assign(zs, { random16: function() {
          return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."), Math.random();
        }, nearestPowerOfTwo: function(e2) {
          return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."), zs.floorPowerOfTwo(e2);
        }, nextPowerOfTwo: function(e2) {
          return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."), zs.ceilPowerOfTwo(e2);
        } }), Object.assign(c.prototype, { flattenToArrayOffset: function(e2, t2) {
          return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e2, t2);
        }, multiplyVector3: function(e2) {
          return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), e2.applyMatrix3(this);
        }, multiplyVector3Array: function() {
          console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.");
        }, applyToBuffer: function(e2) {
          return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(e2);
        }, applyToVector3Array: function() {
          console.error("THREE.Matrix3: .applyToVector3Array() has been removed.");
        } }), Object.assign(o.prototype, { extractPosition: function(e2) {
          return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(e2);
        }, flattenToArrayOffset: function(e2, t2) {
          return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(e2, t2);
        }, getPosition: function() {
          var e2;
          return function() {
            return void 0 === e2 && (e2 = new s()), console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), e2.setFromMatrixColumn(this, 3);
          };
        }(), setRotationFromQuaternion: function(e2) {
          return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(e2);
        }, multiplyToArray: function() {
          console.warn("THREE.Matrix4: .multiplyToArray() has been removed.");
        }, multiplyVector3: function(e2) {
          return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
        }, multiplyVector4: function(e2) {
          return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
        }, multiplyVector3Array: function() {
          console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.");
        }, rotateAxis: function(e2) {
          console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), e2.transformDirection(this);
        }, crossVector: function(e2) {
          return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), e2.applyMatrix4(this);
        }, translate: function() {
          console.error("THREE.Matrix4: .translate() has been removed.");
        }, rotateX: function() {
          console.error("THREE.Matrix4: .rotateX() has been removed.");
        }, rotateY: function() {
          console.error("THREE.Matrix4: .rotateY() has been removed.");
        }, rotateZ: function() {
          console.error("THREE.Matrix4: .rotateZ() has been removed.");
        }, rotateByAxis: function() {
          console.error("THREE.Matrix4: .rotateByAxis() has been removed.");
        }, applyToBuffer: function(e2) {
          return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."), this.applyToBufferAttribute(e2);
        }, applyToVector3Array: function() {
          console.error("THREE.Matrix4: .applyToVector3Array() has been removed.");
        }, makeFrustum: function(e2, t2, r2, i2, n2, o2) {
          return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(e2, t2, i2, r2, n2, o2);
        } }), v.prototype.isIntersectionLine = function(e2) {
          return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(e2);
        }, a.prototype.multiplyVector3 = function(e2) {
          return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), e2.applyQuaternion(this);
        }, Object.assign(q.prototype, { isIntersectionBox: function(e2) {
          return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(e2);
        }, isIntersectionPlane: function(e2) {
          return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(e2);
        }, isIntersectionSphere: function(e2) {
          return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(e2);
        } }), Object.assign(Z.prototype, { area: function() {
          return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea();
        }, barycoordFromPoint: function(e2, t2) {
          return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(e2, t2);
        }, midpoint: function(e2) {
          return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(e2);
        }, normal: function(e2) {
          return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(e2);
        }, plane: function(e2) {
          return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(e2);
        } }), Object.assign(Z, { barycoordFromPoint: function(e2, t2, r2, i2, n2) {
          return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), Z.getBarycoord(e2, t2, r2, i2, n2);
        }, normal: function(e2, t2, r2, i2) {
          return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), Z.getNormal(e2, t2, r2, i2);
        } }), Object.assign(Xi.prototype, { extractAllPoints: function(e2) {
          return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(e2);
        }, extrude: function(e2) {
          return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new Gr(this, e2);
        }, makeGeometry: function(e2) {
          return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Jr(this, e2);
        } }), Object.assign(n.prototype, { fromAttribute: function(e2, t2, r2) {
          return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, r2);
        }, distanceToManhattan: function(e2) {
          return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e2);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(s.prototype, { setEulerFromRotationMatrix: function() {
          console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.");
        }, setEulerFromQuaternion: function() {
          console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.");
        }, getPositionFromMatrix: function(e2) {
          return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(e2);
        }, getScaleFromMatrix: function(e2) {
          return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(e2);
        }, getColumnFromMatrix: function(e2, t2) {
          return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(t2, e2);
        }, applyProjection: function(e2) {
          return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(e2);
        }, fromAttribute: function(e2, t2, r2) {
          return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, r2);
        }, distanceToManhattan: function(e2) {
          return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(e2);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(u.prototype, { fromAttribute: function(e2, t2, r2) {
          return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(e2, t2, r2);
        }, lengthManhattan: function() {
          return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength();
        } }), Object.assign(T.prototype, { computeTangents: function() {
          console.error("THREE.Geometry: .computeTangents() has been removed.");
        }, computeLineDistances: function() {
          console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.");
        } }), Object.assign(w.prototype, { getChildByName: function(e2) {
          return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(e2);
        }, renderDepth: function() {
          console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.");
        }, translate: function(e2, t2) {
          return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(t2, e2);
        }, getWorldRotation: function() {
          console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.");
        } }), Object.defineProperties(w.prototype, { eulerOrder: { get: function() {
          return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order;
        }, set: function(e2) {
          console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = e2;
        } }, useQuaternion: { get: function() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        }, set: function() {
          console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.");
        } } }), Object.defineProperties(Pt.prototype, { objects: { get: function() {
          return console.warn("THREE.LOD: .objects has been renamed to .levels."), this.levels;
        } } }), Object.defineProperty(Dt.prototype, "useVertexTexture", { get: function() {
          console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        }, set: function() {
          console.warn("THREE.Skeleton: useVertexTexture has been removed.");
        } }), Object.defineProperty(wi.prototype, "__arcLengthDivisions", { get: function() {
          return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions;
        }, set: function(e2) {
          console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."), this.arcLengthDivisions = e2;
        } }), wt.prototype.setLens = function(e2, t2) {
          console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), void 0 !== t2 && (this.filmGauge = t2), this.setFocalLength(e2);
        }, Object.defineProperties(qi.prototype, { onlyShadow: { set: function() {
          console.warn("THREE.Light: .onlyShadow has been removed.");
        } }, shadowCameraFov: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = e2;
        } }, shadowCameraLeft: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = e2;
        } }, shadowCameraRight: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = e2;
        } }, shadowCameraTop: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = e2;
        } }, shadowCameraBottom: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = e2;
        } }, shadowCameraNear: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = e2;
        } }, shadowCameraFar: { set: function(e2) {
          console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = e2;
        } }, shadowCameraVisible: { set: function() {
          console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.");
        } }, shadowBias: { set: function(e2) {
          console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = e2;
        } }, shadowDarkness: { set: function() {
          console.warn("THREE.Light: .shadowDarkness has been removed.");
        } }, shadowMapWidth: { set: function(e2) {
          console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = e2;
        } }, shadowMapHeight: { set: function(e2) {
          console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = e2;
        } } }), Object.defineProperties(A.prototype, { length: { get: function() {
          return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length;
        } }, copyIndicesArray: function() {
          console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.");
        } }), Object.assign(B.prototype, { addIndex: function(e2) {
          console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(e2);
        }, addDrawCall: function(e2, t2, r2) {
          void 0 !== r2 && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(e2, t2);
        }, clearDrawCalls: function() {
          console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups();
        }, computeTangents: function() {
          console.warn("THREE.BufferGeometry: .computeTangents() has been removed.");
        }, computeOffsets: function() {
          console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.");
        } }), Object.defineProperties(B.prototype, { drawcalls: { get: function() {
          return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups;
        } }, offsets: { get: function() {
          return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups;
        } } }), Object.assign(Hr.prototype, { getArrays: function() {
          console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.");
        }, addShapeList: function() {
          console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.");
        }, addShape: function() {
          console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.");
        } }), Object.defineProperties(Hn.prototype, { dynamic: { set: function() {
          console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.");
        } }, onUpdate: { value: function() {
          return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this;
        } } }), Object.defineProperties(k.prototype, { wrapAround: { get: function() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        }, set: function() {
          console.warn("THREE.Material: .wrapAround has been removed.");
        } }, wrapRGB: { get: function() {
          return console.warn("THREE.Material: .wrapRGB has been removed."), new y();
        } }, shading: { get: function() {
          console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.");
        }, set: function(e2) {
          console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = 1 === e2;
        } } }), Object.defineProperties(ui.prototype, { metal: { get: function() {
          return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."), false;
        }, set: function() {
          console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead");
        } } }), Object.defineProperties(X.prototype, { derivatives: { get: function() {
          return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives;
        }, set: function(e2) {
          console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = e2;
        } } }), Object.assign(St.prototype, { getCurrentRenderTarget: function() {
          return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget();
        }, getMaxAnisotropy: function() {
          return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy();
        }, getPrecision: function() {
          return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision;
        }, resetGLState: function() {
          return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset();
        }, supportsFloatTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float");
        }, supportsHalfFloatTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float");
        }, supportsStandardDerivatives: function() {
          return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives");
        }, supportsCompressedTextureS3TC: function() {
          return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc");
        }, supportsCompressedTexturePVRTC: function() {
          return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc");
        }, supportsBlendMinMax: function() {
          return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax");
        }, supportsVertexTextures: function() {
          return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures;
        }, supportsInstancedArrays: function() {
          return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays");
        }, enableScissorTest: function(e2) {
          console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(e2);
        }, initMaterial: function() {
          console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.");
        }, addPrePlugin: function() {
          console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.");
        }, addPostPlugin: function() {
          console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.");
        }, updateShadowMap: function() {
          console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.");
        }, setFaceCulling: function() {
          console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.");
        } }), Object.defineProperties(St.prototype, { shadowMapEnabled: { get: function() {
          return this.shadowMap.enabled;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = e2;
        } }, shadowMapType: { get: function() {
          return this.shadowMap.type;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = e2;
        } }, shadowMapCullFace: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");
        } } }), Object.defineProperties(vt.prototype, { cullFace: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");
        } }, renderReverseSided: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");
        } }, renderSingleSided: { get: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        }, set: function() {
          console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");
        } } }), Object.defineProperties(h.prototype, { wrapS: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = e2;
        } }, wrapT: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = e2;
        } }, magFilter: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = e2;
        } }, minFilter: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = e2;
        } }, anisotropy: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = e2;
        } }, offset: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = e2;
        } }, repeat: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = e2;
        } }, format: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = e2;
        } }, type: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = e2;
        } }, generateMipmaps: { get: function() {
          return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps;
        }, set: function(e2) {
          console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = e2;
        } } }), Object.defineProperties(Et.prototype, { standing: { set: function() {
          console.warn("THREE.WebVRManager: .standing has been removed.");
        } } }), Dn.prototype.load = function(e2) {
          console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
          var t2 = this;
          return new Ln().load(e2, function(e3) {
            t2.setBuffer(e3);
          }), this;
        }, In.prototype.getData = function() {
          return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData();
        }, Rn.prototype.updateCubeMap = function(e2, t2) {
          return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(e2, t2);
        };
      }, function(e, t, r) {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: true });
        var i = r(2);
        r.d(t, "AdaptiveToneMappingPass", function() {
          return i.a;
        });
        var n = r(3);
        r.d(t, "BasicShader", function() {
          return n.a;
        });
        var o = r(4);
        r.d(t, "BleachBypassShader", function() {
          return o.a;
        });
        var a = r(5);
        r.d(t, "BlendShader", function() {
          return a.a;
        });
        var s = r(6);
        r.d(t, "BloomPass", function() {
          return s.a;
        });
        var c = r(7);
        r.d(t, "BokehPass", function() {
          return c.a;
        });
        var l = r(8);
        r.d(t, "BokehShader", function() {
          return l.a;
        });
        var u = r(9);
        r.d(t, "BokehShader2", function() {
          return u.a;
        });
        var h = r(10);
        r.d(t, "BrightnessContrastShader", function() {
          return h.a;
        });
        var d = r(11);
        r.d(t, "ColorCorrectionShader", function() {
          return d.a;
        });
        var p = r(12);
        r.d(t, "ColorifyShader", function() {
          return p.a;
        });
        var f = r(13);
        r.d(t, "ConvolutionShader", function() {
          return f.a;
        });
        var m = r(14);
        r.d(t, "CopyShader", function() {
          return m.a;
        });
        var v = r(15);
        r.d(t, "DDSLoader", function() {
          return v.a;
        });
        var g = r(16);
        r.d(t, "DOFMipMapShader", function() {
          return g.a;
        });
        var y = r(17);
        r.d(t, "DigitalGlitch", function() {
          return y.a;
        });
        var x = r(18);
        r.d(t, "DotScreenPass", function() {
          return x.a;
        });
        var _ = r(19);
        r.d(t, "DotScreenShader", function() {
          return _.a;
        });
        var b = r(20);
        r.d(t, "EdgeShader", function() {
          return b.a;
        });
        var w = r(21);
        r.d(t, "EdgeShader2", function() {
          return w.a;
        });
        var M = r(22);
        r.d(t, "EffectComposer", function() {
          return M.a;
        });
        var E = r(23);
        r.d(t, "FXAAShader", function() {
          return E.a;
        });
        var S = r(24);
        r.d(t, "FilmPass", function() {
          return S.a;
        });
        var T = r(25);
        r.d(t, "FilmShader", function() {
          return T.a;
        });
        var A = r(26);
        r.d(t, "FocusShader", function() {
          return A.a;
        });
        var L = r(27);
        r.d(t, "FresnelShader", function() {
          return L.a;
        });
        var C = r(28);
        r.d(t, "GammaCorrectionShader", function() {
          return C.a;
        });
        var R = r(29);
        r.d(t, "GlitchPass", function() {
          return R.a;
        });
        var P = r(30);
        r.d(t, "HorizontalBlurShader", function() {
          return P.a;
        });
        var D = r(31);
        r.d(t, "HorizontalTiltShiftShader", function() {
          return D.a;
        });
        var U = r(32);
        r.d(t, "HueSaturationShader", function() {
          return U.a;
        });
        var I = r(33);
        r.d(t, "KaleidoShader", function() {
          return I.a;
        });
        var O = r(34);
        r.d(t, "LuminosityShader", function() {
          return O.a;
        });
        var N = r(35);
        r.d(t, "MTLLoader", function() {
          return N.a;
        });
        var F = r(36);
        r.d(t, "MarchingCubes", function() {
          return F.a;
        });
        var z = r(37);
        r.d(t, "MaskPass", function() {
          return z.a;
        });
        var B = r(38);
        r.d(t, "MirrorShader", function() {
          return B.a;
        });
        var G = r(39);
        r.d(t, "NormalMapShader", function() {
          return G.a;
        });
        var H = r(40);
        r.d(t, "OBJLoader", function() {
          return H.a;
        });
        var j = r(41);
        r.d(t, "OceanShaders", function() {
          return j.a;
        });
        var V = r(42);
        r.d(t, "OrbitControls", function() {
          return V.a;
        });
        var k = r(43);
        r.d(t, "ParallaxShader", function() {
          return k.a;
        });
        var W = r(44);
        r.d(t, "RGBShiftShader", function() {
          return W.a;
        });
        var X = r(45);
        r.d(t, "RenderPass", function() {
          return X.a;
        });
        var q = r(46);
        r.d(t, "SSAOShader", function() {
          return q.a;
        });
        var Y = r(47);
        r.d(t, "SVGLoader", function() {
          return Y.a;
        });
        var Z = r(48);
        r.d(t, "SavePass", function() {
          return Z.a;
        });
        var J = r(49);
        r.d(t, "SepiaShader", function() {
          return J.a;
        });
        var K = r(50);
        r.d(t, "ShaderPass", function() {
          return K.a;
        });
        var Q = r(51);
        r.d(t, "ShaderToon", function() {
          return Q.a;
        });
        var $ = r(52);
        r.d(t, "TechnicolorShader", function() {
          return $.a;
        });
        var ee = r(53);
        r.d(t, "TexturePass", function() {
          return ee.a;
        });
        var te = r(54);
        r.d(t, "ToneMapShader", function() {
          return te.a;
        });
        var re = r(55);
        r.d(t, "TriangleBlurShader", function() {
          return re.a;
        });
        var ie = r(56);
        r.d(t, "UnpackDepthRGBAShader", function() {
          return ie.a;
        });
        var ne = r(57);
        r.d(t, "VerticalBlurShader", function() {
          return ne.a;
        });
        var oe = r(58);
        r.d(t, "VerticalTiltShiftShader", function() {
          return oe.a;
        });
        var ae = r(59);
        r.d(t, "VignetteShader", function() {
          return ae.a;
        });
        var se = r(60);
        r.d(t, "SobelOperatorShader", function() {
          return se.a;
        });
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.AdaptiveToneMappingPass = function(e2, t2) {
          this.resolution = void 0 !== t2 ? t2 : 256, this.needsInit = true, this.adaptive = void 0 === e2 || !!e2, this.luminanceRT = null, this.previousLuminanceRT = null, this.currentLuminanceRT = null, void 0 === i.CopyShader && console.error("THREE.AdaptiveToneMappingPass relies on THREE.CopyShader");
          var r2 = i.CopyShader;
          this.copyUniforms = i._46.clone(r2.uniforms), this.materialCopy = new i._35({ uniforms: this.copyUniforms, vertexShader: r2.vertexShader, fragmentShader: r2.fragmentShader, blending: i._9, depthTest: false }), void 0 === i.LuminosityShader && console.error("THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader"), this.materialLuminance = new i._35({ uniforms: i._46.clone(i.LuminosityShader.uniforms), vertexShader: i.LuminosityShader.vertexShader, fragmentShader: i.LuminosityShader.fragmentShader, blending: i._9 }), this.adaptLuminanceShader = { defines: { MIP_LEVEL_1X1: (Math.log(this.resolution) / Math.log(2)).toFixed(1) }, uniforms: { lastLum: { type: "t", value: null }, currentLum: { type: "t", value: null }, delta: { type: "f", value: 0.016 }, tau: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["varying vec2 vUv;", "uniform sampler2D lastLum;", "uniform sampler2D currentLum;", "uniform float delta;", "uniform float tau;", "void main() {", "vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );", "vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );", "float fLastLum = lastLum.r;", "float fCurrentLum = currentLum.r;", "fCurrentLum *= fCurrentLum;", "float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));", "gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );", "}"].join("\n") }, this.materialAdaptiveLum = new i._35({ uniforms: i._46.clone(this.adaptLuminanceShader.uniforms), vertexShader: this.adaptLuminanceShader.vertexShader, fragmentShader: this.adaptLuminanceShader.fragmentShader, defines: this.adaptLuminanceShader.defines, blending: i._9 }), void 0 === i.ToneMapShader && console.error("THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader"), this.materialToneMap = new i._35({ uniforms: i._46.clone(i.ToneMapShader.uniforms), vertexShader: i.ToneMapShader.vertexShader, fragmentShader: i.ToneMapShader.fragmentShader, blending: i._9 }), this.enabled = true, this.needsSwap = true, this.clear = false, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.AdaptiveToneMappingPass.prototype = { render: function(e2, t2, r2, i2, n) {
          this.needsInit && (this.reset(e2), this.luminanceRT.type = r2.type, this.previousLuminanceRT.type = r2.type, this.currentLuminanceRT.type = r2.type, this.needsInit = false), this.adaptive && (this.quad.material = this.materialLuminance, this.materialLuminance.uniforms.tDiffuse.value = r2, e2.render(this.scene, this.camera, this.currentLuminanceRT), this.quad.material = this.materialAdaptiveLum, this.materialAdaptiveLum.uniforms.delta.value = i2, this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT, this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT, e2.render(this.scene, this.camera, this.luminanceRT), this.quad.material = this.materialCopy, this.copyUniforms.tDiffuse.value = this.luminanceRT, e2.render(this.scene, this.camera, this.previousLuminanceRT)), this.quad.material = this.materialToneMap, this.materialToneMap.uniforms.tDiffuse.value = r2, e2.render(this.scene, this.camera, t2, this.clear);
        }, reset: function(e2) {
          this.luminanceRT && this.luminanceRT.dispose(), this.currentLuminanceRT && this.currentLuminanceRT.dispose(), this.previousLuminanceRT && this.previousLuminanceRT.dispose();
          var t2 = { minFilter: i.U, magFilter: i.U, format: i._22 };
          this.luminanceRT = new i._53(this.resolution, this.resolution, t2), this.luminanceRT.generateMipmaps = false, this.previousLuminanceRT = new i._53(this.resolution, this.resolution, t2), this.previousLuminanceRT.generateMipmaps = false, t2.minFilter = i.V, this.currentLuminanceRT = new i._53(this.resolution, this.resolution, t2), this.adaptive && (this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT), this.quad.material = new i._4({ color: 7829367 }), this.materialLuminance.needsUpdate = true, this.materialAdaptiveLum.needsUpdate = true, this.materialToneMap.needsUpdate = true;
        }, setAdaptive: function(e2) {
          e2 ? (this.adaptive = true, this.materialToneMap.defines.ADAPTED_LUMINANCE = "", this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT) : (this.adaptive = false, delete this.materialToneMap.defines.ADAPTED_LUMINANCE, this.materialToneMap.uniforms.luminanceMap.value = void 0), this.materialToneMap.needsUpdate = true;
        }, setAdaptionRate: function(e2) {
          e2 && (this.materialAdaptiveLum.uniforms.tau.value = Math.abs(e2));
        }, setMaxLuminance: function(e2) {
          e2 && (this.materialToneMap.uniforms.maxLuminance.value = e2);
        }, setAverageLuminance: function(e2) {
          e2 && (this.materialToneMap.uniforms.averageLuminance.value = e2);
        }, setMiddleGrey: function(e2) {
          e2 && (this.materialToneMap.uniforms.middleGrey.value = e2);
        }, dispose: function() {
          this.luminanceRT && this.luminanceRT.dispose(), this.previousLuminanceRT && this.previousLuminanceRT.dispose(), this.currentLuminanceRT && this.currentLuminanceRT.dispose(), this.materialLuminance && this.materialLuminance.dispose(), this.materialAdaptiveLum && this.materialAdaptiveLum.dispose(), this.materialCopy && this.materialCopy.dispose(), this.materialToneMap && this.materialToneMap.dispose();
        } }, t.a = i.AdaptiveToneMappingPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BasicShader = { uniforms: {}, vertexShader: ["void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["void main() {", "gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );", "}"].join("\n") }, t.a = i.BasicShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BleachBypassShader = { uniforms: { tDiffuse: { type: "t", value: null }, opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 base = texture2D( tDiffuse, vUv );", "vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );", "float lum = dot( lumCoeff, base.rgb );", "vec3 blend = vec3( lum );", "float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );", "vec3 result1 = 2.0 * base.rgb * blend;", "vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );", "vec3 newColor = mix( result1, result2, L );", "float A2 = opacity * base.a;", "vec3 mixRGB = A2 * newColor.rgb;", "mixRGB += ( ( 1.0 - A2 ) * base.rgb );", "gl_FragColor = vec4( mixRGB, base.a );", "}"].join("\n") }, t.a = i.BleachBypassShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BlendShader = { uniforms: { tDiffuse1: { type: "t", value: null }, tDiffuse2: { type: "t", value: null }, mixRatio: { type: "f", value: 0.5 }, opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float opacity;", "uniform float mixRatio;", "uniform sampler2D tDiffuse1;", "uniform sampler2D tDiffuse2;", "varying vec2 vUv;", "void main() {", "vec4 texel1 = texture2D( tDiffuse1, vUv );", "vec4 texel2 = texture2D( tDiffuse2, vUv );", "gl_FragColor = opacity * mix( texel1, texel2, mixRatio );", "}"].join("\n") }, t.a = i.BlendShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BloomPass = function(e2, t2, r2, n) {
          e2 = void 0 !== e2 ? e2 : 1, t2 = void 0 !== t2 ? t2 : 25, r2 = void 0 !== r2 ? r2 : 4, n = void 0 !== n ? n : 256;
          var o = { minFilter: i.U, magFilter: i.U, format: i._22 };
          this.renderTargetX = new i._53(n, n, o), this.renderTargetY = new i._53(n, n, o), void 0 === i.CopyShader && console.error("THREE.BloomPass relies on THREE.CopyShader");
          var a = i.CopyShader;
          this.copyUniforms = i._46.clone(a.uniforms), this.copyUniforms.opacity.value = e2, this.materialCopy = new i._35({ uniforms: this.copyUniforms, vertexShader: a.vertexShader, fragmentShader: a.fragmentShader, blending: i.b, transparent: true }), void 0 === i.ConvolutionShader && console.error("THREE.BloomPass relies on THREE.ConvolutionShader");
          var s = i.ConvolutionShader;
          this.convolutionUniforms = i._46.clone(s.uniforms), this.convolutionUniforms.uImageIncrement.value = i.BloomPass.blurX, this.convolutionUniforms.cKernel.value = i.ConvolutionShader.buildKernel(r2), this.materialConvolution = new i._35({ uniforms: this.convolutionUniforms, vertexShader: s.vertexShader, fragmentShader: s.fragmentShader, defines: { KERNEL_SIZE_FLOAT: t2.toFixed(1), KERNEL_SIZE_INT: t2.toFixed(0) } }), this.enabled = true, this.needsSwap = false, this.clear = false, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.BloomPass.prototype = { render: function(e2, t2, r2, n, o) {
          o && e2.context.disable(e2.context.STENCIL_TEST), this.quad.material = this.materialConvolution, this.convolutionUniforms.tDiffuse.value = r2, this.convolutionUniforms.uImageIncrement.value = i.BloomPass.blurX, e2.render(this.scene, this.camera, this.renderTargetX, true), this.convolutionUniforms.tDiffuse.value = this.renderTargetX, this.convolutionUniforms.uImageIncrement.value = i.BloomPass.blurY, e2.render(this.scene, this.camera, this.renderTargetY, true), this.quad.material = this.materialCopy, this.copyUniforms.tDiffuse.value = this.renderTargetY, o && e2.context.enable(e2.context.STENCIL_TEST), e2.render(this.scene, this.camera, r2, this.clear);
        } }, i.BloomPass.blurX = new i._48(1953125e-9, 0), i.BloomPass.blurY = new i._48(0, 1953125e-9), t.a = i.BloomPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BokehPass = function(e2, t2, r2) {
          this.scene = e2, this.camera = t2;
          var n = void 0 !== r2.focus ? r2.focus : 1, o = void 0 !== r2.aspect ? r2.aspect : t2.aspect, a = void 0 !== r2.aperture ? r2.aperture : 0.025, s = void 0 !== r2.maxblur ? r2.maxblur : 1, c = r2.width || window.innerWidth || 1, l = r2.height || window.innerHeight || 1;
          this.renderTargetColor = new i._53(c, l, { minFilter: i.U, magFilter: i.U, format: i._22 }), this.renderTargetDepth = this.renderTargetColor.clone(), this.materialDepth = new i._5(), void 0 === i.BokehShader && console.error("THREE.BokehPass relies on THREE.BokehShader");
          var u = i.BokehShader, h = i._46.clone(u.uniforms);
          h.tDepth.value = this.renderTargetDepth, h.focus.value = n, h.aspect.value = o, h.aperture.value = a, h.maxblur.value = s, this.materialBokeh = new i._35({ uniforms: h, vertexShader: u.vertexShader, fragmentShader: u.fragmentShader }), this.uniforms = h, this.enabled = true, this.needsSwap = false, this.renderToScreen = false, this.clear = false, this.camera2 = new i._14(-1, 1, 1, -1, 0, 1), this.scene2 = new i._31(), this.quad2 = new i._3(new i._17(2, 2), null), this.scene2.add(this.quad2);
        }, i.BokehPass.prototype = { render: function(e2, t2, r2, i2, n) {
          this.quad2.material = this.materialBokeh, this.scene.overrideMaterial = this.materialDepth, e2.render(this.scene, this.camera, this.renderTargetDepth, true), this.uniforms.tColor.value = r2, this.renderToScreen ? e2.render(this.scene2, this.camera2) : e2.render(this.scene2, this.camera2, t2, this.clear), this.scene.overrideMaterial = null;
        } }, t.a = i.BokehPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BokehShader = { uniforms: { tColor: { type: "t", value: null }, tDepth: { type: "t", value: null }, focus: { type: "f", value: 1 }, aspect: { type: "f", value: 1 }, aperture: { type: "f", value: 0.025 }, maxblur: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["varying vec2 vUv;", "uniform sampler2D tColor;", "uniform sampler2D tDepth;", "uniform float maxblur;", "uniform float aperture;", "uniform float focus;", "uniform float aspect;", "void main() {", "vec2 aspectcorrect = vec2( 1.0, aspect );", "vec4 depth1 = texture2D( tDepth, vUv );", "float factor = depth1.x - focus;", "vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );", "vec2 dofblur9 = dofblur * 0.9;", "vec2 dofblur7 = dofblur * 0.7;", "vec2 dofblur4 = dofblur * 0.4;", "vec4 col = vec4( 0.0 );", "col += texture2D( tColor, vUv.xy );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );", "col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );", "gl_FragColor = col / 41.0;", "gl_FragColor.a = 1.0;", "}"].join("\n") }, t.a = i.BokehShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BokehShader = { uniforms: { textureWidth: { type: "f", value: 1 }, textureHeight: { type: "f", value: 1 }, focalDepth: { type: "f", value: 1 }, focalLength: { type: "f", value: 24 }, fstop: { type: "f", value: 0.9 }, tColor: { type: "t", value: null }, tDepth: { type: "t", value: null }, maxblur: { type: "f", value: 1 }, showFocus: { type: "i", value: 0 }, manualdof: { type: "i", value: 0 }, vignetting: { type: "i", value: 0 }, depthblur: { type: "i", value: 0 }, threshold: { type: "f", value: 0.5 }, gain: { type: "f", value: 2 }, bias: { type: "f", value: 0.5 }, fringe: { type: "f", value: 0.7 }, znear: { type: "f", value: 0.1 }, zfar: { type: "f", value: 100 }, noise: { type: "i", value: 1 }, dithering: { type: "f", value: 1e-4 }, pentagon: { type: "i", value: 0 }, shaderFocus: { type: "i", value: 1 }, focusCoords: { type: "v2", value: new i._48() } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["varying vec2 vUv;", "uniform sampler2D tColor;", "uniform sampler2D tDepth;", "uniform float textureWidth;", "uniform float textureHeight;", "const float PI = 3.14159265;", "uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below", "uniform float focalLength; //focal length in mm", "uniform float fstop; //f-stop value", "uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)", "/*", "make sure that these two values are the same for your camera, otherwise distances will be wrong.", "*/", "uniform float znear; // camera clipping start", "uniform float zfar; // camera clipping end", "//------------------------------------------", "//user variables", "const int samples = SAMPLES; //samples on the first ring", "const int rings = RINGS; //ring count", "const int maxringsamples = rings * samples;", "uniform bool manualdof; // manual dof calculation", "float ndofstart = 1.0; // near dof blur start", "float ndofdist = 2.0; // near dof blur falloff distance", "float fdofstart = 1.0; // far dof blur start", "float fdofdist = 3.0; // far dof blur falloff distance", "float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)", "uniform bool vignetting; // use optical lens vignetting", "float vignout = 1.3; // vignetting outer border", "float vignin = 0.0; // vignetting inner border", "float vignfade = 22.0; // f-stops till vignete fades", "uniform bool shaderFocus;", "// disable if you use external focalDepth value", "uniform vec2 focusCoords;", "// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)", "// if center of screen use vec2(0.5, 0.5);", "uniform float maxblur;", "//clamp value of max blur (0.0 = no blur, 1.0 default)", "uniform float threshold; // highlight threshold;", "uniform float gain; // highlight gain;", "uniform float bias; // bokeh edge bias", "uniform float fringe; // bokeh chromatic aberration / fringing", "uniform bool noise; //use noise instead of pattern for sample dithering", "uniform float dithering;", "uniform bool depthblur; // blur the depth buffer", "float dbsize = 1.25; // depth blur size", "/*", "next part is experimental", "not looking good with small sample and ring count", "looks okay starting from samples = 4, rings = 4", "*/", "uniform bool pentagon; //use pentagon as bokeh shape?", "float feather = 0.4; //pentagon shape feather", "//------------------------------------------", "float penta(vec2 coords) {", "//pentagonal shape", "float scale = float(rings) - 1.3;", "vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);", "vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);", "vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);", "vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);", "vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);", "vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);", "vec4  one = vec4( 1.0 );", "vec4 P = vec4((coords),vec2(scale, scale));", "vec4 dist = vec4(0.0);", "float inorout = -4.0;", "dist.x = dot( P, HS0 );", "dist.y = dot( P, HS1 );", "dist.z = dot( P, HS2 );", "dist.w = dot( P, HS3 );", "dist = smoothstep( -feather, feather, dist );", "inorout += dot( dist, one );", "dist.x = dot( P, HS4 );", "dist.y = HS5.w - abs( P.z );", "dist = smoothstep( -feather, feather, dist );", "inorout += dist.x;", "return clamp( inorout, 0.0, 1.0 );", "}", "float bdepth(vec2 coords) {", "// Depth buffer blur", "float d = 0.0;", "float kernel[9];", "vec2 offset[9];", "vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;", "offset[0] = vec2(-wh.x,-wh.y);", "offset[1] = vec2( 0.0, -wh.y);", "offset[2] = vec2( wh.x -wh.y);", "offset[3] = vec2(-wh.x,  0.0);", "offset[4] = vec2( 0.0,   0.0);", "offset[5] = vec2( wh.x,  0.0);", "offset[6] = vec2(-wh.x, wh.y);", "offset[7] = vec2( 0.0,  wh.y);", "offset[8] = vec2( wh.x, wh.y);", "kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;", "kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;", "kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;", "for( int i=0; i<9; i++ ) {", "float tmp = texture2D(tDepth, coords + offset[i]).r;", "d += tmp * kernel[i];", "}", "return d;", "}", "vec3 color(vec2 coords,float blur) {", "//processing the sample", "vec3 col = vec3(0.0);", "vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);", "col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;", "col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;", "col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;", "vec3 lumcoeff = vec3(0.299,0.587,0.114);", "float lum = dot(col.rgb, lumcoeff);", "float thresh = max((lum-threshold)*gain, 0.0);", "return col+mix(vec3(0.0),col,thresh*blur);", "}", "vec2 rand(vec2 coord) {", "// generating noise / pattern texture for dithering", "float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;", "float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;", "if (noise) {", "noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;", "noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;", "}", "return vec2(noiseX,noiseY);", "}", "vec3 debugFocus(vec3 col, float blur, float depth) {", "float edge = 0.002*depth; //distance based edge smoothing", "float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);", "float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);", "col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);", "col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);", "return col;", "}", "float linearize(float depth) {", "return -zfar * znear / (depth * (zfar - znear) - zfar);", "}", "float vignette() {", "float dist = distance(vUv.xy, vec2(0.5,0.5));", "dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);", "return clamp(dist,0.0,1.0);", "}", "float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {", "float rings2 = float(rings);", "float step = PI*2.0 / float(ringsamples);", "float pw = cos(j*step)*i;", "float ph = sin(j*step)*i;", "float p = 1.0;", "if (pentagon) {", "p = penta(vec2(pw,ph));", "}", "col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;", "return 1.0 * mix(1.0, i /rings2, bias) * p;", "}", "void main() {", "//scene depth calculation", "float depth = linearize(texture2D(tDepth,vUv.xy).x);", "// Blur depth?", "if (depthblur) {", "depth = linearize(bdepth(vUv.xy));", "}", "//focal plane calculation", "float fDepth = focalDepth;", "if (shaderFocus) {", "fDepth = linearize(texture2D(tDepth,focusCoords).x);", "}", "// dof blur factor calculation", "float blur = 0.0;", "if (manualdof) {", "float a = depth-fDepth; // Focal plane", "float b = (a-fdofstart)/fdofdist; // Far DoF", "float c = (-a-ndofstart)/ndofdist; // Near Dof", "blur = (a>0.0) ? b : c;", "} else {", "float f = focalLength; // focal length in mm", "float d = fDepth*1000.0; // focal plane in mm", "float o = depth*1000.0; // depth in mm", "float a = (o*f)/(o-f);", "float b = (d*f)/(d-f);", "float c = (d-f)/(d*fstop*CoC);", "blur = abs(a-b)*c;", "}", "blur = clamp(blur,0.0,1.0);", "// calculation of pattern for dithering", "vec2 noise = rand(vUv.xy)*dithering*blur;", "// getting blur x and y step factor", "float w = (1.0/textureWidth)*blur*maxblur+noise.x;", "float h = (1.0/textureHeight)*blur*maxblur+noise.y;", "// calculation of final color", "vec3 col = vec3(0.0);", "if(blur < 0.05) {", "//some optimization thingy", "col = texture2D(tColor, vUv.xy).rgb;", "} else {", "col = texture2D(tColor, vUv.xy).rgb;", "float s = 1.0;", "int ringsamples;", "for (int i = 1; i <= rings; i++) {", "/*unboxstart*/", "ringsamples = i * samples;", "for (int j = 0 ; j < maxringsamples ; j++) {", "if (j >= ringsamples) break;", "s += gather(float(i), float(j), ringsamples, col, w, h, blur);", "}", "/*unboxend*/", "}", "col /= s; //divide by sample count", "}", "if (showFocus) {", "col = debugFocus(col, blur, depth);", "}", "if (vignetting) {", "col *= vignette();", "}", "gl_FragColor.rgb = col;", "gl_FragColor.a = 1.0;", "} "].join("\n") }, t.a = i.BokehShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.BrightnessContrastShader = { uniforms: { tDiffuse: { type: "t", value: null }, brightness: { type: "f", value: 0 }, contrast: { type: "f", value: 0 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float brightness;", "uniform float contrast;", "varying vec2 vUv;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "gl_FragColor.rgb += brightness;", "if (contrast > 0.0) {", "gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;", "} else {", "gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;", "}", "}"].join("\n") }, t.a = i.BrightnessContrastShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ColorCorrectionShader = { uniforms: { tDiffuse: { type: "t", value: null }, powRGB: { type: "v3", value: new i._49(2, 2, 2) }, mulRGB: { type: "v3", value: new i._49(1, 1, 1) }, addRGB: { type: "v3", value: new i._49(0, 0, 0) } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec3 powRGB;", "uniform vec3 mulRGB;", "uniform vec3 addRGB;", "varying vec2 vUv;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );", "}"].join("\n") }, t.a = i.ColorCorrectionShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ColorifyShader = { uniforms: { tDiffuse: { type: "t", value: null }, color: { type: "c", value: new i.m(16777215) } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform vec3 color;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "vec3 luma = vec3( 0.299, 0.587, 0.114 );", "float v = dot( texel.xyz, luma );", "gl_FragColor = vec4( v * color, texel.w );", "}"].join("\n") }, t.a = i.ColorifyShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ConvolutionShader = { defines: { KERNEL_SIZE_FLOAT: "25.0", KERNEL_SIZE_INT: "25" }, uniforms: { tDiffuse: { type: "t", value: null }, uImageIncrement: { type: "v2", value: new i._48(1953125e-9, 0) }, cKernel: { type: "fv1", value: [] } }, vertexShader: ["uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float cKernel[ KERNEL_SIZE_INT ];", "uniform sampler2D tDiffuse;", "uniform vec2 uImageIncrement;", "varying vec2 vUv;", "void main() {", "vec2 imageCoord = vUv;", "vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );", "for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {", "sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];", "imageCoord += uImageIncrement;", "}", "gl_FragColor = sum;", "}"].join("\n"), buildKernel: function(e2) {
          var t2, r2, i2, n, o = 2 * Math.ceil(3 * e2) + 1;
          for (o > 25 && (o = 25), n = 0.5 * (o - 1), r2 = new Array(o), i2 = 0, t2 = 0; t2 < o; ++t2)
            r2[t2] = function(e3, t3) {
              return Math.exp(-e3 * e3 / (2 * t3 * t3));
            }(t2 - n, e2), i2 += r2[t2];
          for (t2 = 0; t2 < o; ++t2)
            r2[t2] /= i2;
          return r2;
        } }, t.a = i.ConvolutionShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.CopyShader = { uniforms: { tDiffuse: { type: "t", value: null }, opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = opacity * texel;", "}"].join("\n") }, t.a = i.CopyShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.DDSLoader = function() {
          this._parser = i.DDSLoader.parse;
        }, i.DDSLoader.prototype = Object.create(i.p.prototype), i.DDSLoader.prototype.constructor = i.DDSLoader, i.DDSLoader.parse = function(e2, t2) {
          function r2(e3) {
            return e3.charCodeAt(0) + (e3.charCodeAt(1) << 8) + (e3.charCodeAt(2) << 16) + (e3.charCodeAt(3) << 24);
          }
          var n = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 }, o = r2("DXT1"), a = r2("DXT3"), s = r2("DXT5"), c = r2("ETC1"), l = new Int32Array(e2, 0, 31);
          if (542327876 !== l[0])
            return console.error("THREE.DDSLoader.parse: Invalid magic number in DDS header."), n;
          if (4 & !l[20])
            return console.error("THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code."), n;
          var u, h = l[21], d = false;
          switch (h) {
            case o:
              u = 8, n.format = i._25;
              break;
            case a:
              u = 16, n.format = i._20;
              break;
            case s:
              u = 16, n.format = i._21;
              break;
            case c:
              u = 8, n.format = i._24;
              break;
            default:
              if (!(32 === l[22] && 16711680 & l[23] && 65280 & l[24] && 255 & l[25] && 4278190080 & l[26]))
                return console.error("THREE.DDSLoader.parse: Unsupported FourCC code ", function(e3) {
                  return String.fromCharCode(255 & e3, e3 >> 8 & 255, e3 >> 16 & 255, e3 >> 24 & 255);
                }(h)), n;
              d = true, u = 64, n.format = i._19;
          }
          n.mipmapCount = 1, 131072 & l[2] && false !== t2 && (n.mipmapCount = Math.max(1, l[7]));
          var p = l[28];
          if (n.isCubemap = !!(512 & p), n.isCubemap && (!(1024 & p) || !(2048 & p) || !(4096 & p) || !(8192 & p) || !(16384 & p) || !(32768 & p)))
            return console.error("THREE.DDSLoader.parse: Incomplete cubemap faces"), n;
          n.width = l[4], n.height = l[3];
          for (var f = l[1] + 4, m = n.isCubemap ? 6 : 1, v = 0; v < m; v++)
            for (var g = n.width, y = n.height, x = 0; x < n.mipmapCount; x++) {
              if (d)
                var _ = function(e3, t3, r3, i2) {
                  for (var n2 = r3 * i2 * 4, o2 = new Uint8Array(e3, t3, n2), a2 = new Uint8Array(n2), s2 = 0, c2 = 0, l2 = 0; l2 < i2; l2++)
                    for (var u2 = 0; u2 < r3; u2++) {
                      var h2 = o2[c2];
                      c2++;
                      var d2 = o2[c2];
                      c2++;
                      var p2 = o2[c2];
                      c2++;
                      var f2 = o2[c2];
                      c2++, a2[s2] = p2, s2++, a2[s2] = d2, s2++, a2[s2] = h2, s2++, a2[s2] = f2, s2++;
                    }
                  return a2;
                }(e2, f, g, y), b = _.length;
              else
                var b = Math.max(4, g) / 4 * Math.max(4, y) / 4 * u, _ = new Uint8Array(e2, f, b);
              var w = { data: _, width: g, height: y };
              n.mipmaps.push(w), f += b, g = Math.max(g >> 1, 1), y = Math.max(y >> 1, 1);
            }
          return n;
        }, t.a = i.DDSLoader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.DOFMipMapShader = { uniforms: { tColor: { type: "t", value: null }, tDepth: { type: "t", value: null }, focus: { type: "f", value: 1 }, maxblur: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float focus;", "uniform float maxblur;", "uniform sampler2D tColor;", "uniform sampler2D tDepth;", "varying vec2 vUv;", "void main() {", "vec4 depth = texture2D( tDepth, vUv );", "float factor = depth.x - focus;", "vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );", "gl_FragColor = col;", "gl_FragColor.a = 1.0;", "}"].join("\n") }, t.a = i.DOFMipMapShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.DigitalGlitch = { uniforms: { tDiffuse: { type: "t", value: null }, tDisp: { type: "t", value: null }, byp: { type: "i", value: 0 }, amount: { type: "f", value: 0.08 }, angle: { type: "f", value: 0.02 }, seed: { type: "f", value: 0.02 }, seed_x: { type: "f", value: 0.02 }, seed_y: { type: "f", value: 0.02 }, distortion_x: { type: "f", value: 0.5 }, distortion_y: { type: "f", value: 0.6 }, col_s: { type: "f", value: 0.05 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform int byp;", "uniform sampler2D tDiffuse;", "uniform sampler2D tDisp;", "uniform float amount;", "uniform float angle;", "uniform float seed;", "uniform float seed_x;", "uniform float seed_y;", "uniform float distortion_x;", "uniform float distortion_y;", "uniform float col_s;", "varying vec2 vUv;", "float rand(vec2 co){", "return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);", "}", "void main() {", "if(byp<1) {", "vec2 p = vUv;", "float xs = floor(gl_FragCoord.x / 0.5);", "float ys = floor(gl_FragCoord.y / 0.5);", "vec4 normal = texture2D (tDisp, p*seed*seed);", "if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {", "if(seed_x>0.){", "p.y = 1. - (p.y + distortion_y);", "}", "else {", "p.y = distortion_y;", "}", "}", "if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {", "if(seed_y>0.){", "p.x=distortion_x;", "}", "else {", "p.x = 1. - (p.x + distortion_x);", "}", "}", "p.x+=normal.x*seed_x*(seed/5.);", "p.y+=normal.y*seed_y*(seed/5.);", "vec2 offset = amount * vec2( cos(angle), sin(angle));", "vec4 cr = texture2D(tDiffuse, p + offset);", "vec4 cga = texture2D(tDiffuse, p);", "vec4 cb = texture2D(tDiffuse, p - offset);", "gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);", "vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);", "gl_FragColor = gl_FragColor+ snow;", "}", "else {", "gl_FragColor=texture2D (tDiffuse, vUv);", "}", "}"].join("\n") }, t.a = i.DigitalGlitch;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.DotScreenPass = function(e2, t2, r2) {
          void 0 === i.DotScreenShader && console.error("THREE.DotScreenPass relies on THREE.DotScreenShader");
          var n = i.DotScreenShader;
          this.uniforms = i._46.clone(n.uniforms), void 0 !== e2 && this.uniforms.center.value.copy(e2), void 0 !== t2 && (this.uniforms.angle.value = t2), void 0 !== r2 && (this.uniforms.scale.value = r2), this.material = new i._35({ uniforms: this.uniforms, vertexShader: n.vertexShader, fragmentShader: n.fragmentShader }), this.enabled = true, this.renderToScreen = false, this.needsSwap = true, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.DotScreenPass.prototype = { render: function(e2, t2, r2, i2) {
          this.uniforms.tDiffuse.value = r2, this.uniforms.tSize.value.set(r2.width, r2.height), this.quad.material = this.material, this.renderToScreen ? e2.render(this.scene, this.camera) : e2.render(this.scene, this.camera, t2, false);
        } }, t.a = i.DotScreenPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.DotScreenShader = { uniforms: { tDiffuse: { type: "t", value: null }, tSize: { type: "v2", value: new i._48(256, 256) }, center: { type: "v2", value: new i._48(0.5, 0.5) }, angle: { type: "f", value: 1.57 }, scale: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform vec2 center;", "uniform float angle;", "uniform float scale;", "uniform vec2 tSize;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "float pattern() {", "float s = sin( angle ), c = cos( angle );", "vec2 tex = vUv * tSize - center;", "vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;", "return ( sin( point.x ) * sin( point.y ) ) * 4.0;", "}", "void main() {", "vec4 color = texture2D( tDiffuse, vUv );", "float average = ( color.r + color.g + color.b ) / 3.0;", "gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );", "}"].join("\n") }, t.a = i.DotScreenShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.EdgeShader = { uniforms: { tDiffuse: { type: "t", value: null }, aspect: { type: "v2", value: new i._48(512, 512) } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "uniform vec2 aspect;", "vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);", "mat3 G[9];", "const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );", "const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );", "const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );", "const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );", "const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );", "const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );", "const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );", "const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );", "const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );", "void main(void)", "{", "G[0] = g0,", "G[1] = g1,", "G[2] = g2,", "G[3] = g3,", "G[4] = g4,", "G[5] = g5,", "G[6] = g6,", "G[7] = g7,", "G[8] = g8;", "mat3 I;", "float cnv[9];", "vec3 sample;", "for (float i=0.0; i<3.0; i++) {", "for (float j=0.0; j<3.0; j++) {", "sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;", "I[int(i)][int(j)] = length(sample);", "}", "}", "for (int i=0; i<9; i++) {", "float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);", "cnv[i] = dp3 * dp3;", "}", "float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);", "float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);", "gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);", "}"].join("\n") }, t.a = i.EdgeShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.EdgeShader2 = { uniforms: { tDiffuse: { type: "t", value: null }, aspect: { type: "v2", value: new i._48(512, 512) } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "uniform vec2 aspect;", "vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);", "mat3 G[2];", "const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );", "const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );", "void main(void)", "{", "mat3 I;", "float cnv[2];", "vec3 sample;", "G[0] = g0;", "G[1] = g1;", "for (float i=0.0; i<3.0; i++)", "for (float j=0.0; j<3.0; j++) {", "sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;", "I[int(i)][int(j)] = length(sample);", "}", "for (int i=0; i<2; i++) {", "float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);", "cnv[i] = dp3 * dp3; ", "}", "gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));", "} "].join("\n") }, t.a = i.EdgeShader2;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.EffectComposer = function(e2, t2) {
          if (this.renderer = e2, void 0 === t2) {
            var r2 = e2.getPixelRatio(), n = Math.floor(e2.context.canvas.width / r2) || 1, o = Math.floor(e2.context.canvas.height / r2) || 1, a = { minFilter: i.U, magFilter: i.U, format: i._22, stencilBuffer: false };
            t2 = new i._53(n, o, a);
          }
          this.renderTarget1 = t2, this.renderTarget2 = t2.clone(), this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2, this.passes = [], void 0 === i.CopyShader && console.error("THREE.EffectComposer relies on THREE.CopyShader"), this.copyPass = new i.ShaderPass(i.CopyShader);
        }, i.EffectComposer.prototype = { swapBuffers: function() {
          var e2 = this.readBuffer;
          this.readBuffer = this.writeBuffer, this.writeBuffer = e2;
        }, addPass: function(e2) {
          this.passes.push(e2);
        }, insertPass: function(e2, t2) {
          this.passes.splice(t2, 0, e2);
        }, render: function(e2) {
          this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2;
          var t2, r2, n = false, o = this.passes.length;
          for (r2 = 0; r2 < o; r2++)
            if (t2 = this.passes[r2], t2.enabled) {
              if (t2.render(this.renderer, this.writeBuffer, this.readBuffer, e2, n), t2.needsSwap) {
                if (n) {
                  var a = this.renderer.context;
                  a.stencilFunc(a.NOTEQUAL, 1, 4294967295), this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, e2), a.stencilFunc(a.EQUAL, 1, 4294967295);
                }
                this.swapBuffers();
              }
              t2 instanceof i.MaskPass ? n = true : t2 instanceof i.ClearMaskPass && (n = false);
            }
        }, reset: function(e2) {
          if (void 0 === e2) {
            e2 = this.renderTarget1.clone();
            var t2 = this.renderer.getPixelRatio();
            e2.width = Math.floor(this.renderer.context.canvas.width / t2), e2.height = Math.floor(this.renderer.context.canvas.height / t2);
          }
          this.renderTarget1.dispose(), this.renderTarget1 = e2, this.renderTarget2.dispose(), this.renderTarget2 = e2.clone(), this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2;
        }, setSize: function(e2, t2) {
          this.renderTarget1.setSize(e2, t2), this.renderTarget2.setSize(e2, t2);
        } }, t.a = i.EffectComposer;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.FXAAShader = { uniforms: { tDiffuse: { type: "t", value: new i._41() }, resolution: { type: "v2", value: new i._48() } }, vertexShader: "#define GLSLIFY 1\nvarying vec2 vUv;\n\nvarying vec2 v_rgbNW;\nvarying vec2 v_rgbNE;\nvarying vec2 v_rgbSW;\nvarying vec2 v_rgbSE;\nvarying vec2 v_rgbM;\n\nuniform vec2 resolution;\n\nvoid main() {\n  vUv = uv;\n  vec2 fragCoord = uv * resolution;\n  vec2 inverseVP = 1.0 / resolution.xy;\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n  v_rgbM = vec2(fragCoord * inverseVP);\n\n  gl_Position = projectionMatrix *\n              modelViewMatrix *\n              vec4(position,1.0);\n}\n", fragmentShader: `#define GLSLIFY 1
varying vec2 vUv;

//texcoords computed in vertex step
//to avoid dependent texture reads
varying vec2 v_rgbNW;
varying vec2 v_rgbNE;
varying vec2 v_rgbSW;
varying vec2 v_rgbSE;
varying vec2 v_rgbM;

//make sure to have a resolution uniform set to the screen size
uniform vec2 resolution;
uniform sampler2D tDiffuse;

/**
Basic FXAA implementation based on the code on geeks3d.com with the
modification that the texture2DLod stuff was removed since it's
unsupported by WebGL.

--

From:
https://github.com/mitsuhiko/webgl-meincraft

Copyright (c) 2011 by Armin Ronacher.

Some rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * The names of the contributors may not be used to endorse or
      promote products derived from this software without specific
      prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

#ifndef FXAA_REDUCE_MIN
    #define FXAA_REDUCE_MIN   (1.0/ 128.0)
#endif
#ifndef FXAA_REDUCE_MUL
    #define FXAA_REDUCE_MUL   (1.0 / 8.0)
#endif
#ifndef FXAA_SPAN_MAX
    #define FXAA_SPAN_MAX     8.0
#endif

//optimized version for mobile, where dependent 
//texture reads can be a bottleneck
vec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,
            vec2 v_rgbNW, vec2 v_rgbNE, 
            vec2 v_rgbSW, vec2 v_rgbSE, 
            vec2 v_rgbM) {
    vec4 color;
    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);
    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;
    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;
    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;
    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;
    vec4 texColor = texture2D(tex, v_rgbM);
    vec3 rgbM  = texColor.xyz;
    vec3 luma = vec3(0.299, 0.587, 0.114);
    float lumaNW = dot(rgbNW, luma);
    float lumaNE = dot(rgbNE, luma);
    float lumaSW = dot(rgbSW, luma);
    float lumaSE = dot(rgbSE, luma);
    float lumaM  = dot(rgbM,  luma);
    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    
    mediump vec2 dir;
    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
    
    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *
                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);
    
    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),
              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
              dir * rcpDirMin)) * inverseVP;
    
    vec3 rgbA = 0.5 * (
        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +
        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);
    vec3 rgbB = rgbA * 0.5 + 0.25 * (
        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +
        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);

    float lumaB = dot(rgbB, luma);
    if ((lumaB < lumaMin) || (lumaB > lumaMax))
        color = vec4(rgbA, texColor.a);
    else
        color = vec4(rgbB, texColor.a);
    return color;
}

void main() {
  vec2 fragCoord = vUv * resolution;   
  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
}
` }, t.a = i.FXAAShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.FilmPass = function(e2, t2, r2, n) {
          void 0 === i.FilmShader && console.error("THREE.FilmPass relies on THREE.FilmShader");
          var o = i.FilmShader;
          this.uniforms = i._46.clone(o.uniforms), this.material = new i._35({ uniforms: this.uniforms, vertexShader: o.vertexShader, fragmentShader: o.fragmentShader }), void 0 !== n && (this.uniforms.grayscale.value = n), void 0 !== e2 && (this.uniforms.nIntensity.value = e2), void 0 !== t2 && (this.uniforms.sIntensity.value = t2), void 0 !== r2 && (this.uniforms.sCount.value = r2), this.enabled = true, this.renderToScreen = false, this.needsSwap = true, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.FilmPass.prototype = { render: function(e2, t2, r2, i2) {
          this.uniforms.tDiffuse.value = r2, this.uniforms.time.value += i2, this.quad.material = this.material, this.renderToScreen ? e2.render(this.scene, this.camera) : e2.render(this.scene, this.camera, t2, false);
        } }, t.a = i.FilmPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.FilmShader = { uniforms: { tDiffuse: { type: "t", value: null }, time: { type: "f", value: 0 }, nIntensity: { type: "f", value: 0.5 }, sIntensity: { type: "f", value: 0.05 }, sCount: { type: "f", value: 4096 }, grayscale: { type: "i", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float time;", "uniform bool grayscale;", "uniform float nIntensity;", "uniform float sIntensity;", "uniform float sCount;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 cTextureScreen = texture2D( tDiffuse, vUv );", "float x = vUv.x * vUv.y * time *  1000.0;", "x = mod( x, 13.0 ) * mod( x, 123.0 );", "float dx = mod( x, 0.01 );", "vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );", "vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );", "cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;", "cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );", "if( grayscale ) {", "cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );", "}", "gl_FragColor =  vec4( cResult, cTextureScreen.a );", "}"].join("\n") }, t.a = i.FilmShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.FocusShader = { uniforms: { tDiffuse: { type: "t", value: null }, screenWidth: { type: "f", value: 1024 }, screenHeight: { type: "f", value: 1024 }, sampleDistance: { type: "f", value: 0.94 }, waveFactor: { type: "f", value: 125e-5 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float screenWidth;", "uniform float screenHeight;", "uniform float sampleDistance;", "uniform float waveFactor;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 color, org, tmp, add;", "float sample_dist, f;", "vec2 vin;", "vec2 uv = vUv;", "add = color = org = texture2D( tDiffuse, uv );", "vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );", "sample_dist = dot( vin, vin ) * 2.0;", "f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;", "vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );", "add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );", "if( tmp.b < color.b ) color = tmp;", "color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );", "color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );", "gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );", "}"].join("\n") }, t.a = i.FocusShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.FresnelShader = { uniforms: { mRefractionRatio: { type: "f", value: 1.02 }, mFresnelBias: { type: "f", value: 0.1 }, mFresnelPower: { type: "f", value: 2 }, mFresnelScale: { type: "f", value: 1 }, tCube: { type: "t", value: null } }, vertexShader: ["uniform float mRefractionRatio;", "uniform float mFresnelBias;", "uniform float mFresnelScale;", "uniform float mFresnelPower;", "varying vec3 vReflect;", "varying vec3 vRefract[3];", "varying float vReflectionFactor;", "void main() {", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );", "vec3 I = worldPosition.xyz - cameraPosition;", "vReflect = reflect( I, worldNormal );", "vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );", "vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );", "vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );", "vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );", "gl_Position = projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader: ["uniform samplerCube tCube;", "varying vec3 vReflect;", "varying vec3 vRefract[3];", "varying float vReflectionFactor;", "void main() {", "vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );", "vec4 refractedColor = vec4( 1.0 );", "refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;", "refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;", "refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;", "gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );", "}"].join("\n") }, t.a = i.FresnelShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.GammaCorrectionShader = { uniforms: { tDiffuse: { type: "t", value: null } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["#define GAMMA_OUTPUT", "#define GAMMA_FACTOR 2", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", i._33.common, "void main() {", "vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );", "gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );", "}"].join("\n") }, t.a = i.GammaCorrectionShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.GlitchPass = function(e2) {
          void 0 === i.DigitalGlitch && console.error("THREE.GlitchPass relies on THREE.DigitalGlitch");
          var t2 = i.DigitalGlitch;
          this.uniforms = i._46.clone(t2.uniforms), void 0 == e2 && (e2 = 64), this.uniforms.tDisp.value = this.generateHeightmap(e2), this.material = new i._35({ uniforms: this.uniforms, vertexShader: t2.vertexShader, fragmentShader: t2.fragmentShader }), this.enabled = true, this.renderToScreen = false, this.needsSwap = true, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad), this.goWild = false, this.curF = 0, this.generateTrigger();
        }, i.GlitchPass.prototype = { render: function(e2, t2, r2, n) {
          this.uniforms.tDiffuse.value = r2, this.uniforms.seed.value = Math.random(), this.uniforms.byp.value = 0, this.curF % this.randX == 0 || 1 == this.goWild ? (this.uniforms.amount.value = Math.random() / 30, this.uniforms.angle.value = i._2.randFloat(-Math.PI, Math.PI), this.uniforms.seed_x.value = i._2.randFloat(-1, 1), this.uniforms.seed_y.value = i._2.randFloat(-1, 1), this.uniforms.distortion_x.value = i._2.randFloat(0, 1), this.uniforms.distortion_y.value = i._2.randFloat(0, 1), this.curF = 0, this.generateTrigger()) : this.curF % this.randX < this.randX / 5 ? (this.uniforms.amount.value = Math.random() / 90, this.uniforms.angle.value = i._2.randFloat(-Math.PI, Math.PI), this.uniforms.distortion_x.value = i._2.randFloat(0, 1), this.uniforms.distortion_y.value = i._2.randFloat(0, 1), this.uniforms.seed_x.value = i._2.randFloat(-0.3, 0.3), this.uniforms.seed_y.value = i._2.randFloat(-0.3, 0.3)) : 0 == this.goWild && (this.uniforms.byp.value = 1), this.curF++, this.quad.material = this.material, this.renderToScreen ? e2.render(this.scene, this.camera) : e2.render(this.scene, this.camera, t2, false);
        }, generateTrigger: function() {
          this.randX = i._2.randInt(120, 240);
        }, generateHeightmap: function(e2) {
          for (var t2 = new Float32Array(e2 * e2 * 3), r2 = e2 * e2, n = 0; n < r2; n++) {
            var o = i._2.randFloat(0, 1);
            t2[3 * n + 0] = o, t2[3 * n + 1] = o, t2[3 * n + 2] = o;
          }
          var a = new i.u(t2, e2, e2, i._22, i.I);
          return a.needsUpdate = true, a;
        } }, t.a = i.GlitchPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.HorizontalBlurShader = { uniforms: { tDiffuse: { type: "t", value: null }, h: { type: "f", value: 1 / 512 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float h;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n") }, t.a = i.HorizontalBlurShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.HorizontalTiltShiftShader = { uniforms: { tDiffuse: { type: "t", value: null }, h: { type: "f", value: 1 / 512 }, r: { type: "f", value: 0.35 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float h;", "uniform float r;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float hh = h * abs( r - vUv.y );", "sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n") }, t.a = i.HorizontalTiltShiftShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.HueSaturationShader = { uniforms: { tDiffuse: { type: "t", value: null }, hue: { type: "f", value: 0 }, saturation: { type: "f", value: 0 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float hue;", "uniform float saturation;", "varying vec2 vUv;", "void main() {", "gl_FragColor = texture2D( tDiffuse, vUv );", "float angle = hue * 3.14159265;", "float s = sin(angle), c = cos(angle);", "vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;", "float len = length(gl_FragColor.rgb);", "gl_FragColor.rgb = vec3(", "dot(gl_FragColor.rgb, weights.xyz),", "dot(gl_FragColor.rgb, weights.zxy),", "dot(gl_FragColor.rgb, weights.yzx)", ");", "float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;", "if (saturation > 0.0) {", "gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));", "} else {", "gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);", "}", "}"].join("\n") }, t.a = i.HueSaturationShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.KaleidoShader = { uniforms: { tDiffuse: { type: "t", value: null }, sides: { type: "f", value: 6 }, angle: { type: "f", value: 0 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float sides;", "uniform float angle;", "varying vec2 vUv;", "void main() {", "vec2 p = vUv - 0.5;", "float r = length(p);", "float a = atan(p.y, p.x) + angle;", "float tau = 2. * 3.1416 ;", "a = mod(a, tau/sides);", "a = abs(a - tau/sides/2.) ;", "p = r * vec2(cos(a), sin(a));", "vec4 color = texture2D(tDiffuse, p + 0.5);", "gl_FragColor = color;", "}"].join("\n") }, t.a = i.KaleidoShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.LuminosityShader = { uniforms: { tDiffuse: { type: "t", value: null } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "vec3 luma = vec3( 0.299, 0.587, 0.114 );", "float v = dot( texel.xyz, luma );", "gl_FragColor = vec4( v, v, v, texel.w );", "}"].join("\n") }, t.a = i.LuminosityShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.MTLLoader = function(e2) {
          this.manager = void 0 !== e2 ? e2 : i.v;
        }, i.MTLLoader.prototype = { constructor: i.MTLLoader, load: function(e2, t2, r2, n) {
          var o = this, a = new i._54(this.manager);
          a.setPath(this.path), a.load(e2, function(e3) {
            t2(o.parse(e3));
          }, r2, n);
        }, setPath: function(e2) {
          this.path = e2;
        }, setBaseUrl: function(e2) {
          this.baseUrl = e2;
        }, setCrossOrigin: function(e2) {
          this.crossOrigin = e2;
        }, setMaterialOptions: function(e2) {
          this.materialOptions = e2;
        }, parse: function(e2) {
          for (var t2 = e2.split("\n"), r2 = {}, n = /\s+/, o = {}, a = 0; a < t2.length; a++) {
            var s = t2[a];
            if (s = s.trim(), 0 !== s.length && "#" !== s.charAt(0)) {
              var c = s.indexOf(" "), l = c >= 0 ? s.substring(0, c) : s;
              l = l.toLowerCase();
              var u = c >= 0 ? s.substring(c + 1) : "";
              if (u = u.trim(), "newmtl" === l)
                r2 = { name: u }, o[u] = r2;
              else if (r2)
                if ("ka" === l || "kd" === l || "ks" === l) {
                  var h = u.split(n, 3);
                  r2[l] = [parseFloat(h[0]), parseFloat(h[1]), parseFloat(h[2])];
                } else
                  r2[l] = u;
            }
          }
          var d = new i.MTLLoader.MaterialCreator(this.baseUrl, this.materialOptions);
          return d.setCrossOrigin(this.crossOrigin), d.setManager(this.manager), d.setMaterials(o), d;
        } }, i.MTLLoader.MaterialCreator = function(e2, t2) {
          this.baseUrl = e2, this.options = t2, this.materialsInfo = {}, this.materials = {}, this.materialsArray = [], this.nameLookup = {}, this.side = this.options && this.options.side ? this.options.side : i.L, this.wrap = this.options && this.options.wrap ? this.options.wrap : i._27;
        }, i.MTLLoader.MaterialCreator.prototype = { constructor: i.MTLLoader.MaterialCreator, setCrossOrigin: function(e2) {
          this.crossOrigin = e2;
        }, setManager: function(e2) {
          this.manager = e2;
        }, setMaterials: function(e2) {
          this.materialsInfo = this.convert(e2), this.materials = {}, this.materialsArray = [], this.nameLookup = {};
        }, convert: function(e2) {
          if (!this.options)
            return e2;
          var t2 = {};
          for (var r2 in e2) {
            var i2 = e2[r2], n = {};
            t2[r2] = n;
            for (var o in i2) {
              var a = true, s = i2[o], c = o.toLowerCase();
              switch (c) {
                case "kd":
                case "ka":
                case "ks":
                  this.options && this.options.normalizeRGB && (s = [s[0] / 255, s[1] / 255, s[2] / 255]), this.options && this.options.ignoreZeroRGBs && 0 === s[0] && 0 === s[1] && 0 === s[1] && (a = false);
              }
              a && (n[c] = s);
            }
          }
          return t2;
        }, preload: function() {
          for (var e2 in this.materialsInfo)
            this.create(e2);
        }, getIndex: function(e2) {
          return this.nameLookup[e2];
        }, getAsArray: function() {
          var e2 = 0;
          for (var t2 in this.materialsInfo)
            this.materialsArray[e2] = this.create(t2), this.nameLookup[t2] = e2, e2++;
          return this.materialsArray;
        }, create: function(e2) {
          return void 0 === this.materials[e2] && this.createMaterial_(e2), this.materials[e2];
        }, createMaterial_: function(e2) {
          var t2 = this.materialsInfo[e2], r2 = { name: e2, side: this.side };
          for (var n in t2) {
            var o = t2[n];
            if ("" !== o)
              switch (n.toLowerCase()) {
                case "kd":
                  r2.color = new i.m().fromArray(o);
                  break;
                case "ks":
                  r2.specular = new i.m().fromArray(o);
                  break;
                case "map_kd":
                  r2.map = this.loadTexture(this.baseUrl + o), r2.map.wrapS = this.wrap, r2.map.wrapT = this.wrap;
                  break;
                case "ns":
                  r2.shininess = parseFloat(o);
                  break;
                case "d":
                  o < 1 && (r2.opacity = o, r2.transparent = true);
                  break;
                case "Tr":
                  o > 0 && (r2.opacity = 1 - o, r2.transparent = true);
                  break;
                case "map_bump":
                case "bump":
                  if (r2.bumpMap)
                    break;
                  r2.bumpMap = this.loadTexture(this.baseUrl + o), r2.bumpMap.wrapS = this.wrap, r2.bumpMap.wrapT = this.wrap;
              }
          }
          return this.materials[e2] = new i._7(r2), this.materials[e2];
        }, loadTexture: function(e2, t2, r2, n, o) {
          var a, s = i.W.Handlers.get(e2), c = void 0 !== this.manager ? this.manager : i.v;
          return null === s && (s = new i._42(c)), s.setCrossOrigin && s.setCrossOrigin(this.crossOrigin), a = s.load(e2, r2, n, o), void 0 !== t2 && (a.mapping = t2), a;
        } }, Object.assign(i.MTLLoader.prototype, i.C.prototype), t.a = i.MTLLoader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.MarchingCubes = function(e2, t2, r2, n) {
          i.S.call(this, t2), this.enableUvs = void 0 !== r2 && r2, this.enableColors = void 0 !== n && n, this.init = function(e3) {
            this.resolution = e3, this.isolation = 80, this.size = e3, this.size2 = this.size * this.size, this.size3 = this.size2 * this.size, this.halfsize = this.size / 2, this.delta = 2 / this.size, this.yd = this.size, this.zd = this.size2, this.field = new Float32Array(this.size3), this.normal_cache = new Float32Array(3 * this.size3), this.vlist = new Float32Array(36), this.nlist = new Float32Array(36), this.maxCount = 4096, this.count = 0, this.hasPositions = false, this.hasNormals = false, this.hasColors = false, this.hasUvs = false, this.positionArray = new Float32Array(3 * this.maxCount), this.normalArray = new Float32Array(3 * this.maxCount), this.enableUvs && (this.uvArray = new Float32Array(2 * this.maxCount)), this.enableColors && (this.colorArray = new Float32Array(3 * this.maxCount));
          }, this.lerp = function(e3, t3, r3) {
            return e3 + (t3 - e3) * r3;
          }, this.VIntX = function(e3, t3, r3, i2, n2, o, a, s, c, l) {
            var u = (n2 - c) / (l - c), h = this.normal_cache;
            t3[i2] = o + u * this.delta, t3[i2 + 1] = a, t3[i2 + 2] = s, r3[i2] = this.lerp(h[e3], h[e3 + 3], u), r3[i2 + 1] = this.lerp(h[e3 + 1], h[e3 + 4], u), r3[i2 + 2] = this.lerp(h[e3 + 2], h[e3 + 5], u);
          }, this.VIntY = function(e3, t3, r3, i2, n2, o, a, s, c, l) {
            var u = (n2 - c) / (l - c), h = this.normal_cache;
            t3[i2] = o, t3[i2 + 1] = a + u * this.delta, t3[i2 + 2] = s;
            var d = e3 + 3 * this.yd;
            r3[i2] = this.lerp(h[e3], h[d], u), r3[i2 + 1] = this.lerp(h[e3 + 1], h[d + 1], u), r3[i2 + 2] = this.lerp(h[e3 + 2], h[d + 2], u);
          }, this.VIntZ = function(e3, t3, r3, i2, n2, o, a, s, c, l) {
            var u = (n2 - c) / (l - c), h = this.normal_cache;
            t3[i2] = o, t3[i2 + 1] = a, t3[i2 + 2] = s + u * this.delta;
            var d = e3 + 3 * this.zd;
            r3[i2] = this.lerp(h[e3], h[d], u), r3[i2 + 1] = this.lerp(h[e3 + 1], h[d + 1], u), r3[i2 + 2] = this.lerp(h[e3 + 2], h[d + 2], u);
          }, this.compNorm = function(e3) {
            var t3 = 3 * e3;
            0 === this.normal_cache[t3] && (this.normal_cache[t3] = this.field[e3 - 1] - this.field[e3 + 1], this.normal_cache[t3 + 1] = this.field[e3 - this.yd] - this.field[e3 + this.yd], this.normal_cache[t3 + 2] = this.field[e3 - this.zd] - this.field[e3 + this.zd]);
          }, this.polygonize = function(e3, t3, r3, n2, o, a) {
            var s = n2 + 1, c = n2 + this.yd, l = n2 + this.zd, u = s + this.yd, h = s + this.zd, d = n2 + this.yd + this.zd, p = s + this.yd + this.zd, f = 0, m = this.field[n2], v = this.field[s], g = this.field[c], y = this.field[u], x = this.field[l], _ = this.field[h], b = this.field[d], w = this.field[p];
            m < o && (f |= 1), v < o && (f |= 2), g < o && (f |= 8), y < o && (f |= 4), x < o && (f |= 16), _ < o && (f |= 32), b < o && (f |= 128), w < o && (f |= 64);
            var M = i.edgeTable[f];
            if (0 === M)
              return 0;
            var E = this.delta, S = e3 + E, T = t3 + E, A = r3 + E;
            1 & M && (this.compNorm(n2), this.compNorm(s), this.VIntX(3 * n2, this.vlist, this.nlist, 0, o, e3, t3, r3, m, v)), 2 & M && (this.compNorm(s), this.compNorm(u), this.VIntY(3 * s, this.vlist, this.nlist, 3, o, S, t3, r3, v, y)), 4 & M && (this.compNorm(c), this.compNorm(u), this.VIntX(3 * c, this.vlist, this.nlist, 6, o, e3, T, r3, g, y)), 8 & M && (this.compNorm(n2), this.compNorm(c), this.VIntY(3 * n2, this.vlist, this.nlist, 9, o, e3, t3, r3, m, g)), 16 & M && (this.compNorm(l), this.compNorm(h), this.VIntX(3 * l, this.vlist, this.nlist, 12, o, e3, t3, A, x, _)), 32 & M && (this.compNorm(h), this.compNorm(p), this.VIntY(3 * h, this.vlist, this.nlist, 15, o, S, t3, A, _, w)), 64 & M && (this.compNorm(d), this.compNorm(p), this.VIntX(3 * d, this.vlist, this.nlist, 18, o, e3, T, A, b, w)), 128 & M && (this.compNorm(l), this.compNorm(d), this.VIntY(3 * l, this.vlist, this.nlist, 21, o, e3, t3, A, x, b)), 256 & M && (this.compNorm(n2), this.compNorm(l), this.VIntZ(3 * n2, this.vlist, this.nlist, 24, o, e3, t3, r3, m, x)), 512 & M && (this.compNorm(s), this.compNorm(h), this.VIntZ(3 * s, this.vlist, this.nlist, 27, o, S, t3, r3, v, _)), 1024 & M && (this.compNorm(u), this.compNorm(p), this.VIntZ(3 * u, this.vlist, this.nlist, 30, o, S, T, r3, y, w)), 2048 & M && (this.compNorm(c), this.compNorm(d), this.VIntZ(3 * c, this.vlist, this.nlist, 33, o, e3, T, r3, g, b)), f <<= 4;
            for (var L, C, R, P = 0, D = 0; -1 != i.triTable[f + D]; )
              L = f + D, C = L + 1, R = L + 2, this.posnormtriv(this.vlist, this.nlist, 3 * i.triTable[L], 3 * i.triTable[C], 3 * i.triTable[R], a), D += 3, P++;
            return P;
          }, this.posnormtriv = function(e3, t3, r3, i2, n2, o) {
            var a = 3 * this.count;
            if (this.positionArray[a] = e3[r3], this.positionArray[a + 1] = e3[r3 + 1], this.positionArray[a + 2] = e3[r3 + 2], this.positionArray[a + 3] = e3[i2], this.positionArray[a + 4] = e3[i2 + 1], this.positionArray[a + 5] = e3[i2 + 2], this.positionArray[a + 6] = e3[n2], this.positionArray[a + 7] = e3[n2 + 1], this.positionArray[a + 8] = e3[n2 + 2], this.normalArray[a] = t3[r3], this.normalArray[a + 1] = t3[r3 + 1], this.normalArray[a + 2] = t3[r3 + 2], this.normalArray[a + 3] = t3[i2], this.normalArray[a + 4] = t3[i2 + 1], this.normalArray[a + 5] = t3[i2 + 2], this.normalArray[a + 6] = t3[n2], this.normalArray[a + 7] = t3[n2 + 1], this.normalArray[a + 8] = t3[n2 + 2], this.enableUvs) {
              var s = 2 * this.count;
              this.uvArray[s] = e3[r3], this.uvArray[s + 1] = e3[r3 + 2], this.uvArray[s + 2] = e3[i2], this.uvArray[s + 3] = e3[i2 + 2], this.uvArray[s + 4] = e3[n2], this.uvArray[s + 5] = e3[n2 + 2];
            }
            this.enableColors && (this.colorArray[a] = e3[r3], this.colorArray[a + 1] = e3[r3 + 1], this.colorArray[a + 2] = e3[r3 + 2], this.colorArray[a + 3] = e3[i2], this.colorArray[a + 4] = e3[i2 + 1], this.colorArray[a + 5] = e3[i2 + 2], this.colorArray[a + 6] = e3[n2], this.colorArray[a + 7] = e3[n2 + 1], this.colorArray[a + 8] = e3[n2 + 2]), this.count += 3, this.count >= this.maxCount - 3 && (this.hasPositions = true, this.hasNormals = true, this.enableUvs && (this.hasUvs = true), this.enableColors && (this.hasColors = true), o(this));
          }, this.begin = function() {
            this.count = 0, this.hasPositions = false, this.hasNormals = false, this.hasUvs = false, this.hasColors = false;
          }, this.end = function(e3) {
            if (0 !== this.count) {
              for (var t3 = 3 * this.count; t3 < this.positionArray.length; t3++)
                this.positionArray[t3] = 0;
              this.hasPositions = true, this.hasNormals = true, this.enableUvs && (this.hasUvs = true), this.enableColors && (this.hasColors = true), e3(this);
            }
          }, this.addBall = function(e3, t3, r3, i2, n2) {
            var o = this.size * Math.sqrt(i2 / n2), a = r3 * this.size, s = t3 * this.size, c = e3 * this.size, l = Math.floor(a - o);
            l < 1 && (l = 1);
            var u = Math.floor(a + o);
            u > this.size - 1 && (u = this.size - 1);
            var h = Math.floor(s - o);
            h < 1 && (h = 1);
            var d = Math.floor(s + o);
            d > this.size - 1 && (d = this.size - 1);
            var p = Math.floor(c - o);
            p < 1 && (p = 1);
            var f = Math.floor(c + o);
            f > this.size - 1 && (f = this.size - 1);
            var m, v, g, y, x, _, b, w, M, E, S;
            for (g = l; g < u; g++)
              for (x = this.size2 * g, w = g / this.size - r3, M = w * w, v = h; v < d; v++)
                for (y = x + this.size * v, b = v / this.size - t3, E = b * b, m = p; m < f; m++)
                  _ = m / this.size - e3, (S = i2 / (1e-6 + _ * _ + E + M) - n2) > 0 && (this.field[y + m] += S);
          }, this.addPlaneX = function(e3, t3) {
            var r3, i2, n2, o, a, s, c, l = this.size, u = this.yd, h = this.zd, d = this.field, p = l * Math.sqrt(e3 / t3);
            for (p > l && (p = l), r3 = 0; r3 < p; r3++)
              if (s = r3 / l, o = s * s, (a = e3 / (1e-4 + o) - t3) > 0)
                for (i2 = 0; i2 < l; i2++)
                  for (c = r3 + i2 * u, n2 = 0; n2 < l; n2++)
                    d[h * n2 + c] += a;
          }, this.addPlaneY = function(e3, t3) {
            var r3, i2, n2, o, a, s, c, l, u = this.size, h = this.yd, d = this.zd, p = this.field, f = u * Math.sqrt(e3 / t3);
            for (f > u && (f = u), i2 = 0; i2 < f; i2++)
              if (s = i2 / u, o = s * s, (a = e3 / (1e-4 + o) - t3) > 0)
                for (c = i2 * h, r3 = 0; r3 < u; r3++)
                  for (l = c + r3, n2 = 0; n2 < u; n2++)
                    p[d * n2 + l] += a;
          }, this.addPlaneZ = function(e3, t3) {
            var r3, i2, n2, o, a, s, c, l, u = this.size, h = this.yd, d = this.zd, p = this.field, f = u * Math.sqrt(e3 / t3);
            for (f > u && (f = u), n2 = 0; n2 < f; n2++)
              if (s = n2 / u, o = s * s, (a = e3 / (1e-4 + o) - t3) > 0)
                for (c = d * n2, i2 = 0; i2 < u; i2++)
                  for (l = c + i2 * h, r3 = 0; r3 < u; r3++)
                    p[l + r3] += a;
          }, this.reset = function() {
            var e3;
            for (e3 = 0; e3 < this.size3; e3++)
              this.normal_cache[3 * e3] = 0, this.field[e3] = 0;
          }, this.render = function(e3) {
            this.begin();
            for (var t3 = this.size - 2, r3 = 1; r3 < t3; r3++)
              for (var i2 = this.size2 * r3, n2 = (r3 - this.halfsize) / this.halfsize, o = 1; o < t3; o++)
                for (var a = i2 + this.size * o, s = (o - this.halfsize) / this.halfsize, c = 1; c < t3; c++) {
                  var l = (c - this.halfsize) / this.halfsize, u = a + c;
                  this.polygonize(l, s, n2, u, this.isolation, e3);
                }
            this.end(e3);
          }, this.generateGeometry = function() {
            var e3 = 0, t3 = new i.N(), r3 = [], n2 = function(n3) {
              var o, a, s, c, l, u, h, d, p, f, m, v, g, y;
              for (o = 0; o < n3.count; o++)
                d = 3 * o, p = d + 1, f = d + 2, a = n3.positionArray[d], s = n3.positionArray[p], c = n3.positionArray[f], l = new i._49(a, s, c), a = n3.normalArray[d], s = n3.normalArray[p], c = n3.normalArray[f], u = new i._49(a, s, c), u.normalize(), t3.vertices.push(l), r3.push(u);
              for (y = n3.count / 3, o = 0; o < y; o++)
                d = 3 * (e3 + o), p = d + 1, f = d + 2, m = r3[d], v = r3[p], g = r3[f], h = new i.E(d, p, f, [m, v, g]), t3.faces.push(h);
              e3 += y, n3.count = 0;
            };
            return this.render(n2), t3;
          }, this.init(e2);
        }, i.MarchingCubes.prototype = Object.create(i.S.prototype), i.MarchingCubes.prototype.constructor = i.MarchingCubes, i.edgeTable = new Int32Array([0, 265, 515, 778, 1030, 1295, 1541, 1804, 2060, 2309, 2575, 2822, 3082, 3331, 3593, 3840, 400, 153, 915, 666, 1430, 1183, 1941, 1692, 2460, 2197, 2975, 2710, 3482, 3219, 3993, 3728, 560, 825, 51, 314, 1590, 1855, 1077, 1340, 2620, 2869, 2111, 2358, 3642, 3891, 3129, 3376, 928, 681, 419, 170, 1958, 1711, 1445, 1196, 2988, 2725, 2479, 2214, 4010, 3747, 3497, 3232, 1120, 1385, 1635, 1898, 102, 367, 613, 876, 3180, 3429, 3695, 3942, 2154, 2403, 2665, 2912, 1520, 1273, 2035, 1786, 502, 255, 1013, 764, 3580, 3317, 4095, 3830, 2554, 2291, 3065, 2800, 1616, 1881, 1107, 1370, 598, 863, 85, 348, 3676, 3925, 3167, 3414, 2650, 2899, 2137, 2384, 1984, 1737, 1475, 1226, 966, 719, 453, 204, 4044, 3781, 3535, 3270, 3018, 2755, 2505, 2240, 2240, 2505, 2755, 3018, 3270, 3535, 3781, 4044, 204, 453, 719, 966, 1226, 1475, 1737, 1984, 2384, 2137, 2899, 2650, 3414, 3167, 3925, 3676, 348, 85, 863, 598, 1370, 1107, 1881, 1616, 2800, 3065, 2291, 2554, 3830, 4095, 3317, 3580, 764, 1013, 255, 502, 1786, 2035, 1273, 1520, 2912, 2665, 2403, 2154, 3942, 3695, 3429, 3180, 876, 613, 367, 102, 1898, 1635, 1385, 1120, 3232, 3497, 3747, 4010, 2214, 2479, 2725, 2988, 1196, 1445, 1711, 1958, 170, 419, 681, 928, 3376, 3129, 3891, 3642, 2358, 2111, 2869, 2620, 1340, 1077, 1855, 1590, 314, 51, 825, 560, 3728, 3993, 3219, 3482, 2710, 2975, 2197, 2460, 1692, 1941, 1183, 1430, 666, 915, 153, 400, 3840, 3593, 3331, 3082, 2822, 2575, 2309, 2060, 1804, 1541, 1295, 1030, 778, 515, 265, 0]), i.triTable = new Int32Array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]), t.a = i.MarchingCubes;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.MaskPass = function(e2, t2) {
          this.scene = e2, this.camera = t2, this.enabled = true, this.clear = true, this.needsSwap = false, this.inverse = false;
        }, i.MaskPass.prototype = { render: function(e2, t2, r2, i2) {
          var n = e2.context;
          n.colorMask(false, false, false, false), n.depthMask(false);
          var o, a;
          this.inverse ? (o = 0, a = 1) : (o = 1, a = 0), n.enable(n.STENCIL_TEST), n.stencilOp(n.REPLACE, n.REPLACE, n.REPLACE), n.stencilFunc(n.ALWAYS, o, 4294967295), n.clearStencil(a), e2.render(this.scene, this.camera, r2, this.clear), e2.render(this.scene, this.camera, t2, this.clear), n.colorMask(true, true, true, true), n.depthMask(true), n.stencilFunc(n.EQUAL, 1, 4294967295), n.stencilOp(n.KEEP, n.KEEP, n.KEEP);
        } }, i.ClearMaskPass = function() {
          this.enabled = true;
        }, i.ClearMaskPass.prototype = { render: function(e2, t2, r2, i2) {
          var n = e2.context;
          n.disable(n.STENCIL_TEST);
        } }, t.a = i.MaskPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.MirrorShader = { uniforms: { tDiffuse: { type: "t", value: null }, side: { type: "i", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform int side;", "varying vec2 vUv;", "void main() {", "vec2 p = vUv;", "if (side == 0){", "if (p.x > 0.5) p.x = 1.0 - p.x;", "}else if (side == 1){", "if (p.x < 0.5) p.x = 1.0 - p.x;", "}else if (side == 2){", "if (p.y < 0.5) p.y = 1.0 - p.y;", "}else if (side == 3){", "if (p.y > 0.5) p.y = 1.0 - p.y;", "} ", "vec4 color = texture2D(tDiffuse, p);", "gl_FragColor = color;", "}"].join("\n") }, t.a = i.MirrorShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.NormalMapShader = { uniforms: { heightMap: { type: "t", value: null }, resolution: { type: "v2", value: new i._48(512, 512) }, scale: { type: "v2", value: new i._48(1, 1) }, height: { type: "f", value: 0.05 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float height;", "uniform vec2 resolution;", "uniform sampler2D heightMap;", "varying vec2 vUv;", "void main() {", "float val = texture2D( heightMap, vUv ).x;", "float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;", "float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;", "gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );", "}"].join("\n") }, t.a = i.NormalMapShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.OBJLoader = function(e2) {
          this.manager = void 0 !== e2 ? e2 : i.v;
        }, i.OBJLoader.prototype = { constructor: i.OBJLoader, load: function(e2, t2, r2, n) {
          var o = this;
          new i.F(o.manager).load(e2, function(e3) {
            t2(o.parse(e3));
          }, r2, n);
        }, parse: function(e2) {
          function t2(e3) {
            var t3 = parseInt(e3);
            return 3 * (t3 >= 0 ? t3 - 1 : t3 + p.length / 3);
          }
          function r2(e3) {
            var t3 = parseInt(e3);
            return 3 * (t3 >= 0 ? t3 - 1 : t3 + f.length / 3);
          }
          function n(e3) {
            var t3 = parseInt(e3);
            return 2 * (t3 >= 0 ? t3 - 1 : t3 + m.length / 2);
          }
          function o(e3, t3, r3) {
            u.vertices.push(p[e3], p[e3 + 1], p[e3 + 2], p[t3], p[t3 + 1], p[t3 + 2], p[r3], p[r3 + 1], p[r3 + 2]);
          }
          function a(e3, t3, r3) {
            u.normals.push(f[e3], f[e3 + 1], f[e3 + 2], f[t3], f[t3 + 1], f[t3 + 2], f[r3], f[r3 + 1], f[r3 + 2]);
          }
          function s(e3, t3, r3) {
            u.uvs.push(m[e3], m[e3 + 1], m[t3], m[t3 + 1], m[r3], m[r3 + 1]);
          }
          function c(e3, i2, c2, l2, u2, h2, d2, p2, f2, m2, v2, g2) {
            var y2, x2 = t2(e3), _2 = t2(i2), b2 = t2(c2);
            void 0 === l2 ? o(x2, _2, b2) : (y2 = t2(l2), o(x2, _2, y2), o(_2, b2, y2)), void 0 !== u2 && (x2 = n(u2), _2 = n(h2), b2 = n(d2), void 0 === l2 ? s(x2, _2, b2) : (y2 = n(p2), s(x2, _2, y2), s(_2, b2, y2))), void 0 !== f2 && (x2 = r2(f2), _2 = r2(m2), b2 = r2(v2), void 0 === l2 ? a(x2, _2, b2) : (y2 = r2(g2), a(x2, _2, y2), a(_2, b2, y2)));
          }
          console.time(".obj loading time");
          var l, u, h, d = [];
          false === /^o /gm.test(e2) && (u = { vertices: [], normals: [], uvs: [] }, h = { name: "" }, l = { name: "", geometry: u, material: h }, d.push(l));
          for (var p = [], f = [], m = [], v = /v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/, g = /vn( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/, y = /vt( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/, x = /f( +-?\d+)( +-?\d+)( +-?\d+)( +-?\d+)?/, _ = /f( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+))?/, b = /f( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))( +(-?\d+)\/(-?\d+)\/(-?\d+))?/, w = /f( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))( +(-?\d+)\/\/(-?\d+))?/, M = e2.split("\n"), E = 0; E < M.length; E++) {
            var S = M[E];
            S = S.trim();
            var T;
            0 !== S.length && "#" !== S.charAt(0) && (null !== (T = v.exec(S)) ? p.push(parseFloat(T[1]), parseFloat(T[2]), parseFloat(T[3])) : null !== (T = g.exec(S)) ? f.push(parseFloat(T[1]), parseFloat(T[2]), parseFloat(T[3])) : null !== (T = y.exec(S)) ? m.push(parseFloat(T[1]), parseFloat(T[2])) : null !== (T = x.exec(S)) ? c(T[1], T[2], T[3], T[4]) : null !== (T = _.exec(S)) ? c(T[2], T[5], T[8], T[11], T[3], T[6], T[9], T[12]) : null !== (T = b.exec(S)) ? c(T[2], T[6], T[10], T[14], T[3], T[7], T[11], T[15], T[4], T[8], T[12], T[16]) : null !== (T = w.exec(S)) ? c(T[2], T[5], T[8], T[11], void 0, void 0, void 0, void 0, T[3], T[6], T[9], T[12]) : /^o /.test(S) ? (u = { vertices: [], normals: [], uvs: [] }, h = { name: "" }, l = { name: S.substring(2).trim(), geometry: u, material: h }, d.push(l)) : /^g /.test(S) || (/^usemtl /.test(S) ? h.name = S.substring(7).trim() : /^mtllib /.test(S) || /^s /.test(S)));
          }
          var A, L = new i._12();
          for (E = 0, A = d.length; E < A; E++) {
            l = d[E], u = l.geometry;
            var C = new i.k();
            C.addAttribute("position", new i.j(new Float32Array(u.vertices), 3)), u.normals.length > 0 && C.addAttribute("normal", new i.j(new Float32Array(u.normals), 3)), u.uvs.length > 0 && C.addAttribute("uv", new i.j(new Float32Array(u.uvs), 2)), h = new i._6({ color: 16711680 }), h.name = l.material.name;
            var R = new i._3(C, h);
            R.name = l.name, L.add(R);
          }
          return console.timeEnd(".obj loading time"), L;
        } }, t.a = i.OBJLoader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i._34.ocean_sim_vertex = { varying: { vUV: { type: "v2" } }, vertexShader: ["varying vec2 vUV;", "void main (void) {", "vUV = position.xy * 0.5 + 0.5;", "gl_Position = vec4(position, 1.0 );", "}"].join("\n") }, i._34.ocean_subtransform = { uniforms: { u_input: { type: "t", value: null }, u_transformSize: { type: "f", value: 512 }, u_subtransformSize: { type: "f", value: 250 } }, varying: { vUV: { type: "v2" } }, fragmentShader: ["precision highp float;", "const float PI = 3.14159265359;", "uniform sampler2D u_input;", "uniform float u_transformSize;", "uniform float u_subtransformSize;", "varying vec2 vUV;", "vec2 multiplyComplex (vec2 a, vec2 b) {", "return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);", "}", "void main (void) {", "#ifdef HORIZONTAL", "float index = vUV.x * u_transformSize - 0.5;", "#else", "float index = vUV.y * u_transformSize - 0.5;", "#endif", "float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);", "#ifdef HORIZONTAL", "vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;", "vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;", "#else", "vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;", "vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;", "#endif", "float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);", "vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));", "vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);", "vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);", "gl_FragColor = vec4(outputA, outputB);", "}"].join("\n") }, i._34.ocean_initial_spectrum = { uniforms: { u_wind: { type: "v2", value: new i._48(10, 10) }, u_resolution: { type: "f", value: 512 }, u_size: { type: "f", value: 250 } }, fragmentShader: ["precision highp float;", "const float PI = 3.14159265359;", "const float G = 9.81;", "const float KM = 370.0;", "const float CM = 0.23;", "uniform vec2 u_wind;", "uniform float u_resolution;", "uniform float u_size;", "float square (float x) {", "return x * x;", "}", "float omega (float k) {", "return sqrt(G * k * (1.0 + square(k / KM)));", "}", "float tanh (float x) {", "return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));", "}", "void main (void) {", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 K = (2.0 * PI * vec2(n, m)) / u_size;", "float k = length(K);", "float l_wind = length(u_wind);", "float Omega = 0.84;", "float kp = G * square(Omega / l_wind);", "float c = omega(k) / k;", "float cp = omega(kp) / kp;", "float Lpm = exp(-1.25 * square(kp / k));", "float gamma = 1.7;", "float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));", "float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));", "float Jp = pow(gamma, Gamma);", "float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));", "float alphap = 0.006 * sqrt(Omega);", "float Bl = 0.5 * alphap * cp / c * Fp;", "float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);", "float uStar = 0.41 * l_wind / log(10.0 / z0);", "float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));", "float Fm = exp(-0.25 * square(k / KM - 1.0));", "float Bh = 0.5 * alpham * CM / c * Fm * Lpm;", "float a0 = log(2.0) / 4.0;", "float am = 0.13 * uStar / CM;", "float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));", "float cosPhi = dot(normalize(u_wind), normalize(K));", "float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));", "float dk = 2.0 * PI / u_size;", "float h = sqrt(S / 2.0) * dk;", "if (K.x == 0.0 && K.y == 0.0) {", "h = 0.0;", "}", "gl_FragColor = vec4(h, 0.0, 0.0, 0.0);", "}"].join("\n") }, i._34.ocean_phase = { uniforms: { u_phases: { type: "t", value: null }, u_deltaTime: { type: "f", value: null }, u_resolution: { type: "f", value: null }, u_size: { type: "f", value: null } }, varying: { vUV: { type: "v2" } }, fragmentShader: ["precision highp float;", "const float PI = 3.14159265359;", "const float G = 9.81;", "const float KM = 370.0;", "varying vec2 vUV;", "uniform sampler2D u_phases;", "uniform float u_deltaTime;", "uniform float u_resolution;", "uniform float u_size;", "float omega (float k) {", "return sqrt(G * k * (1.0 + k * k / KM * KM));", "}", "void main (void) {", "float deltaTime = 1.0 / 60.0;", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;", "float phase = texture2D(u_phases, vUV).r;", "float deltaPhase = omega(length(waveVector)) * u_deltaTime;", "phase = mod(phase + deltaPhase, 2.0 * PI);", "gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);", "}"].join("\n") }, i._34.ocean_spectrum = { uniforms: { u_size: { type: "f", value: null }, u_resolution: { type: "f", value: null }, u_choppiness: { type: "f", value: null }, u_phases: { type: "t", value: null }, u_initialSpectrum: { type: "t", value: null } }, varying: { vUV: { type: "v2" } }, fragmentShader: ["precision highp float;", "const float PI = 3.14159265359;", "const float G = 9.81;", "const float KM = 370.0;", "varying vec2 vUV;", "uniform float u_size;", "uniform float u_resolution;", "uniform float u_choppiness;", "uniform sampler2D u_phases;", "uniform sampler2D u_initialSpectrum;", "vec2 multiplyComplex (vec2 a, vec2 b) {", "return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);", "}", "vec2 multiplyByI (vec2 z) {", "return vec2(-z[1], z[0]);", "}", "float omega (float k) {", "return sqrt(G * k * (1.0 + k * k / KM * KM));", "}", "void main (void) {", "vec2 coordinates = gl_FragCoord.xy - 0.5;", "float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;", "float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;", "vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;", "float phase = texture2D(u_phases, vUV).r;", "vec2 phaseVector = vec2(cos(phase), sin(phase));", "vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;", "vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;", "h0Star.y *= -1.0;", "vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));", "vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;", "vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;", "if (waveVector.x == 0.0 && waveVector.y == 0.0) {", "h = vec2(0.0);", "hX = vec2(0.0);", "hZ = vec2(0.0);", "}", "gl_FragColor = vec4(hX + multiplyByI(h), hZ);", "}"].join("\n") }, i._34.ocean_normals = { uniforms: { u_displacementMap: { type: "t", value: null }, u_resolution: { type: "f", value: null }, u_size: { type: "f", value: null } }, varying: { vUV: { type: "v2" } }, fragmentShader: ["precision highp float;", "varying vec2 vUV;", "uniform sampler2D u_displacementMap;", "uniform float u_resolution;", "uniform float u_size;", "void main (void) {", "float texel = 1.0 / u_resolution;", "float texelSize = u_size / u_resolution;", "vec3 center = texture2D(u_displacementMap, vUV).rgb;", "vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;", "vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;", "vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;", "vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;", "vec3 topRight = cross(right, top);", "vec3 topLeft = cross(top, left);", "vec3 bottomLeft = cross(left, bottom);", "vec3 bottomRight = cross(bottom, right);", "gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);", "}"].join("\n") }, i._34.ocean_main = { uniforms: { u_displacementMap: { type: "t", value: null }, u_normalMap: { type: "t", value: null }, u_geometrySize: { type: "f", value: null }, u_size: { type: "f", value: null }, u_projectionMatrix: { type: "m4", value: null }, u_viewMatrix: { type: "m4", value: null }, u_cameraPosition: { type: "v3", value: null }, u_skyColor: { type: "v3", value: null }, u_oceanColor: { type: "v3", value: null }, u_sunDirection: { type: "v3", value: null }, u_exposure: { type: "f", value: null } }, varying: { vPos: { type: "v3" }, vUV: { type: "v2" } }, vertexShader: ["precision highp float;", "varying vec3 vPos;", "varying vec2 vUV;", "uniform mat4 u_projectionMatrix;", "uniform mat4 u_viewMatrix;", "uniform float u_size;", "uniform float u_geometrySize;", "uniform sampler2D u_displacementMap;", "void main (void) {", "vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);", "vPos = newPos;", "vUV = uv;", "gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);", "}"].join("\n"), fragmentShader: ["precision highp float;", "varying vec3 vPos;", "varying vec2 vUV;", "uniform sampler2D u_displacementMap;", "uniform sampler2D u_normalMap;", "uniform vec3 u_cameraPosition;", "uniform vec3 u_oceanColor;", "uniform vec3 u_skyColor;", "uniform vec3 u_sunDirection;", "uniform float u_exposure;", "vec3 hdr (vec3 color, float exposure) {", "return 1.0 - exp(-color * exposure);", "}", "void main (void) {", "vec3 normal = texture2D(u_normalMap, vUV).rgb;", "vec3 view = normalize(u_cameraPosition - vPos);", "float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);", "vec3 sky = fresnel * u_skyColor;", "float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);", "vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;", "vec3 color = sky + water;", "gl_FragColor = vec4(hdr(color, u_exposure), 1.0);", "}"].join("\n") }, t.a = i._34;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.OrbitControls = function(e2, t2) {
          function r2() {
            return 2 * Math.PI / 60 / 60 * I.autoRotateSpeed;
          }
          function n() {
            return Math.pow(0.95, I.zoomSpeed);
          }
          function o(e3) {
            j.theta -= e3;
          }
          function a(e3) {
            j.phi -= e3;
          }
          function s(e3) {
            I.object instanceof i._16 ? V /= e3 : I.object instanceof i._14 ? (I.object.zoom = Math.max(I.minZoom, Math.min(I.maxZoom, I.object.zoom * e3)), I.object.updateProjectionMatrix(), W = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), I.enableZoom = false);
          }
          function c(e3) {
            I.object instanceof i._16 ? V *= e3 : I.object instanceof i._14 ? (I.object.zoom = Math.max(I.minZoom, Math.min(I.maxZoom, I.object.zoom / e3)), I.object.updateProjectionMatrix(), W = true) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), I.enableZoom = false);
          }
          function l(e3) {
            X.set(e3.clientX, e3.clientY);
          }
          function u(e3) {
            Q.set(e3.clientX, e3.clientY);
          }
          function h(e3) {
            Z.set(e3.clientX, e3.clientY);
          }
          function d(e3) {
            q.set(e3.clientX, e3.clientY), Y.subVectors(q, X);
            var t3 = I.domElement === document ? I.domElement.body : I.domElement;
            o(2 * Math.PI * Y.x / t3.clientWidth * I.rotateSpeed), a(2 * Math.PI * Y.y / t3.clientHeight * I.rotateSpeed), X.copy(q), I.update();
          }
          function p(e3) {
            $.set(e3.clientX, e3.clientY), ee.subVectors($, Q), ee.y > 0 ? s(n()) : ee.y < 0 && c(n()), Q.copy($), I.update();
          }
          function f(e3) {
            J.set(e3.clientX, e3.clientY), K.subVectors(J, Z), ie(K.x, K.y), Z.copy(J), I.update();
          }
          function m(e3) {
          }
          function v(e3) {
            var t3 = 0;
            void 0 !== e3.wheelDelta ? t3 = e3.wheelDelta : void 0 !== e3.detail && (t3 = -e3.detail), t3 > 0 ? c(n()) : t3 < 0 && s(n()), I.update();
          }
          function g(e3) {
            switch (e3.keyCode) {
              case I.keys.UP:
                ie(0, I.keyPanSpeed), I.update();
                break;
              case I.keys.BOTTOM:
                ie(0, -I.keyPanSpeed), I.update();
                break;
              case I.keys.LEFT:
                ie(I.keyPanSpeed, 0), I.update();
                break;
              case I.keys.RIGHT:
                ie(-I.keyPanSpeed, 0), I.update();
            }
          }
          function y(e3) {
            X.set(e3.touches[0].pageX, e3.touches[0].pageY);
          }
          function x(e3) {
            var t3 = e3.touches[0].pageX - e3.touches[1].pageX, r3 = e3.touches[0].pageY - e3.touches[1].pageY, i2 = Math.sqrt(t3 * t3 + r3 * r3);
            Q.set(0, i2);
          }
          function _(e3) {
            Z.set(e3.touches[0].pageX, e3.touches[0].pageY);
          }
          function b(e3) {
            q.set(e3.touches[0].pageX, e3.touches[0].pageY), Y.subVectors(q, X);
            var t3 = I.domElement === document ? I.domElement.body : I.domElement;
            o(2 * Math.PI * Y.x / t3.clientWidth * I.rotateSpeed), a(2 * Math.PI * Y.y / t3.clientHeight * I.rotateSpeed), X.copy(q), I.update();
          }
          function w(e3) {
            var t3 = e3.touches[0].pageX - e3.touches[1].pageX, r3 = e3.touches[0].pageY - e3.touches[1].pageY, i2 = Math.sqrt(t3 * t3 + r3 * r3);
            $.set(0, i2), ee.subVectors($, Q), ee.y > 0 ? c(n()) : ee.y < 0 && s(n()), Q.copy($), I.update();
          }
          function M(e3) {
            J.set(e3.touches[0].pageX, e3.touches[0].pageY), K.subVectors(J, Z), ie(K.x, K.y), Z.copy(J), I.update();
          }
          function E(e3) {
          }
          function S(e3) {
            if (false !== I.enabled) {
              if (e3.preventDefault(), e3.button === I.mouseButtons.ORBIT) {
                if (false === I.enableRotate)
                  return;
                l(e3), B = z.ROTATE;
              } else if (e3.button === I.mouseButtons.ZOOM) {
                if (false === I.enableZoom)
                  return;
                u(e3), B = z.DOLLY;
              } else if (e3.button === I.mouseButtons.PAN) {
                if (false === I.enablePan)
                  return;
                h(e3), B = z.PAN;
              }
              B !== z.NONE && (document.addEventListener("mousemove", T, false), document.addEventListener("mouseup", A, false), document.addEventListener("mouseout", A, false), I.dispatchEvent(N));
            }
          }
          function T(e3) {
            if (false !== I.enabled) {
              if (e3.preventDefault(), B === z.ROTATE) {
                if (false === I.enableRotate)
                  return;
                d(e3);
              } else if (B === z.DOLLY) {
                if (false === I.enableZoom)
                  return;
                p(e3);
              } else if (B === z.PAN) {
                if (false === I.enablePan)
                  return;
                f(e3);
              }
            }
          }
          function A(e3) {
            false !== I.enabled && (m(e3), document.removeEventListener("mousemove", T, false), document.removeEventListener("mouseup", A, false), document.removeEventListener("mouseout", A, false), I.dispatchEvent(F), B = z.NONE);
          }
          function L(e3) {
            false === I.enabled || false === I.enableZoom || B !== z.NONE && B !== z.ROTATE || (e3.preventDefault(), e3.stopPropagation(), v(e3), I.dispatchEvent(N), I.dispatchEvent(F));
          }
          function C(e3) {
            false !== I.enabled && false !== I.enableKeys && false !== I.enablePan && g(e3);
          }
          function R(e3) {
            if (false !== I.enabled) {
              switch (e3.touches.length) {
                case 1:
                  if (false === I.enableRotate)
                    return;
                  y(e3), B = z.TOUCH_ROTATE;
                  break;
                case 2:
                  if (false === I.enableZoom)
                    return;
                  x(e3), B = z.TOUCH_DOLLY;
                  break;
                case 3:
                  if (false === I.enablePan)
                    return;
                  _(e3), B = z.TOUCH_PAN;
                  break;
                default:
                  B = z.NONE;
              }
              B !== z.NONE && I.dispatchEvent(N);
            }
          }
          function P(e3) {
            if (false !== I.enabled)
              switch (e3.preventDefault(), e3.stopPropagation(), e3.touches.length) {
                case 1:
                  if (false === I.enableRotate)
                    return;
                  if (B !== z.TOUCH_ROTATE)
                    return;
                  b(e3);
                  break;
                case 2:
                  if (false === I.enableZoom)
                    return;
                  if (B !== z.TOUCH_DOLLY)
                    return;
                  w(e3);
                  break;
                case 3:
                  if (false === I.enablePan)
                    return;
                  if (B !== z.TOUCH_PAN)
                    return;
                  M(e3);
                  break;
                default:
                  B = z.NONE;
              }
          }
          function D(e3) {
            false !== I.enabled && (E(e3), I.dispatchEvent(F), B = z.NONE);
          }
          function U(e3) {
            e3.preventDefault();
          }
          this.object = e2, this.domElement = void 0 !== t2 ? t2 : document, this.enabled = true, this.target = new i._49(), this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = false, this.dampingFactor = 0.25, this.enableZoom = true, this.zoomSpeed = 1, this.enableRotate = true, this.rotateSpeed = 1, this.enablePan = true, this.keyPanSpeed = 7, this.autoRotate = false, this.autoRotateSpeed = 2, this.enableKeys = true, this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }, this.mouseButtons = { ORBIT: i.Y.LEFT, ZOOM: i.Y.MIDDLE, PAN: i.Y.RIGHT }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = function() {
            return H.phi;
          }, this.getAzimuthalAngle = function() {
            return H.theta;
          }, this.reset = function() {
            I.target.copy(I.target0), I.object.position.copy(I.position0), I.object.zoom = I.zoom0, I.object.updateProjectionMatrix(), I.dispatchEvent(O), I.update(), B = z.NONE;
          }, this.update = function() {
            var t3 = new i._49(), n2 = new i._18().setFromUnitVectors(e2.up, new i._49(0, 1, 0)), a2 = n2.clone().inverse(), s2 = new i._49(), c2 = new i._18();
            return function() {
              var e3 = I.object.position;
              return t3.copy(e3).sub(I.target), t3.applyQuaternion(n2), H.setFromVector3(t3), I.autoRotate && B === z.NONE && o(r2()), H.theta += j.theta, H.phi += j.phi, H.theta = Math.max(I.minAzimuthAngle, Math.min(I.maxAzimuthAngle, H.theta)), H.phi = Math.max(I.minPolarAngle, Math.min(I.maxPolarAngle, H.phi)), H.makeSafe(), H.radius *= V, H.radius = Math.max(I.minDistance, Math.min(I.maxDistance, H.radius)), I.target.add(k), t3.setFromSpherical(H), t3.applyQuaternion(a2), e3.copy(I.target).add(t3), I.object.lookAt(I.target), true === I.enableDamping ? (j.theta *= 1 - I.dampingFactor, j.phi *= 1 - I.dampingFactor) : j.set(0, 0, 0), V = 1, k.set(0, 0, 0), !!(W || s2.distanceToSquared(I.object.position) > G || 8 * (1 - c2.dot(I.object.quaternion)) > G) && (I.dispatchEvent(O), s2.copy(I.object.position), c2.copy(I.object.quaternion), W = false, true);
            };
          }(), this.dispose = function() {
            I.domElement.removeEventListener("contextmenu", U, false), I.domElement.removeEventListener("mousedown", S, false), I.domElement.removeEventListener("mousewheel", L, false), I.domElement.removeEventListener("MozMousePixelScroll", L, false), I.domElement.removeEventListener("touchstart", R, false), I.domElement.removeEventListener("touchend", D, false), I.domElement.removeEventListener("touchmove", P, false), document.removeEventListener("mousemove", T, false), document.removeEventListener("mouseup", A, false), document.removeEventListener("mouseout", A, false), window.removeEventListener("keydown", C, false);
          };
          var I = this, O = { type: "change" }, N = { type: "start" }, F = { type: "end" }, z = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 }, B = z.NONE, G = 1e-6, H = new i._39(), j = new i._39(), V = 1, k = new i._49(), W = false, X = new i._48(), q = new i._48(), Y = new i._48(), Z = new i._48(), J = new i._48(), K = new i._48(), Q = new i._48(), $ = new i._48(), ee = new i._48(), te = function() {
            var e3 = new i._49();
            return function(t3, r3) {
              e3.setFromMatrixColumn(r3, 0), e3.multiplyScalar(-t3), k.add(e3);
            };
          }(), re = function() {
            var e3 = new i._49();
            return function(t3, r3) {
              e3.setFromMatrixColumn(r3, 1), e3.multiplyScalar(t3), k.add(e3);
            };
          }(), ie = function() {
            var e3 = new i._49();
            return function(t3, r3) {
              var n2 = I.domElement === document ? I.domElement.body : I.domElement;
              if (I.object instanceof i._16) {
                var o2 = I.object.position;
                e3.copy(o2).sub(I.target);
                var a2 = e3.length();
                a2 *= Math.tan(I.object.fov / 2 * Math.PI / 180), te(2 * t3 * a2 / n2.clientHeight, I.object.matrix), re(2 * r3 * a2 / n2.clientHeight, I.object.matrix);
              } else
                I.object instanceof i._14 ? (te(t3 * (I.object.right - I.object.left) / I.object.zoom / n2.clientWidth, I.object.matrix), re(r3 * (I.object.top - I.object.bottom) / I.object.zoom / n2.clientHeight, I.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), I.enablePan = false);
            };
          }();
          I.domElement.addEventListener("contextmenu", U, false), I.domElement.addEventListener("mousedown", S, false), I.domElement.addEventListener("mousewheel", L, false), I.domElement.addEventListener("MozMousePixelScroll", L, false), I.domElement.addEventListener("touchstart", R, false), I.domElement.addEventListener("touchend", D, false), I.domElement.addEventListener("touchmove", P, false), window.addEventListener("keydown", C, false), this.update();
        }, i.OrbitControls.prototype = Object.create(i.C.prototype), i.OrbitControls.prototype.constructor = i.OrbitControls, Object.defineProperties(i.OrbitControls.prototype, { center: { get: function() {
          return console.warn("THREE.OrbitControls: .center has been renamed to .target"), this.target;
        } }, noZoom: { get: function() {
          return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), !this.enableZoom;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."), this.enableZoom = !e2;
        } }, noRotate: { get: function() {
          return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), !this.enableRotate;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."), this.enableRotate = !e2;
        } }, noPan: { get: function() {
          return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), !this.enablePan;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."), this.enablePan = !e2;
        } }, noKeys: { get: function() {
          return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), !this.enableKeys;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."), this.enableKeys = !e2;
        } }, staticMoving: { get: function() {
          return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), !this.enableDamping;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."), this.enableDamping = !e2;
        } }, dynamicDampingFactor: { get: function() {
          return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor;
        }, set: function(e2) {
          console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."), this.dampingFactor = e2;
        } } }), t.a = i.OrbitControls;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ParallaxShader = { modes: { none: "NO_PARALLAX", basic: "USE_BASIC_PARALLAX", steep: "USE_STEEP_PARALLAX", occlusion: "USE_OCLUSION_PARALLAX", relief: "USE_RELIEF_PARALLAX" }, uniforms: { bumpMap: { type: "t", value: null }, map: { type: "t", value: null }, parallaxScale: { type: "f", value: null }, parallaxMinLayers: { type: "f", value: null }, parallaxMaxLayers: { type: "f", value: null } }, vertexShader: ["varying vec2 vUv;", "varying vec3 vViewPosition;", "varying vec3 vNormal;", "void main() {", "vUv = uv;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vViewPosition = -mvPosition.xyz;", "vNormal = normalize( normalMatrix * normal );", "gl_Position = projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader: ["uniform sampler2D bumpMap;", "uniform sampler2D map;", "uniform float parallaxScale;", "uniform float parallaxMinLayers;", "uniform float parallaxMaxLayers;", "varying vec2 vUv;", "varying vec3 vViewPosition;", "varying vec3 vNormal;", "#ifdef USE_BASIC_PARALLAX", "vec2 parallaxMap( in vec3 V ) {", "float initialHeight = texture2D( bumpMap, vUv ).r;", "vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;", "return vUv - texCoordOffset;", "}", "#else", "vec2 parallaxMap( in vec3 V ) {", "float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );", "float layerHeight = 1.0 / numLayers;", "float currentLayerHeight = 0.0;", "vec2 dtex = parallaxScale * V.xy / V.z / numLayers;", "vec2 currentTextureCoords = vUv;", "float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;", "for ( int i = 0; i < 30; i += 1 ) {", "if ( heightFromTexture <= currentLayerHeight ) {", "break;", "}", "currentLayerHeight += layerHeight;", "currentTextureCoords -= dtex;", "heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;", "}", "#ifdef USE_STEEP_PARALLAX", "return currentTextureCoords;", "#elif defined( USE_RELIEF_PARALLAX )", "vec2 deltaTexCoord = dtex / 2.0;", "float deltaHeight = layerHeight / 2.0;", "currentTextureCoords += deltaTexCoord;", "currentLayerHeight -= deltaHeight;", "const int numSearches = 5;", "for ( int i = 0; i < numSearches; i += 1 ) {", "deltaTexCoord /= 2.0;", "deltaHeight /= 2.0;", "heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;", "if( heightFromTexture > currentLayerHeight ) {", "currentTextureCoords -= deltaTexCoord;", "currentLayerHeight += deltaHeight;", "} else {", "currentTextureCoords += deltaTexCoord;", "currentLayerHeight -= deltaHeight;", "}", "}", "return currentTextureCoords;", "#elif defined( USE_OCLUSION_PARALLAX )", "vec2 prevTCoords = currentTextureCoords + dtex;", "float nextH = heightFromTexture - currentLayerHeight;", "float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;", "float weight = nextH / ( nextH - prevH );", "return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );", "#else", "return vUv;", "#endif", "}", "#endif", "vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {", "vec2 texDx = dFdx( vUv );", "vec2 texDy = dFdy( vUv );", "vec3 vSigmaX = dFdx( surfPosition );", "vec3 vSigmaY = dFdy( surfPosition );", "vec3 vR1 = cross( vSigmaY, surfNormal );", "vec3 vR2 = cross( surfNormal, vSigmaX );", "float fDet = dot( vSigmaX, vR1 );", "vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );", "vec3 vProjVtex;", "vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;", "vProjVtex.z = dot( surfNormal, viewPosition );", "return parallaxMap( vProjVtex );", "}", "void main() {", "vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );", "gl_FragColor = texture2D( map, mapUv );", "}"].join("\n") }, t.a = i.ParallaxShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.RGBShiftShader = { uniforms: { tDiffuse: { type: "t", value: null }, amount: { type: "f", value: 5e-3 }, angle: { type: "f", value: 0 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float amount;", "uniform float angle;", "varying vec2 vUv;", "void main() {", "vec2 offset = amount * vec2( cos(angle), sin(angle));", "vec4 cr = texture2D(tDiffuse, vUv + offset);", "vec4 cga = texture2D(tDiffuse, vUv);", "vec4 cb = texture2D(tDiffuse, vUv - offset);", "gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);", "}"].join("\n") }, t.a = i.RGBShiftShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.RenderPass = function(e2, t2, r2, n, o) {
          this.scene = e2, this.camera = t2, this.overrideMaterial = r2, this.clearColor = n, this.clearAlpha = void 0 !== o ? o : 1, this.oldClearColor = new i.m(), this.oldClearAlpha = 1, this.enabled = true, this.clear = true, this.needsSwap = false;
        }, i.RenderPass.prototype = { render: function(e2, t2, r2, i2) {
          this.scene.overrideMaterial = this.overrideMaterial, this.clearColor && (this.oldClearColor.copy(e2.getClearColor()), this.oldClearAlpha = e2.getClearAlpha(), e2.setClearColor(this.clearColor, this.clearAlpha)), e2.render(this.scene, this.camera, r2, this.clear), this.clearColor && e2.setClearColor(this.oldClearColor, this.oldClearAlpha), this.scene.overrideMaterial = null;
        } }, t.a = i.RenderPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.SSAOShader = { uniforms: { tDiffuse: { type: "t", value: null }, tDepth: { type: "t", value: null }, size: { type: "v2", value: new i._48(512, 512) }, cameraNear: { type: "f", value: 1 }, cameraFar: { type: "f", value: 100 }, onlyAO: { type: "i", value: 0 }, aoClamp: { type: "f", value: 0.5 }, lumInfluence: { type: "f", value: 0.5 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float cameraNear;", "uniform float cameraFar;", "uniform bool onlyAO;", "uniform vec2 size;", "uniform float aoClamp;", "uniform float lumInfluence;", "uniform sampler2D tDiffuse;", "uniform sampler2D tDepth;", "varying vec2 vUv;", "#define DL 2.399963229728653", "#define EULER 2.718281828459045", "const int samples = 8;", "const float radius = 5.0;", "const bool useNoise = false;", "const float noiseAmount = 0.0003;", "const float diffArea = 0.4;", "const float gDisplace = 0.4;", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "vec2 rand( const vec2 coord ) {", "vec2 noise;", "if ( useNoise ) {", "float nx = dot ( coord, vec2( 12.9898, 78.233 ) );", "float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );", "noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );", "} else {", "float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );", "float gg = fract( coord.t * ( size.y / 2.0 ) );", "noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;", "}", "return ( noise * 2.0  - 1.0 ) * noiseAmount;", "}", "float readDepth( const in vec2 coord ) {", "float cameraFarPlusNear = cameraFar + cameraNear;", "float cameraFarMinusNear = cameraFar - cameraNear;", "float cameraCoef = 2.0 * cameraNear;", "return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );", "}", "float compareDepths( const in float depth1, const in float depth2, inout int far ) {", "float garea = 2.0;", "float diff = ( depth1 - depth2 ) * 100.0;", "if ( diff < gDisplace ) {", "garea = diffArea;", "} else {", "far = 1;", "}", "float dd = diff - gDisplace;", "float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );", "return gauss;", "}", "float calcAO( float depth, float dw, float dh ) {", "float dd = radius - depth * radius;", "vec2 vv = vec2( dw, dh );", "vec2 coord1 = vUv + dd * vv;", "vec2 coord2 = vUv - dd * vv;", "float temp1 = 0.0;", "float temp2 = 0.0;", "int far = 0;", "temp1 = compareDepths( depth, readDepth( coord1 ), far );", "if ( far > 0 ) {", "temp2 = compareDepths( readDepth( coord2 ), depth, far );", "temp1 += ( 1.0 - temp1 ) * temp2;", "}", "return temp1;", "}", "void main() {", "vec2 noise = rand( vUv );", "float depth = readDepth( vUv );", "float tt = clamp( depth, aoClamp, 1.0 );", "float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );", "float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );", "float ao = 0.0;", "float dz = 1.0 / float( samples );", "float z = 1.0 - dz / 2.0;", "float l = 0.0;", "for ( int i = 0; i <= samples; i ++ ) {", "float r = sqrt( 1.0 - z );", "float pw = cos( l ) * r;", "float ph = sin( l ) * r;", "ao += calcAO( depth, pw * w, ph * h );", "z = z - dz;", "l = l + DL;", "}", "ao /= float( samples );", "ao = 1.0 - ao;", "vec3 color = texture2D( tDiffuse, vUv ).rgb;", "vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );", "float lum = dot( color.rgb, lumcoeff );", "vec3 luminance = vec3( lum );", "vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );", "if ( onlyAO ) {", "final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );", "}", "gl_FragColor = vec4( final, 1.0 );", "}"].join("\n") }, t.a = i.SSAOShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.SVGLoader = function(e2) {
          this.manager = void 0 !== e2 ? e2 : i.v;
        }, i.SVGLoader.prototype = { constructor: i.SVGLoader, load: function(e2, t2, r2, n) {
          var o = this, a = new DOMParser();
          new i._54(o.manager).load(e2, function(e3) {
            var r3 = a.parseFromString(e3, "image/svg+xml");
            t2(r3.documentElement);
          }, r2, n);
        } }, t.a = i.SVGLoader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.SavePass = function(e2) {
          void 0 === i.CopyShader && console.error("THREE.SavePass relies on THREE.CopyShader");
          var t2 = i.CopyShader;
          this.textureID = "tDiffuse", this.uniforms = i._46.clone(t2.uniforms), this.material = new i._35({ uniforms: this.uniforms, vertexShader: t2.vertexShader, fragmentShader: t2.fragmentShader }), this.renderTarget = e2, void 0 === this.renderTarget && (this.renderTargetParameters = { minFilter: i.U, magFilter: i.U, format: i._22, stencilBuffer: false }, this.renderTarget = new i._53(window.innerWidth, window.innerHeight, this.renderTargetParameters)), this.enabled = true, this.needsSwap = false, this.clear = false, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.SavePass.prototype = { render: function(e2, t2, r2, i2) {
          this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = r2), this.quad.material = this.material, e2.render(this.scene, this.camera, this.renderTarget, this.clear);
        } }, t.a = i.SavePass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.SepiaShader = { uniforms: { tDiffuse: { type: "t", value: null }, amount: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float amount;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 color = texture2D( tDiffuse, vUv );", "vec3 c = color.rgb;", "color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );", "color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );", "color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );", "gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );", "}"].join("\n") }, t.a = i.SepiaShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ShaderPass = function(e2, t2) {
          this.textureID = void 0 !== t2 ? t2 : "tDiffuse", this.uniforms = i._46.clone(e2.uniforms), this.material = new i._35({ defines: e2.defines || {}, uniforms: this.uniforms, vertexShader: e2.vertexShader, fragmentShader: e2.fragmentShader }), this.renderToScreen = false, this.enabled = true, this.needsSwap = true, this.clear = false, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.ShaderPass.prototype = { render: function(e2, t2, r2, i2) {
          this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = r2), this.quad.material = this.material, this.renderToScreen ? e2.render(this.scene, this.camera) : e2.render(this.scene, this.camera, t2, this.clear);
        } }, t.a = i.ShaderPass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ShaderToon = { toon1: { uniforms: { uDirLightPos: { value: new i._49() }, uDirLightColor: { value: new i.m(15658734) }, uAmbientLightColor: { value: new i.m(328965) }, uBaseColor: { value: new i.m(16777215) } }, vertexShader: ["varying vec3 vNormal;", "varying vec3 vRefract;", "void main() {", "vec4 worldPosition = modelMatrix * vec4( position, 1.0 );", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "vec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );", "vNormal = normalize( normalMatrix * normal );", "vec3 I = worldPosition.xyz - cameraPosition;", "vRefract = refract( normalize( I ), worldNormal, 1.02 );", "gl_Position = projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader: ["uniform vec3 uBaseColor;", "uniform vec3 uDirLightPos;", "uniform vec3 uDirLightColor;", "uniform vec3 uAmbientLightColor;", "varying vec3 vNormal;", "varying vec3 vRefract;", "void main() {", "float directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);", "vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;", "float intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );", "intensity += length(lightWeighting) * 0.2;", "float cameraWeighting = dot( normalize( vNormal ), vRefract );", "intensity += pow( 1.0 - length( cameraWeighting ), 6.0 );", "intensity = intensity * 0.2 + 0.3;", "if ( intensity < 0.50 ) {", "gl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );", "} else {", "gl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );", "}", "}"].join("\n") }, toon2: { uniforms: { uDirLightPos: { value: new i._49() }, uDirLightColor: { value: new i.m(15658734) }, uAmbientLightColor: { value: new i.m(328965) }, uBaseColor: { value: new i.m(15658734) }, uLineColor1: { value: new i.m(8421504) }, uLineColor2: { value: new i.m(0) }, uLineColor3: { value: new i.m(0) }, uLineColor4: { value: new i.m(0) } }, vertexShader: ["varying vec3 vNormal;", "void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "}"].join("\n"), fragmentShader: ["uniform vec3 uBaseColor;", "uniform vec3 uLineColor1;", "uniform vec3 uLineColor2;", "uniform vec3 uLineColor3;", "uniform vec3 uLineColor4;", "uniform vec3 uDirLightPos;", "uniform vec3 uDirLightColor;", "uniform vec3 uAmbientLightColor;", "varying vec3 vNormal;", "void main() {", "float camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);", "float light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);", "gl_FragColor = vec4( uBaseColor, 1.0 );", "if ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {", "gl_FragColor *= vec4( uLineColor1, 1.0 );", "}", "if ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {", "gl_FragColor *= vec4( uLineColor2, 1.0 );", "}", "}"].join("\n") }, hatching: { uniforms: { uDirLightPos: { value: new i._49() }, uDirLightColor: { value: new i.m(15658734) }, uAmbientLightColor: { value: new i.m(328965) }, uBaseColor: { value: new i.m(16777215) }, uLineColor1: { value: new i.m(0) }, uLineColor2: { value: new i.m(0) }, uLineColor3: { value: new i.m(0) }, uLineColor4: { value: new i.m(0) } }, vertexShader: ["varying vec3 vNormal;", "void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "}"].join("\n"), fragmentShader: ["uniform vec3 uBaseColor;", "uniform vec3 uLineColor1;", "uniform vec3 uLineColor2;", "uniform vec3 uLineColor3;", "uniform vec3 uLineColor4;", "uniform vec3 uDirLightPos;", "uniform vec3 uDirLightColor;", "uniform vec3 uAmbientLightColor;", "varying vec3 vNormal;", "void main() {", "float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);", "vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;", "gl_FragColor = vec4( uBaseColor, 1.0 );", "if ( length(lightWeighting) < 1.00 ) {", "if ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {", "gl_FragColor = vec4( uLineColor1, 1.0 );", "}", "}", "if ( length(lightWeighting) < 0.75 ) {", "if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {", "gl_FragColor = vec4( uLineColor2, 1.0 );", "}", "}", "if ( length(lightWeighting) < 0.50 ) {", "if (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {", "gl_FragColor = vec4( uLineColor3, 1.0 );", "}", "}", "if ( length(lightWeighting) < 0.3465 ) {", "if (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {", "gl_FragColor = vec4( uLineColor4, 1.0 );", "}", "}", "}"].join("\n") }, dotted: { uniforms: { uDirLightPos: { value: new i._49() }, uDirLightColor: { value: new i.m(15658734) }, uAmbientLightColor: { value: new i.m(328965) }, uBaseColor: { value: new i.m(16777215) }, uLineColor1: { value: new i.m(0) } }, vertexShader: ["varying vec3 vNormal;", "void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "vNormal = normalize( normalMatrix * normal );", "}"].join("\n"), fragmentShader: ["uniform vec3 uBaseColor;", "uniform vec3 uLineColor1;", "uniform vec3 uLineColor2;", "uniform vec3 uLineColor3;", "uniform vec3 uLineColor4;", "uniform vec3 uDirLightPos;", "uniform vec3 uDirLightColor;", "uniform vec3 uAmbientLightColor;", "varying vec3 vNormal;", "void main() {", "float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);", "vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;", "gl_FragColor = vec4( uBaseColor, 1.0 );", "if ( length(lightWeighting) < 1.00 ) {", "if ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {", "gl_FragColor = vec4( uLineColor1, 1.0 );", "}", "}", "if ( length(lightWeighting) < 0.50 ) {", "if ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {", "gl_FragColor = vec4( uLineColor1, 1.0 );", "}", "}", "}"].join("\n") } }, t.a = i.ShaderToon;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.TechnicolorShader = { uniforms: { tDiffuse: { type: "t", value: null } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );", "vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);", "gl_FragColor = newTex;", "}"].join("\n") }, t.a = i.TechnicolorShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.TexturePass = function(e2, t2) {
          void 0 === i.CopyShader && console.error("THREE.TexturePass relies on THREE.CopyShader");
          var r2 = i.CopyShader;
          this.uniforms = i._46.clone(r2.uniforms), this.uniforms.opacity.value = void 0 !== t2 ? t2 : 1, this.uniforms.tDiffuse.value = e2, this.material = new i._35({ uniforms: this.uniforms, vertexShader: r2.vertexShader, fragmentShader: r2.fragmentShader }), this.enabled = true, this.needsSwap = false, this.camera = new i._14(-1, 1, 1, -1, 0, 1), this.scene = new i._31(), this.quad = new i._3(new i._17(2, 2), null), this.scene.add(this.quad);
        }, i.TexturePass.prototype = { render: function(e2, t2, r2, i2) {
          this.quad.material = this.material, e2.render(this.scene, this.camera, r2);
        } }, t.a = i.TexturePass;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.ToneMapShader = { uniforms: { tDiffuse: { type: "t", value: null }, averageLuminance: { type: "f", value: 1 }, luminanceMap: { type: "t", value: null }, maxLuminance: { type: "f", value: 16 }, middleGrey: { type: "f", value: 0.6 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "varying vec2 vUv;", "uniform float middleGrey;", "uniform float maxLuminance;", "#ifdef ADAPTED_LUMINANCE", "uniform sampler2D luminanceMap;", "#else", "uniform float averageLuminance;", "#endif", "const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);", "vec3 ToneMap( vec3 vColor ) {", "#ifdef ADAPTED_LUMINANCE", "float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;", "#else", "float fLumAvg = averageLuminance;", "#endif", "float fLumPixel = dot(vColor, LUM_CONVERT);", "float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;", "float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);", "return fLumCompressed * vColor;", "}", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );", "}"].join("\n") }, t.a = i.ToneMapShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.TriangleBlurShader = { uniforms: { texture: { type: "t", value: null }, delta: { type: "v2", value: new i._48(1, 1) } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["#define ITERATIONS 10.0", "uniform sampler2D texture;", "uniform vec2 delta;", "varying vec2 vUv;", "float random( vec3 scale, float seed ) {", "return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );", "}", "void main() {", "vec4 color = vec4( 0.0 );", "float total = 0.0;", "float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );", "for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {", "float percent = ( t + offset - 0.5 ) / ITERATIONS;", "float weight = 1.0 - abs( percent );", "color += texture2D( texture, vUv + delta * percent ) * weight;", "total += weight;", "}", "gl_FragColor = color / total;", "}"].join("\n") }, t.a = i.TriangleBlurShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.UnpackDepthRGBAShader = { uniforms: { tDiffuse: { type: "t", value: null }, opacity: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float opacity;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "float unpackDepth( const in vec4 rgba_depth ) {", "const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );", "float depth = dot( rgba_depth, bit_shift );", "return depth;", "}", "void main() {", "float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );", "gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );", "}"].join("\n") }, t.a = i.UnpackDepthRGBAShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.VerticalBlurShader = { uniforms: { tDiffuse: { type: "t", value: null }, v: { type: "f", value: 1 / 512 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float v;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n") }, t.a = i.VerticalBlurShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.VerticalTiltShiftShader = { uniforms: { tDiffuse: { type: "t", value: null }, v: { type: "f", value: 1 / 512 }, r: { type: "f", value: 0.35 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform float v;", "uniform float r;", "varying vec2 vUv;", "void main() {", "vec4 sum = vec4( 0.0 );", "float vv = v * abs( r - vUv.y );", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;", "sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;", "gl_FragColor = sum;", "}"].join("\n") }, t.a = i.VerticalTiltShiftShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.VignetteShader = { uniforms: { tDiffuse: { type: "t", value: null }, offset: { type: "f", value: 1 }, darkness: { type: "f", value: 1 } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform float offset;", "uniform float darkness;", "uniform sampler2D tDiffuse;", "varying vec2 vUv;", "void main() {", "vec4 texel = texture2D( tDiffuse, vUv );", "vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );", "gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );", "}"].join("\n") }, t.a = i.VignetteShader;
      }, function(e, t, r) {
        "use strict";
        var i = r(0);
        i.SobelOperatorShader = { uniforms: { tDiffuse: { value: null }, resolution: { value: new i._48() } }, vertexShader: ["varying vec2 vUv;", "void main() {", "vUv = uv;", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["uniform sampler2D tDiffuse;", "uniform vec2 resolution;", "varying vec2 vUv;", "void main() {", "vec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );", "const mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 );", "const mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 );", "float tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;", "float tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;", "float tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;", "float tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;", "float tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;", "float tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;", "float tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;", "float tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;", "float tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;", "float valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 + ", "Gx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 + ", "Gx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2; ", "float valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 + ", "Gy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 + ", "Gy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2; ", "float G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );", "gl_FragColor = vec4( vec3( G ), 1 );", "}"].join("\n") }, t.a = i.SobelOperatorShader;
      }]);
    });
  }
});
export default require_three_addons_min();
//# sourceMappingURL=three-addons.js.map
